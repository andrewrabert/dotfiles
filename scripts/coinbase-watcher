#!/usr/bin/env python3
import argparse
import asyncio
import curses
import json
import signal
import sys

import tabulate
import websockets

SLEEP = 0.5

FEE = 0.015
SPENT = 0

BALANCE = {
    'ETH': 0,
}


class Coinbase:

    def __init__(self, product):
        self.product = product
        self.ws = None

    async def connect(self):
        await self.close()

        self.ws = await websockets.connect('wss://ws-feed.pro.coinbase.com')
        await self.ws.send(json.dumps({
            'type': 'subscribe',
            'product_ids': [
                self.product,
            ],
            'channels': [
                {
                    'name': 'ticker',
                    'product_ids': [
                        self.product,
                    ]
                }
            ]
        }))
        await self.ws.recv()
        return self

    async def close(self):
        if self.ws is not None:
            try:
                await self.close()
            except Exception:
                pass
            self.ws = None

    async def get_price(self):
        while True:
            try:
                message = await self.ws.recv()
            except Exception:
                await self.connect()
            else:
                break
        return float(json.loads(message)['price'])


def format_data(price):
    balance_eth = BALANCE['ETH']
    sale = balance_eth * price
    fee = sale * FEE
    payout = sale - fee
    profit = payout - SPENT
    buy_equivalent = price - (price * FEE)

    data = {
        'balance_eth': balance_eth,
        'price': price,
        'sale': sale,
        'fee': fee,
        'payout': payout,
        'buy_equivalent': buy_equivalent,
        'profit': profit,
    }
    for key, value in data.items():
        data[key] = f'{value:.2f}'

    return data


async def loop(stdscr, coinbase):
    while True:
        price = await coinbase.get_price()

        data = format_data(price)

        table = [
            ('ETH', data['price']),
            (None, None),
            ('Sale', data['sale']),
            ('Fee', data['fee']),
            ('Payout', data['payout']),
            (None, None),
            ('Profit', data['profit']),
        ]

        table = tabulate.tabulate(table, floatfmt='.2f', tablefmt='plain')

        stdscr.addstr(0, 0, table)
        stdscr.refresh()

        await asyncio.sleep(SLEEP)


def die(*_):
    sys.exit(1)


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--current', action='store_true')
    args = parser.parse_args()

    for sig in signal.SIGINT, signal.SIGTERM:
        signal.signal(sig, die)

    coinbase = Coinbase('ETH-USD')
    if args.current:
        price = await coinbase.get_price()
        await coinbase.close()
        print(json.dumps(format_data(price), indent=2, sort_keys=True))
    else:
        try:
            stdscr = curses.initscr()
            curses.noecho()
            curses.cbreak()
            await loop(stdscr, coinbase)
        finally:
            curses.echo()
            curses.nocbreak()
            curses.endwin()


if __name__ == '__main__':
    asyncio.run(main())
