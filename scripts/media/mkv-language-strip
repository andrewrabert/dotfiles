#!/usr/bin/env python3
import argparse
import pathlib
import shutil
import subprocess
import sys

import enzyme


DEFAULT_KEEP_LANGUAGES = {'eng'}


class MKVFile:
    def __init__(self, path):
        self.path = path
        with self.path.open('rb') as handle:
            self.metadata = enzyme.MKV(handle)

    @property
    def languages(self):
        languages = set()

        for track in self.metadata.audio_tracks:
            languages.add(track.language)

        for track in self.metadata.subtitle_tracks:
            languages.add(track.language)

        return languages

    def matching_audio_tracks(self, languages):
        audio_tracks = []
        for track in self.metadata.audio_tracks:
            if track.language in languages:
                audio_tracks.append(track.number - 1)

        return audio_tracks

    def matching_subtitle_tracks(self, languages):
        subtitle_tracks = []
        for track in self.metadata.subtitle_tracks:
            if track.language in languages:
                subtitle_tracks.append(track.number - 1)

        return subtitle_tracks

    def track_string(self, track_type, track_list):
        track_command = []
        if track_list:
            track_command += ['--' + track_type + '-tracks']
            invalid_tracks = "!"

            first_track = True
            for track in track_list:
                if first_track:
                    first_track = False
                else:
                    invalid_tracks += ','

                invalid_tracks += str(track)
            track_command += [invalid_tracks]

        return track_command

    def remove_tracks(self, target_path, audio=[], subtitle=[]):
        target_path.parent.mkdir(parents=True, exist_ok=True)
        if target_path.exists():
            print(f'error: already exists "{target_path}"', file=sys.stderr)
            sys.exit(1)
        if audio or subtitle:
            conversion_call = ['mkvmerge', '-o', target_path]

            conversion_call += self.track_string('audio',
                                                 audio)
            conversion_call += self.track_string('subtitle',
                                                 subtitle)

            conversion_call += [self.path]

            subprocess.run(conversion_call, stdout=subprocess.DEVNULL)
        else:
            shutil.copy(self.path, target_path)


def mkv_files(root):
    files = []
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file() and path.suffix.lower() == '.mkv':
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return sorted(files)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_directory', type=pathlib.Path)
    parser.add_argument('output_directory', type=pathlib.Path)
    parser.add_argument(
        '-k',
        '--keep',
        action='append',
        help='Language to keep',
    )
    args = parser.parse_args()

    input_directory = args.input_directory.absolute()
    output_directory = args.output_directory.absolute()

    if args.keep:
        valid_languages = set(args.keep)
    else:
        valid_languages = DEFAULT_KEEP_LANGUAGES
    for path in mkv_files(input_directory):
        print(path)
        mkv = MKVFile(path)
        invalid_languages = mkv.languages - valid_languages
        target = output_directory.joinpath(path.relative_to(input_directory))
        audio = mkv.matching_audio_tracks(invalid_languages)
        subtitle = mkv.matching_subtitle_tracks(invalid_languages)

        mkv.remove_tracks(target, audio=audio, subtitle=subtitle)


if __name__ == '__main__':
    main()
