#!/usr/bin/env python3
import argparse
import datetime
import pathlib
import sys


def parse_date(path):
    try:
        if path.startswith(('DOC', 'IMG', 'VID')) and path[3] in ('-', '_'):
            dt = datetime.datetime(
                int(path[4:8]),
                int(path[8:10]),
                int(path[10:12])
            )
        else:
            raise ValueError('unknown date format')

        lower_bound = datetime.timedelta(weeks=52 * 5)
        upper_bound = datetime.timedelta(days=1)

        now = datetime.datetime.utcnow()
        if dt > (now + upper_bound):
            raise ValueError('date in the future')
        elif dt < (now - lower_bound):
            raise ValueError('date too old')
    except Exception as e:
        print(
            f'error: parse error "{path}" {e.args}', file=sys.stderr
        )
        sys.exit(1)
    return dt


def all_files(root):
    files = []
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return sorted(files)


def process_dir(source_directory, target_directory, dry_run):
    for path in all_files(source_directory):
        dt = parse_date(path.name)

        target_path = target_directory.joinpath(
            str(dt.year),
            str(dt.month).zfill(2),
            str(dt.day).zfill(2),
            path.name
        )
        print(target_path.relative_to(target_directory))

        if not dry_run:
            target_path.mkdir(parents=True, exist_ok=True)
            path.rename(target_path)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('source_directory', type=pathlib.Path)
    parser.add_argument('target_directory', type=pathlib.Path)
    parser.add_argument('-d', '--dry-run', action='store_true')
    args = parser.parse_args()

    process_dir(args.source_directory, args.target_directory, args.dry_run)


if __name__ == '__main__':
    main()
