#!/usr/bin/env python3
import argparse
import contextlib
import pathlib
import tempfile
import subprocess


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def bin_to_flac(source, target):
    with TempPath(dir=source.parent) as tmp:
        subprocess.run(
            ['flac',
             '--force',
             '--endian=little',
             '--channels=2',
             '--bps=16',
             '--sample-rate=44100',
             '--sign=signed',
             '--force-raw-format',
             source,
             '-o', tmp],
            check=True)
        tmp.rename(target)


def _parser_bin(value):
    path = pathlib.Path(value)
    if not path.is_file():
        raise ValueError('not a file')
    if path.suffix.lower() != '.bin':
        raise ValueError('must end with .bin')
    return path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--rm', action='store_true')
    parser.add_argument('bin', type=_parser_bin)
    args = parser.parse_args()

    print(args.bin)
    target = args.bin.with_suffix('.flac')
    print(target)
    if target.exists():
        raise RuntimeError('target exists')

    bin_to_flac(args.bin, target)
    if args.rm:
        args.bin.unlink()


if __name__ == '__main__':
    main()
