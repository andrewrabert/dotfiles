#!/usr/bin/env python
import argparse
import json
import subprocess


class ffprobe:
    @staticmethod
    def duration(path):
        proc = subprocess.run(
            [
                "ffprobe",
                "-v",
                "error",
                "-show_entries",
                "format=duration",
                "-of",
                "default=noprint_wrappers=1:nokey=1",
                path,
            ],
            stdout=subprocess.PIPE,
            check=True,
        )
        return float(proc.stdout.decode())


class ffmpeg:
    @staticmethod
    def cropdetect(path, start, duration):
        args = [
            "ffmpeg",
            "-ss",
            str(start),
            "-t",
            duration,
            "-i",
            path,
            "-max_muxing_queue_size",
            "1024",
            "-vsync",
            "vfr",
            "-vf",
            "cropdetect",
            "-f",
            "null",
            "-",
            "-max_muxing_queue_size",
            "1024",
        ]
        proc = subprocess.run(args, stderr=subprocess.PIPE, check=True)

        crops = []
        for line in proc.stderr.decode().splitlines():
            if not line.startswith("[Parsed_cropdetect_"):
                continue

            for part in line.split():
                if part.startswith("crop="):
                    _, part = part.split("=")
                    crops.append([int(p) for p in part.split(":")])
        return crops


def _pretty_json(data):
    return json.dumps(data, indent=2, sort_keys=True, ensure_ascii=False)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path")
    parser.add_argument("--steps", default=20, type=int, help="(default: %(default)s)")
    parser.add_argument("--duration", default="00:05", help="(default: %(default)s)")
    args = parser.parse_args()

    duration = int(ffprobe.duration(args.path))
    crops = []
    for i in range(0, duration, int(duration / args.steps)):
        crops.extend(ffmpeg.cropdetect(args.path, i, args.duration))

    width = max(c[0] for c in crops)
    height = max(c[1] for c in crops)
    x = min(c[2] for c in crops)
    y = min(c[3] for c in crops)

    print(json.dumps({"width": width, "height": height, "x": x, "y": y}))


if __name__ == "__main__":
    main()
