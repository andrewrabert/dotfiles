#!/usr/bin/env python3
import argparse
import multiprocessing
import os
import subprocess


POOL_SIZE = multiprocessing.cpu_count()


def run_command(command):
    subprocess.run(command,
                   stdout=subprocess.PIPE,
                   stderr=subprocess.PIPE,
                   check=True)


def wav_to_flac(path):
    print(f'wav-to-flac - {path}')
    run_command(['flac', '--best', '--delete-input-file', '-V', '-f', path])


def ffmpeg_to_wav(path):
    print(f'ffmpeg-to-wav - {path}')
    run_command(['ffmpeg', '-i', path, f'{path}.wav'])
    os.remove(path)


def find_endswith(ending, directory):
    paths = []

    for root, dirs, files in os.walk(directory):
        for f in files:
            if f.lower().endswith(ending):
                paths.append(os.path.join(root, f))

    return paths


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('directory')
    parser.add_argument('-x', '--extract', action='store_const', const=True)
    args = parser.parse_args()

    if not args.extract and not args.encode:
        exit()

    with multiprocessing.Pool(POOL_SIZE) as p:
        if args.extract is True:
            p.map(ffmpeg_to_wav, find_endswith(('.ape',
                                                '.tta',
                                                '.tak',
                                                '.m4a',
                                                '.wv'), args.directory))
        p.map(wav_to_flac, find_endswith('.wav', args.directory))


if __name__ == '__main__':
    main()
