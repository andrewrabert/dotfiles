#!/usr/bin/env python3
import argparse
import pathlib
import sys


def mkv_files(root):
    return [
        path
        for path in root.iterdir()
        if path.is_file() and path.suffix == '.mkv'
    ]


def read_titles(path):
    return [
        line.replace('/', '-')
        for line in path.read_text().split('\n')
        if line
    ]


def main():
    parser = argparse.ArgumentParser()
    parser.description = f'{parser.prog} directory'
    parser.add_argument('directory', type=pathlib.Path)
    parser.add_argument('-t', '--titles', type=pathlib.Path)
    parser.add_argument('-f', '--force', action='store_const', const=True)
    parser.add_argument('-r', '--raw', action='store_const', const=True)
    parser.add_argument('-d', '--dryrun', action='store_const', const=True)
    args = parser.parse_args()

    titles_path = args.titles
    if args.titles is None:
        titles_path = args.directory / 'titles'
    titles = read_titles(titles_path)
    files = sorted(mkv_files(args.directory))

    new_names = {}
    for num, (title, path) in enumerate(zip(titles, files), 1):
        if args.raw:
            new_names[path] = title
        else:
            formatted_num = str(num).zfill(2)
            if formatted_num not in path.name and not args.force:
                print(
                    f'error: "{formatted_num}" not in "{path.name}"',
                    file=sys.stderr
                )
                sys.exit(1)
            new_names[path] = f'{formatted_num} - {title}'

    for path, new_name in new_names.items():
        target = path.with_name(new_name).with_suffix(path.suffix)
        print(path.name)
        print(target.name)
        print()
        if not args.dryrun:
            path.rename(target)


if __name__ == '__main__':
    main()
