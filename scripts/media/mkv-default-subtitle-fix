#!/usr/bin/env python
import argparse
import json
import pathlib
import subprocess


def mkv_info(path):
    proc = subprocess.run(
        ['mkvmerge', '-J', path],
        stdout=subprocess.PIPE,
        check=True)
    return json.loads(proc.stdout)


def process(path):
    info = mkv_info(path)

    subs = (
        track
        for track in info['tracks']
        if track['type'] == 'subtitles'
    )

    for sub in subs:
        number = sub['properties']['number']
        if sub['properties']['language'] in ('eng', 'und'):
            continue
        if sub['properties']['default_track'] \
                or sub['properties']['forced_track']:
            print('Unsetting default & forced flags', path)
            subprocess.run(
                ['mkvpropedit',
                 '--edit', f'track:{number}',
                 '--set', 'flag-default=false',
                 '--set', 'flag-forced=false',
                 str(path)],
                stdout=subprocess.DEVNULL,
                check=True)


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file() and not path.is_symlink():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', nargs='*', type=pathlib.Path)
    args = parser.parse_args()

    paths = set()
    for path in args.path:
        if path.is_dir():
            paths.update(all_files(path))
        else:
            paths.add(path)

    for path in sorted(paths):
        try:
            process(path)
        except Exception:
            print(path)
            raise


if __name__ == '__main__':
    main()
