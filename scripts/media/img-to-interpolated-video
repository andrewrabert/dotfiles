#!/usr/bin/env python3
import argparse
import contextlib
import datetime
import json
import pathlib
import shutil
import subprocess
import tempfile


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def gifski(path, target, framerate="30", loops=1):
    with TempPath(
        dir=target.parent, prefix=".img-to-interpolated-video", suffix=target.suffix
    ) as tmptarget:
        subprocess.run(
            [
                "gifski",
                "--extra",
                "--fps",
                framerate,
                "--output",
                tmptarget,
                "--",
                *list(path.iterdir()),
            ],
            stdout=subprocess.DEVNULL,
            check=True,
        )
        tmptarget.rename(target)


def ffmpeg_merge(path, target, framerate="30", loops=1):
    with TempPath(
        dir=target.parent, prefix=".img-to-interpolated-video", suffix=target.suffix
    ) as tmptarget:
        subprocess.run(
            [
                "ffmpeg",
                "-y",
                "-stream_loop",
                str(loops),
                "-framerate",
                framerate,
                "-pattern_type",
                "glob",
                "-i",
                f"{path}/*.png",
                "-c:v",
                "libx264",
                "-preset",
                "slow",
                "-crf",
                "16",
                tmptarget,
            ],
            stderr=subprocess.DEVNULL,
            stdout=subprocess.DEVNULL,
            check=True,
        )
        tmptarget.rename(target)


def ffmpeg_frames_to_png(path, target, remove_duplicates=True):
    args = [
        "ffmpeg",
        "-i",
        path,
    ]
    if remove_duplicates:
        info = ffprobe(path)
        avg_frame_rate = None
        for stream in info:
            avg_frame_rate = stream.get("avg_frame_rate")
            if avg_frame_rate:
                x, y = avg_frame_rate.split("/")
                avg_frame_rate = int(x) / int(y)
        args.extend(
            [
                "-vsync",
                "0",
                "-vf",
                f"mpdecimate,setpts=N/{round(avg_frame_rate, 3)}/TB",
            ]
        )

    args.extend(
        [
            "-compression_level",
            "0",
            f"{target}/%08d.png",
        ]
    )
    subprocess.run(
        args, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL, check=True
    )


def ffprobe(path):
    proc = subprocess.run(
        [
            "ffprobe",
            "-v",
            "error",
            "-show_streams",
            "-print_format",
            "json",
            "--",
            path,
        ],
        stderr=subprocess.DEVNULL,
        stdout=subprocess.PIPE,
        check=True,
    )
    return json.loads(proc.stdout)["streams"]


def rife(source, target):
    subprocess.run(
        ["rife", source, target],
        check=True,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", type=pathlib.Path)
    parser.add_argument(
        "-l",
        "--loops",
        type=int,
        metavar="NUM",
        default=3,
        help="(default %(default)s)",
    )
    parser.add_argument(
        "-r",
        "--rife-iterations",
        type=int,
        metavar="NUM",
        default=3,
        help="(default %(default)s)",
    )
    parser.add_argument(
        "-f", "--framerate", default="30", metavar="FPS", help="(default %(default)s)"
    )
    parser.add_argument("--no-bounce", action="store_true")
    parser.add_argument("--no-cycle", action="store_true")
    parser.add_argument("source", type=pathlib.Path)
    parser.add_argument("--format", default="mp4", choices=["gif", "mp4", "png"])
    args = parser.parse_args()

    output = args.output
    if output is None:
        name = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        if args.format == "mp4":
            name += ".mp4"
        elif args.format == "gif":
            name += ".gif"
        output = pathlib.Path(name)

    with contextlib.ExitStack() as exitstack:
        if args.source.is_file():
            source = pathlib.Path(
                exitstack.enter_context(tempfile.TemporaryDirectory())
            )
            ffmpeg_frames_to_png(args.source, source)
        elif args.source.is_dir():
            source = args.source
        else:
            raise FileNotFoundError

        tmpdir = exitstack.enter_context(tempfile.TemporaryDirectory(dir=source.parent))
        tmpdir = pathlib.Path(tmpdir)
        sources = sorted(list(source.iterdir()))

        new = [*sources]
        if args.no_bounce and not args.no_cycle:
            new.append(sources[0])
        else:
            new.extend([*list(reversed(sources[:-1]))])

        for i, p in enumerate(new):
            shutil.copy(p, tmpdir / f"{i:032d}.png")

        if args.rife_iterations:
            for i in range(args.rife_iterations):
                print(f"Running rife ({i + 1} of {args.rife_iterations})")
                tmpdir2 = exitstack.enter_context(
                    tempfile.TemporaryDirectory(dir=source.parent)
                )
                tmpdir2 = pathlib.Path(tmpdir2)
                rife(tmpdir, tmpdir2)
                shutil.rmtree(tmpdir)
                shutil.move(tmpdir2, tmpdir)

            if not args.no_cycle:
                sources = sorted(list(tmpdir.iterdir()))
                for i, path in enumerate(sources[-pow(2, args.rife_iterations) :]):
                    path.unlink()

        match args.format:
            case "mp4":
                print("Rendering video")
                ffmpeg_merge(
                    tmpdir,
                    output,
                    framerate=args.framerate,
                    loops=args.loops,
                )
            case "gif":
                print("Rendering gif")
                gifski(
                    tmpdir,
                    output,
                    framerate=args.framerate,
                )
            case "png":
                shutil.copytree(tmpdir, output)
            case _:
                raise RuntimeError
        print(output)


if __name__ == "__main__":
    main()
