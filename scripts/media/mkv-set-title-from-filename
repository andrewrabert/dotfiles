#!/usr/bin/env python3
import argparse
import asyncio
import json
import pathlib


async def mkv_info(path):
    if not isinstance(path, pathlib.Path):
        path = pathlib.Path(path)
    # mkvmerge doesn't seem to support the end-of-options '--' argument
    path = path.absolute()

    proc = await asyncio.create_subprocess_exec(
        'mkvmerge', '-J', path,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate()
    if proc.returncode:
        raise ProcessError(proc)
    return json.loads(stdout)


async def set_mkv_title(path, title):
    if not isinstance(path, pathlib.Path):
        path = pathlib.Path(path)
    # mkvpropedit doesn't seem to support the end-of-options '--' argument
    path = path.absolute()

    proc = await asyncio.create_subprocess_exec(
        'mkvpropedit',
        '--edit', 'info', 
        '--set', f'title={title}',
        path,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate()
    if proc.returncode:
        raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text


def _parser_mkv_file(value):
    path = pathlib.Path(value)
    if not path.is_file():
        raise ValueError('path must be file')
    if path.suffix.lower() != '.mkv':
        raise ValueError('path must end with .mkv')
    return path.absolute()


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--ignore-set', action='store_true',
                        help='do not overwrite the title if already set')
    parser.add_argument('path', nargs='+', type=_parser_mkv_file)
    args = parser.parse_args()

    for path in args.path:
        info = await mkv_info(path)
        file_title = path.stem
        try:
            title = info['container']['properties']['title']
        except KeyError:
            title = None
        if args.ignore_set and title is not None:
            continue
        if title != file_title:
            print(f'Setting title to "{file_title}" ({path})')
            await set_mkv_title(path, file_title)


if __name__ == '__main__':
    asyncio.run(main())
