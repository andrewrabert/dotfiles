#!/usr/bin/env python3
import argparse
import asyncio
import contextlib
import json
import logging
import os
import pathlib
import tempfile

import async_executor
import mutagen

LOGGER = logging.getLogger("reencode-lossless")


def copy_tags(source, target):
    metadata_source = mutagen.File(source)
    metadata_target = mutagen.File(target)
    for key, value in metadata_source.items():
        if isinstance(value, mutagen.apev2.APETextValue):
            value = str(value)
        metadata_target[key] = value
    metadata_target.save()


class ffprobe:
    class ProcessError(Exception):
        """Raised when ffprobe fails to run"""

    @classmethod
    async def stream_info(cls, path):
        proc = await asyncio.create_subprocess_exec(
            "ffprobe",
            "-v",
            "error",
            "-show_streams",
            "-print_format",
            "json",
            "--",
            str(path),
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        if proc.returncode != 0:
            raise cls.ProcessError

        return json.loads(stdout)["streams"]


async def decode_ape(source, fd):
    proc = await asyncio.create_subprocess_exec(
        "mac", source, "-", "-d", stderr=asyncio.subprocess.DEVNULL, stdout=fd
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError(source)

    return result()


class InvalidFileType(Exception):
    """Raised when a file type is not what it appears to be"""


async def decode_m4a(source, fd):
    # m4a is a container format similar to mkv.
    # it may or may not be a single, lossless audio track
    alac_stream = None

    streams = await ffprobe.stream_info(source)
    for stream in streams:
        if stream["codec_type"] == "audio":
            if stream["codec_name"] == "alac":
                if alac_stream is not None:
                    raise InvalidFileType("multiple ALAC streams")
                alac_stream = stream
            else:
                raise InvalidFileType(f"unhandled audio type: {stream['codec_name']}")
        elif stream["codec_type"] == "video":
            if stream["codec_name"] not in ("mjpeg", "png"):
                raise InvalidFileType(f"unhandled video type: {stream['codec_name']}")
        else:
            raise InvalidFileType(f"unhandled stream type: {stream['codec_type']}")

    if alac_stream is None:
        raise InvalidFileType("not ALAC file")

    if alac_stream["sample_fmt"] != "s16p":
        raise InvalidFileType("unhandled sample format")
    if alac_stream["channels"] != 2:
        raise InvalidFileType("unhandled channel count")
    if alac_stream["channel_layout"] != "stereo":
        raise InvalidFileType("unhandled channel layout")

    proc = await asyncio.create_subprocess_exec(
        "ffmpeg",
        "-i",
        str(source),
        "-f",
        "wav",
        "-acodec",
        "pcm_s16le",
        "-ac",
        "2",
        "-",
        stderr=asyncio.subprocess.DEVNULL,
        stdout=fd,
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError(source)

    return result()


async def decode_wv(source, fd):
    proc = await asyncio.create_subprocess_exec(
        "wvunpack", "-q", source, "-o", "-", stdout=fd
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError(source)

    return result()


async def decode_flac(source, fd):
    proc = await asyncio.create_subprocess_exec(
        "flac", "-csd", source, stderr=asyncio.subprocess.DEVNULL, stdout=fd
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError(source)

    return result()


async def decode_wav(source, fd):
    proc = await asyncio.create_subprocess_exec("cat", source, stdout=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError(source)

    return result()


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


async def encode_flac(fd, dest):
    proc = await asyncio.create_subprocess_exec(
        "flac",
        "--silent",
        "--best",
        "--verify",
        "--force",
        "--output-name",
        dest,
        "-",
        stdin=fd,
        stderr=asyncio.subprocess.DEVNULL,
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise EncodeError()

    return result()


async def encode_wav(fd, dest):
    # seems dirty, but allows for async
    proc = await asyncio.create_subprocess_exec(
        "tee",
        "--",
        dest,
        stdin=fd,
        stdout=asyncio.subprocess.DEVNULL,
        stderr=asyncio.subprocess.DEVNULL,
    )

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise EncodeError()

    return result()


class DecodeError(Exception):
    """Raised when an error occurs while decoding audio"""


class EncodeError(Exception):
    """Raised when an error occurs while encoding audio"""


ENCODE_FORMAT = {
    "flac": {
        "encode_func": encode_flac,
        "suffix": ".flac",
    },
    "wav": {
        "encode_func": encode_wav,
        "suffix": ".wav",
    },
}


async def reencode(source, encode_format="flac"):
    suffix = source.suffix.lower()

    decode_contexts = {
        ".flac": decode_flac,
        ".ape": decode_ape,
        ".m4a": decode_m4a,
        ".wv": decode_wv,
        ".wav": decode_wav,
    }

    read, write = os.pipe()

    decode = await decode_contexts[suffix](source, write)
    os.close(write)

    suffix = ENCODE_FORMAT[encode_format]["suffix"]
    encode_func = ENCODE_FORMAT[encode_format]["encode_func"]

    before = source.stat().st_size

    with TempPath(dir=source.parent, suffix=suffix) as tmp:
        encode = await encode_func(read, tmp)
        os.close(read)

        await asyncio.gather(decode, encode)

        try:
            copy_tags(source, tmp)
        except Exception:
            pass
        source.unlink()
        dest = source.with_suffix(suffix)
        tmp.rename(dest)

    after = dest.stat().st_size
    return source, before, after


def all_files(root):
    files = []
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


async def run(args):
    logging.basicConfig(format="%(levelname)s %(message)s", level=logging.INFO)

    paths = set()
    for path in args.path:
        if path.is_dir():
            paths.update(all_files(path))
        else:
            paths.add(path)

    executor = async_executor.AsyncExecutor(args.numprocs)
    for path in paths:
        if path.suffix.lower() in (".flac", ".ape", ".m4a", ".wav", ".wv"):
            executor.submit(reencode, path, encode_format=args.format)

    errors = []

    size_diff_printer = SizeDiffPrinter(len(executor))

    async for result in executor:
        try:
            source, before, after = result.result()
        except Exception as e:
            LOGGER.exception(e)
            errors.append(str(e))
            continue

        size_diff_printer.print(before, after, source)
    size_diff_printer.print_total()

    for error in sorted(errors):
        LOGGER.error("Error %s", error)


class SizeDiffPrinter:
    def __init__(self, num_items):
        self._before_total = 0
        self._after_total = 0
        self._num_items = num_items
        self._num_printed = 0
        self._printed = False

    @staticmethod
    def format_diff(before, after):
        diff = ((before - after) / before) * 100
        if diff:
            diff = "{:.2f}".format(diff)
            if not float(diff):
                diff = f"<{diff}"
        return diff

    @staticmethod
    def sizeof_fmt(num):
        for unit in ["B", "KB", "MB", "GB", "TB", "PB"]:
            if abs(num) < 1024.0:
                break
            num /= 1024.0
        return f"{num:.1f}{unit}"

    def print(self, before, after, name):
        self._num_printed += 1
        self._before_total += before
        self._after_total += after
        diff = self.format_diff(before, after)

        s = f"{diff:>6}%" if diff else 7 * "-"
        num_printed = str(self._num_printed).rjust(len(str(self._num_items)))
        print(f"({num_printed}/{self._num_items})\t{s}\t{name}")

    def print_total(self):
        if self._num_printed:
            if diff := self.format_diff(self._before_total, self._after_total):
                fmt = self.sizeof_fmt(self._before_total - self._after_total)
                print(f"Total: {diff}% ({fmt})")
            else:
                print("Total: -")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", dest="numprocs", metavar="NUMPROCS", type=int)
    parser.add_argument("--format", choices=ENCODE_FORMAT, default="flac")
    parser.add_argument("path", type=pathlib.Path, nargs="+")
    args = parser.parse_args()

    asyncio.run(run(args))


if __name__ == "__main__":
    main()
