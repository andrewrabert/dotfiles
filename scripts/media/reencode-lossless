#!/usr/bin/env python3
import argparse
import asyncio
import contextlib
import logging
import os
import pathlib
import tempfile

import mutagen

LOGGER = logging.getLogger('reencode-lossless')


def copy_tags(source, target):
    metadata_source = mutagen.File(source)
    metadata_target = mutagen.File(target)
    for key, value in metadata_source.items():
        if isinstance(value, mutagen.apev2.APETextValue):
            value = str(value)
        metadata_target[key] = value
    metadata_target.save()


async def decode_ape(source, fd):
    proc = await asyncio.create_subprocess_exec(
        'mac', source, '-', '-d',
        stdout=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError()
    return result()


async def decode_wv(source, fd):
    proc = await asyncio.create_subprocess_exec(
        'wvunpack', '-q', source, '-o', '-',
        stdout=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError()
    return result()


async def decode_flac(source, fd):
    proc = await asyncio.create_subprocess_exec(
        'flac', '-csd', source,
        stdout=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError()
    return result()


async def decode_wav(source, fd):
    proc = await asyncio.create_subprocess_exec(
        'cat', source,
        stdout=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise DecodeError()
    return result()


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


async def encode_flac(fd, dest):
    proc = await asyncio.create_subprocess_exec(
        'flac', '-s', '--best', '-V', '-f', '-o', dest, '-',
        stdin=fd)

    async def result():
        await proc.wait()
        if proc.returncode != 0:
            raise EncodeError()
    return result()


class DecodeError(Exception):
    """Raised when an error occurs while decoding audio"""


class EncodeError(Exception):
    """Raised when an error occurs while encoding audio"""


async def reencode(source):
    LOGGER.info('Processing %s', source)

    suffix = source.suffix.lower()

    decode_contexts = {
        '.flac': decode_flac,
        '.ape': decode_ape,
        '.wv': decode_wv,
        '.wav': decode_wav
    }

    read, write = os.pipe()

    decode = await decode_contexts[suffix](source, write)
    os.close(write)

    with TempPath(dir=source.parent, suffix='.flac') as tmp:
        encode = await encode_flac(read, tmp)
        os.close(read)

        await asyncio.gather(decode, encode)

        try:
            copy_tags(source, tmp)
        except Exception:
            pass
        source.unlink()
        tmp.rename(source.with_suffix('.flac'))


def all_files(root):
    files = []
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


async def run(executor):
    errors = []
    async for result in executor.as_completed():
        try:
            result.result()
        except Exception as e:
            LOGGER.exception(e)
            errors.append(str(e))

    for error in sorted(errors):
        LOGGER.error('Error %s', error)


class AsyncExecutor:
    def __init__(self, max_pending=None):
        self.max_pending = \
            os.cpu_count() if max_pending is None else max_pending
        self._queued = []
        self._pending = set()

    def submit(self, func, *args, **kwargs):
        self._queued.append((func, args, kwargs))
        try:
            asyncio.get_running_loop()
        except RuntimeError:
            pass
        else:
            self._fill()

    async def as_completed(self):
        while self._queued or self._pending:
            self._fill()

            done, self._pending = await asyncio.wait(
                self._pending, return_when=asyncio.FIRST_COMPLETED)

            for result in done:
                yield result

    def _fill(self):
        for _ in range(self.max_pending - len(self._pending)):
            if not self._queued:
                return
            func, args, kwargs = self._queued.pop()
            self._pending.add(asyncio.create_task(func(*args, **kwargs)))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', dest='numprocs', metavar='NUMPROCS', type=int)
    parser.add_argument('path', type=pathlib.Path, nargs='+')
    args = parser.parse_args()

    logging.basicConfig(
        format='%(levelname)s %(message)s',
        level=logging.INFO)

    paths = set()
    for path in args.path:
        if path.is_dir():
            paths.update(all_files(path))
        else:
            paths.add(path)

    executor = AsyncExecutor(max_pending=args.numprocs)
    for path in paths:
        if path.suffix.lower() in ('.flac', '.ape', '.wav', '.wv'):
            executor.submit(reencode, path)

    asyncio.run(run(executor))


if __name__ == '__main__':
    main()
