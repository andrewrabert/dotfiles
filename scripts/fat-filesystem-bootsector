#!/usr/bin/env python3
import argparse
import collections
import pathlib
import pprint
import struct


class FAT32BootSector(collections.OrderedDict):
    HEADER_LAYOUT = '<3s8sHBHBHHBHHHLLLHHLHH12sBBBL11s8s'
    HEADER_VARS = ['BS_jmpBoot', 'BS_OEMName', 'BPB_BytsPerSec',
                   'BPB_SecPerClus', 'BPB_RsvdSecCnt', 'BPB_NumFATs',
                   'BPB_RootEntCnt', 'BPB_TotSec16', 'BPB_Media',
                   'BPB_FATSz16', 'BPB_SecPerTrk', 'BPB_NumHeads',
                   'BPB_HiddSec', 'BPB_TotSec32',
                   'BPB_FATSz32', 'BPB_ExtFlags', 'BPB_FSVer', 'BPB_RootClus',
                   'BPB_FSInfo', 'BPB_BkBootSec', 'BPB_Reserved', 'BS_DrvNum',
                   'BS_Reserved1', 'BS_BootSig', 'BS_VolID', 'BS_VolLab',
                   'BS_FilSysType']

    def __init__(self):
        super().__init__()
        self.update(dict.fromkeys(self.HEADER_VARS))

    def __bytes__(self):
        return struct.pack(self.HEADER_LAYOUT, *self.values())

    def __len__(self):
        return struct.calcsize(self.HEADER_LAYOUT)

    def parse_header(self, data):
        self.update(dict(zip(
            self.HEADER_VARS,
            struct.unpack(self.HEADER_LAYOUT, data[:len(self)]))))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', type=pathlib.Path)
    args = parser.parse_args()

    bootsector = FAT32BootSector()
    with open(args.path, 'rb') as handle:
        bootsector.parse_header(handle.read(len(bootsector)))

    pprint.pprint(dict(bootsector))


if __name__ == '__main__':
    main()
