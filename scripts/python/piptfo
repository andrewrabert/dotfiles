#!/usr/bin/env python3
# Wise man once said "Coding with sickness result in many WTFs when better"

import json
import os
import pathlib
import subprocess
import sys

import pkg_resources

os.environ.setdefault('PIPTFO_CONFIG', '~/.config/piptfo')
os.environ.setdefault('PIPTFO_LOCAL', '~/.local/share/piptfo')
os.environ.setdefault('PIPTFO_BIN', '~/.local/bin')

PIPTFO_CONFIG = pathlib.Path(os.environ['PIPTFO_CONFIG']).expanduser().resolve()
PIPTFO_LOCAL = pathlib.Path(os.environ['PIPTFO_LOCAL']).expanduser().resolve()
PIPTFO_BIN = pathlib.Path(os.environ['PIPTFO_BIN']).expanduser().resolve()


def package_scripts(package):
    bin_root = pathlib.Path(os.environ['VIRTUAL_ENV'], 'bin').resolve()

    dist = pkg_resources.get_distribution(package)

    scripts = []
    for line in dist.get_metadata_lines('RECORD'):
        path = pathlib.Path(dist.location, line.split(',')[0]).resolve()
        if path.parent == bin_root:
            scripts.append(path)
    return scripts


def pipenv(args, **kwargs):
    os.environ['WORKON_HOME'] = str(PIPTFO_LOCAL)

    # fix a deficiency in pipenv
    # https://github.com/pypa/pipenv/issues/1798
    os.environ['PIP_USER'] = '0'

    return subprocess.run(
        ['pipenv', *args],
        check=True,
        **kwargs
    )


def piptfo_scripts(namespace):
    result = pipenv(
        ['run', 'piptfo', namespace, 'scripts'],
        stdout=subprocess.PIPE
    )
    return [
        pathlib.Path(line.strip())
        for line in result.stdout.decode().split('\n')
        if line
    ]


def pipenv_explicitly_installed():
    result = pipenv(['graph', '--json-tree'], stdout=subprocess.PIPE)
    return [package['package_name'] for package in json.loads(result.stdout)]


def piptfo_all(args):
    for d in PIPTFO_CONFIG.iterdir():
        if d.is_dir():
            print(d)
            pipenv(
                ['run', 'piptfo', d.name, *args],
            )


def main():
    if sys.argv[1] == '-d':
        global PIPTFO_CONFIG
        PIPTFO_CONFIG = pathlib.Path(sys.argv[2]).expanduser().resolve()
        os.environ['PIPTFO_CONFIG'] = str(PIPTFO_CONFIG)
        sys.argv.pop(1)
        sys.argv.pop(2)
    if sys.argv[1] == '--all':
        piptfo_all(sys.argv[2:])
        sys.exit()
    else:
        namespace = sys.argv[1]
        method = sys.argv[2]
        args = sys.argv[2:]

    namespace_root = PIPTFO_CONFIG.joinpath(namespace)
    namespace_root.mkdir(parents=True, exist_ok=True)

    namespace_pipfile = namespace_root.joinpath('Pipfile')
    namespace_pipfile.touch()

    os.environ['PIPENV_PIPFILE'] = str(namespace_pipfile)

    if method == 'scripts':
        for package in pipenv_explicitly_installed():
            for script in package_scripts(package):
                print(script)
    else:
        pipenv(args)
        if method == 'install':
            for script in piptfo_scripts(namespace):
                target = PIPTFO_BIN.joinpath(script.name)
                print(f'Linking {target} -> {script}')
                try:
                    target.unlink()
                except FileNotFoundError:
                    pass
                target.symlink_to(script)


if __name__ == '__main__':
    main()
