#!/usr/bin/env sh
set -e

IMAGE="jellyfin/jellyfin"

show_usage() {
    cat << EOF
usage: jellyfin-build-all [--set-latest] VERSION
    --set-latest    pulls VERSION images and push the latest manifest for them
EOF
}


push_manifest() {
    tag="$1"
    docker manifest create "${IMAGE}:${tag}" \
        "${IMAGE}:${VERSION}-arm64" \
        "${IMAGE}:${VERSION}-amd64" \
        "${IMAGE}:${VERSION}-arm"

    docker manifest push --purge "${IMAGE}:${tag}"
}


SET_LATEST=''
while true; do
    case "$1" in
        --set-latest)
            SET_LATEST=1
            shift
            ;;
        --help)
            show_usage
            exit
            ;;
        *)
            if [ -n "$1" ]; then
                VERSION="$1"
            else
                show_usage >&2
                echo error: must supply version >&2
                exit 1
            fi
            break
    esac
done

set -x

if [ -n "$SET_LATEST" ]; then
    docker pull "${IMAGE}:${VERSION}-amd64"
    docker pull "${IMAGE}:${VERSION}-arm"
    docker pull "${IMAGE}:${VERSION}-arm64"

    push_manifest latest
else
    docker run --rm --privileged multiarch/qemu-user-static:register || true

    docker build --no-cache --pull . -t "${IMAGE}":$VERSION-amd64 -f Dockerfile
    docker build --no-cache --pull . -t "${IMAGE}":$VERSION-arm -f Dockerfile.arm
    docker build --no-cache --pull . -t "${IMAGE}":$VERSION-arm64 -f Dockerfile.arm64

    for arch in amd64 arm arm64; do
        docker push "${IMAGE}":$VERSION-$arch
    done

    push_manifest "$VERSION"
fi
