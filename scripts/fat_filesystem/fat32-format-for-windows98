#!/usr/bin/env python3
import argparse
import base64
import json
import struct
import subprocess

PATCH = {
  91: 'M8mO0bz4e47BvXgAxXY=',
  107: 'VhZVvyIFiX4AiU4CsQv886SO2b0AfMZF/g+LRhiIRfk4TkB9JYvBmbsAB+iXAHIag+s6ZqEcfGY7B4pX/HUGgMoCiFYCgMMQc+2/AgCDfhYAdUWLRhyLVh65AwBJQHUBQrsAfuhfAHMmsPhPdB2LRjIz0rkD',
  226: 'yHcei3YOO85zFyvxA0YcE1Ye69FzC+sng34q',
  255: 'A+n9Ar5+fayYA/CshMB0Fzz/dAm0DrsH',
  281: 'EOvuvoF96+W+f33r4JjNFl4fZo8EzRlBVmZq',
  310: 'UAZTagFqEIv0YIB+Ag51BLRC6x2RkjPS93YYkfd2GEKHyvd2GoryiujAzAIKzLgBAopWQM0TYY1kEF5yCkB1AUIDXgtJdbTDAxgBJw0KSW52YWxpZCBzeXN0ZW0gZGlza/8NCkRpc2sgSS9PIGVycm9y/w0KUmVwbGFjZSB0aGUgZGlzaywgYW5kIHRoZW4gcHJlc3MgYW55IGtleQ0K',
  473: 'TyAgICAgIFNZU01TRE9TICAgU1lTfgE=',
  498: 'SU5CT09UIFNZUw==',
  1025: 'Zg+2RhBmi04kZvfhZgNGHGYPt1YOZgPCM8lmiUb8ZsdG+P/////6ZotGLGaD+AIPgs/8Zj34//8PD4PF/GYPpMIQ+1JQ+mbB4BBmD6zQEGaD6AJmD7ZeDYvzZvfjZgNG/GYPpMIQ+7s=',
  1131: 'i/u5AQ==',
  1137: 'vvwPgqr8OC10HrELVr7YffOmXnQZA/mDxxU7+3LoTnXWWFroZg==',
  1176: 'q4PEBOlk/IPEBIt1CYt9D4vG+mbB4BCLx2aD+AJyO2Y9+P//D3MzZkhmSGYPtk4NZvfhZgNG/GYPpMIQ+7s=',
  1240: 'U7kE',
  1245: 'UvxbD4I9/IE/TVp1CIG/',
  1262: 'Qkp0Br6AfekO/Oo=',
  1275: 'cA==',
  1278: 'wBPSA8AT0ugY',
  1289: 'JmaLAWYl////D2YPpMIQZj34//8P+8O/',
  1315: '+mbB4BBmD6zQEGYPt04LZjPSZvfxZjtG+HREZolG+GYDRhxmD7dODmYDwWYPt14og+MPdBY6XhAPg6T7UmaLyGaLRiRm9+NmA8FaUmYPpMIQ+4vfuQE=',
  1403: 'tPtaD4Kf+/uL2sM='
}


def configure_partition_for_windows98(partition_path, vol_id):
    # info - lsblk (partition)
    proc = subprocess.run(
        ['lsblk',
         '--paths',  # full path names
         '--json', '--noheadings', '--output', 'name,type,pkname,fstype',
         partition_path],
        stdout=subprocess.PIPE,
        check=True)
    devices = json.loads(proc.stdout)['blockdevices']
    if len(devices) != 1:
        raise ValueError('unexpected topology')
    if devices[0]['type'] != 'part':
        raise ValueError('not a partition')
    parent_path = devices[0]['pkname']
    if parent_path is None:
        raise ValueError('cannot determine parent device')

    # info - lsblk (parent)
    proc = subprocess.run(
        ['lsblk',
         '--paths',  # full path names
         '--json', '--noheadings', '--output', 'name,type,pkname',
         parent_path],
        stdout=subprocess.PIPE,
        check=True)
    devices = json.loads(proc.stdout)['blockdevices']
    if len(devices) != 1:
        raise ValueError('unexpected topology')
    for index, child in enumerate(devices[0]['children']):
        if child['name'] == partition_path:
            partition_number = index + 1
            break

    # format partition
    subprocess.run(
        ['mkfs.fat', '-F32', partition_path],
        stdout=subprocess.DEVNULL,
        check=True)

    # set partition flags
    proc = subprocess.run(
        ['parted', parent_path,
         'set', str(partition_number), 'boot', 'on',
         'set', str(partition_number), 'lba', 'on'],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        check=True)

    # set bootsector attributes
    with open(partition_path, 'wb') as handle:
        # set OEM ID
        handle.seek(3)
        handle.write(struct.pack('<8s', b'MSWIN4.1'))

        # set Volume ID
        handle.seek(67)
        handle.write(struct.pack('<L', vol_id))

        # Windows-specific attributes (not sure what exactly these are)
        for index, encoded_value in PATCH.items():
            handle.seek(index)
            handle.write(base64.b64decode(encoded_value))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--vol-id', type=int, default=3347998142)
    parser.add_argument('path')
    args = parser.parse_args()

    configure_partition_for_windows98(args.path, args.vol_id)


if __name__ == '__main__':
    main()
