#!/usr/bin/env python
import argparse
import asyncio
import pathlib
import tempfile


async def create_img(path):
    if path.suffix != ".cue":
        raise RuntimeError
    if path.is_dir():
        raise RuntimeError

    files = []
    for line in path.read_text().splitlines():
        line = line.strip()
        if not line.startswith("FILE "):
            continue
        parts = line.split('"')
        if len(parts) != 3:
            raise RuntimeError
        filepath = (path.parent / pathlib.Path(parts[1])).absolute()
        if not filepath.is_file():
            raise RuntimeError
        files.append(filepath)

    if len(files) == 1:
        return

    name = path.with_suffix("").name

    with tempfile.TemporaryDirectory(
        dir=path.parent, prefix=".archive_", suffix=path.name + ".tmp"
    ) as tmp:
        tmp = pathlib.Path(tmp).absolute()
        proc = await asyncio.create_subprocess_exec(
            "binmerge",
            "--outdir",
            tmp,
            path.absolute(),
            name,
            cwd=path.parent.absolute(),
        )
        await proc.communicate()
        assert proc.returncode == 0
        tmp_files = list(pathlib.Path(tmp).iterdir())
        assert len(tmp_files) == 2
        newpaths = []
        for tmppath in tmp_files:
            newpath = (tmppath.parent.parent / tmppath.name).absolute()
            tmppath.rename(newpath)
            newpaths.append(newpath)
        for oldpath in set(files) - set(newpaths):
            oldpath.unlink()


def _all_paths(root):
    if root.is_file():
        return [root]
    else:
        stack = [root]
        paths = {root}

        if root.is_dir() and not root.is_symlink():
            while stack:
                for path in stack.pop().iterdir():
                    paths.add(path)
                    if path.is_dir() and not path.is_symlink():
                        stack.append(path)
        # sorted for deterministic archives ex. tar
        return sorted(paths)


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=pathlib.Path)
    args = parser.parse_args()

    for path in _all_paths(args.path):
        if path.suffix.lower() == ".cue":
            await create_img(path)


if __name__ == "__main__":
    asyncio.run(main())
