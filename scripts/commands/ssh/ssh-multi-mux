#!/usr/bin/env python3
"""
Execute command on multiple SSH hosts
"""
import argparse
import signal
import socket
import sys

import paramiko

BUFFER_SIZE = 64


class Style:
    FG_RED = '\u001b[31m'
    FG_GREEN = '\u001b[32m'
    FG_YELLOW = '\u001b[33m'
    FG_BLUE = '\u001b[34m'
    FG_MAGENTA = '\u001b[35m'
    FG_CYAN = '\u001b[36m'
    RESET = '\u001b[0m'


class _OutputMuxer:
    def __enter__(self):
        self._stdout_pending = {}
        self._stderr_pending = {}
        self._colors = None
        self._key_colors = {}
        return self

    def _key_color(self, key):
        if key not in self._key_colors:
            if not self._colors:
                self._colors = [
                    Style.FG_CYAN,
                    Style.FG_RED,
                    Style.FG_MAGENTA,
                    Style.FG_GREEN,
                    Style.FG_BLUE,
                    Style.FG_YELLOW,
                ]
            self._key_colors[key] = self._colors.pop()
        return self._key_colors[key]

    def __exit__(self, *_):
        self._write_pending(sys.stdout.buffer, self._stdout_pending)
        self._write_pending(sys.stderr.buffer, self._stderr_pending)

    def write_stdout(self, key, data):
        self._maybe_write(sys.stdout.buffer, self._stdout_pending, key, data)

    def write_stderr(self, key, data):
        self._maybe_write(sys.stderr.buffer, self._stderr_pending, key, data)

    def _maybe_write(self, output_buffer, pending, key, data):
        data = pending.pop(key, b'') + data
        lines = data.splitlines(True)
        if not lines[-1].endswith(b'\n'):
            pending[key] = lines.pop()
        data = b''.join(lines)
        self._write(output_buffer, data, key)

    def _write_pending(self, output_buffer, pending):
        for key, data in pending.items():
            if not data.endswith(b'\n'):
                data = data + b'\n'
            self._write(output_buffer, data, key)

    def _write(self, output_buffer, data, key):
        if output_buffer.isatty():
            prefix = ''.join([
                self._key_color(key),
                key,
                Style.RESET,
                ' '
            ]).encode()
            data = b''.join([
                prefix + d
                for d in data.splitlines(True)
            ])
        output_buffer.write(data)
        output_buffer.flush()


def main():
    parser = argparse.ArgumentParser(prog='ssh-multi-mux', description=__doc__)
    parser.add_argument('command')
    parser.add_argument('host', nargs='*')
    args = parser.parse_args()

    channels = {}

    def _exit_handler(signum, *_):
        sys.exit(130 if signum == signal.SIGINT else 1)

    signal.signal(signal.SIGINT, _exit_handler)
    signal.signal(signal.SIGTERM, _exit_handler)

    for host in args.host:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host)
        _, stdout, __ = ssh.exec_command(args.command)
        channel = stdout.channel
        channel.setblocking(0)
        channels[host] = channel

    with _OutputMuxer() as muxer:
        if sys.stdout.isatty():
            for host in channels:
                print('{}+ {}{}{}'.format(
                    Style.FG_GREEN,
                    muxer._key_color(host),
                    host,
                    Style.RESET))

        while channels:
            for host, channel in list(channels.items()):
                if channel.exit_status_ready():
                    channels.pop(host)
                    while stdout_data := channel.recv(BUFFER_SIZE):
                        muxer.write_stdout(host, stdout_data)
                    while stderr_data := channel.recv_stderr(BUFFER_SIZE):
                        muxer.write_stderr(host, stderr_data)
                    continue

                stdout_data = ''
                stderr_data = ''
                try:
                    stdout_data = channel.recv(BUFFER_SIZE)
                except socket.timeout:
                    pass
                if stdout_data:
                    muxer.write_stdout(host, stdout_data)

                try:
                    stderr_data = channel.recv_stderr(BUFFER_SIZE)
                except socket.timeout:
                    pass
                if stderr_data:
                    muxer.write_stderr(host, stderr_data)


if __name__ == '__main__':
    main()
