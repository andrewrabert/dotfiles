#!/usr/bin/env python
import argparse
import asyncio
import pathlib
import sys


class GitRepo:

    def __init__(self, path):
        self.path = path
        self._working_tree_dir = None

    async def working_tree_dir(self):
        if not self._working_tree_dir:
            args = ['git', 'rev-parse', '--show-toplevel']
            proc = await asyncio.create_subprocess_exec(
                *args, stdout=asyncio.subprocess.PIPE)
            await proc.wait()
            if proc.returncode:
                raise RuntimeError(proc.returncode)
            stdout = await proc.stdout.read()
            self._working_tree_dir = stdout.decode().strip()
        return self._working_tree_dir

    async def historic_paths(self):
        args = ['git']
        if self.path:
            args.extend(['-C', str(self.path)])
        args.extend([
            'log',
            '--pretty=format:',
            '--name-only',
            '--diff-filter=A',
        ])

        proc = await asyncio.create_subprocess_exec(
            *args, stdout=asyncio.subprocess.PIPE)
        await proc.wait()
        if proc.returncode:
            raise RuntimeError(proc.returncode)
        stdout = await proc.stdout.read()

        return {
            line
            for line in stdout.decode().splitlines()
            if line
        }

    async def lastest_commit_for_path(self, path):
        args = ['git']
        if self.path:
            args.extend(['-C', str(self.path)])
        args.extend([
            'rev-list',
            '-n',
            '1',
            'HEAD',
            '--',
            str(path),
        ])

        proc = await asyncio.create_subprocess_exec(
            *args, stdout=asyncio.subprocess.PIPE)
        await proc.wait()
        if proc.returncode:
            raise RuntimeError(proc.returncode)
        stdout = await proc.stdout.read()
        return stdout.strip().decode()

    async def restore_path(self, path, commit):
        args = ['git']
        if self.path:
            args.extend(['-C', str(self.path)])
        args.extend([
            'checkout',
            f'{commit}^',
            '--',
            str(path),
        ])

        proc = await asyncio.create_subprocess_exec(*args)
        await proc.wait()
        if proc.returncode:
            raise RuntimeError(proc.returncode)


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-C', metavar='path', dest='repo_path')
    parser.add_argument('--list', action='store_true',
                        help='list all deleted files')
    parser.add_argument('paths', nargs='*')
    args = parser.parse_args()

    repo = GitRepo(path=args.repo_path)

    if args.list:
        if args.paths:
            parser.error('paths cannot be specified when using --list')
            parser.exit(1)

        repo_root = pathlib.Path(await repo.working_tree_dir())
        for path in sorted(await repo.historic_paths()):
            if not (repo_root / path).exists():
                print(path)
    else:
        paths = args.paths
        if not sys.stdin.isatty():
            paths.extend(sys.stdin.read().splitlines())
        for path in sorted(paths):
            print(path)
            commit = await repo.lastest_commit_for_path(path)
            await repo.restore_path(path, commit)


if __name__ == '__main__':
    asyncio.run(main())
