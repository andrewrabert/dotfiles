#!/usr/bin/env python
import argparse
import os
import urllib.parse

import requests


class NotFound(Exception):
    """raised when something... isn't found!"""


class GitLab:
    def __init__(self, token=None, url=None):
        self.url = url if url is not None else "https://gitlab.com"
        self.session = requests.Session()
        if token is not None:
            self.session.headers["Authorization"] = f"Bearer {token}"

    def repos(self, *args, **kwargs):
        try:
            return self.project(*args, **kwargs)
        except NotFound:
            try:
                return self.user_projects(*args, **kwargs)
            except NotFound:
                return self.group_projects(*args, **kwargs)

    def project(self, name, archived=None, fork=None):
        safename = urllib.parse.quote(name, safe="")
        url = f"{self.url}/api/v4/projects/{safename}"
        response = self.session.get(url)
        if response.status_code == 404:
            try:
                message = response.json()["message"]
            except Exception:
                pass
            else:
                if message == "404 Project Not Found":
                    raise NotFound
        response.raise_for_status()
        project = response.json()
        if fork is not None:
            if fork != bool(project.get("forked_from_project")):
                raise NotFound
        if archived is not None and archived != project["archived"]:
            raise NotFound
        path = project["path_with_namespace"]
        if path.lower() == name.lower():
            return project

    def group_projects(self, *args, **kwargs):
        return self._projects("groups", *args, **kwargs)

    def user_projects(self, *args, **kwargs):
        return self._projects("users", *args, **kwargs)

    def _projects(self, name_type, name, archived=None, fork=None):
        name = urllib.parse.quote(name, safe="")

        query = {
            "include_subgroups": "true",
            "order_by": "id",
            "pagination": "keyset",
            "per_page": "100",
        }
        if archived is not None:
            query["archived"] = str(archived).lower()

        qs = urllib.parse.urlencode(query)
        url = f"{self.url}/api/v4/{name_type}/{name}/projects?{qs}"

        projects = {}
        while url:
            response = self.session.get(url)
            if response.status_code == 404:
                try:
                    message = response.json()["message"]
                except Exception:
                    pass
                else:
                    if message == "404 User Not Found":
                        raise NotFound("User Not Found")
                    if message == "404 Group Not Found":
                        raise NotFound("Group Not Found")
            response.raise_for_status()
            for project in response.json():
                if fork is not None:
                    if fork != bool(project.get("forked_from_project")):
                        continue
                projects[project["path_with_namespace"]] = project

            if next_link := response.links.get("next"):
                url = next_link["url"]
            else:
                url = None

        expected_prefix = f"{name.lower()}/"
        return [
            value
            for key, value in projects.items()
            if key.lower().startswith(expected_prefix)
        ]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--token",
        default=os.environ.get("GITLAB_TOKEN"),
        required="GITLAB_TOKEN" not in os.environ,
    )
    parser.add_argument("--url", default=os.environ.get("GITLAB_URL"))

    archived_group = parser.add_mutually_exclusive_group()
    archived_group.add_argument(
        "--archived", action="store_const", const=True, dest="archived"
    )
    archived_group.add_argument(
        "--not-archived", action="store_const", const=False, dest="archived"
    )

    fork_group = parser.add_mutually_exclusive_group()
    fork_group.add_argument("--fork", action="store_const", const=True, dest="fork")
    fork_group.add_argument(
        "--not-fork", action="store_const", const=False, dest="fork"
    )

    parser.add_argument("user")

    args = parser.parse_args()

    gitlab = GitLab(token=args.token, url=args.url)
    repos = gitlab.repos(args.user, archived=args.archived, fork=args.fork)
    print("\n".join(sorted(repo["path_with_namespace"] for repo in repos)))


if __name__ == "__main__":
    main()
