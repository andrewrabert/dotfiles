#!/usr/bin/env python3
import argparse
import enum
import pathlib
import shutil
import subprocess
import urllib.parse

CODE_ROOT_DIR = pathlib.Path('~/src').expanduser()
CACHE_PATH = pathlib.Path('~/.cache/gs').expanduser()


class Git:
    @staticmethod
    def clone(repository, directory):
        subprocess.run(
            ['git', 'clone', repository, directory],
            check=True
        )

    @staticmethod
    def fetch(directory):
        subprocess.run(
            ['git', '-C', str(directory), 'fetch', '--all'],
            check=True)


def _find_git_repos(root):
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                if path.name == '.git':
                    yield path.parent.absolute()
                else:
                    stack.append(path)


def _find_git_repos(root):
    all_repos = set()
    proc = subprocess.run(
        ['fd', 
         '--unrestricted', 
         '--type=d',
         '--print0',
         r'^\.git$',
         '--', root],
        stdout=subprocess.PIPE,
        check=True)
    for item in proc.stdout.split(b'\0'):
        if not item:
            continue
        path = pathlib.Path(item.decode())
        repo = path.parent.relative_to(root)
        all_repos.add(repo)
    repos = []
    for repo in all_repos:
        is_subrepo = False
        for p in repo.parents:
            if p in all_repos:
                is_subrepo = True
                break
        if is_subrepo:
            continue
        repos.append(repo)
    return repos


class SrcName(enum.StrEnum):
    ARCH_LINUX_AUR = 'aur'
    GITHUB = 'github'
    GITLAB = 'github'


def parse_repo(repo):
    repo = repo.lower()
    parsed = urllib.parse.urlparse(repo)
    path = parsed.path.strip('/')
    if parsed.scheme in ('http', 'https'):
        # TODO: parse .ssh/config for HostName
        match parsed.netloc:
            case 'github.com' | 'www.github.com':
                host = SrcName.GITHUB
                parts = path.split('/')
                if len(parts) < 2:
                    raise RuntimeError('invalid github url')
                path = '/'.join(parts[0:2])
            case 'gitlab.com' | 'www.gitlab.com':
                host = SrcName.GITLAB
                parts = path.split('/')
                if len(parts) < 2:
                    raise RuntimeError('invalid gitlab url')
                path = '/'.join(parts[0:])
            case 'aur.archlinux.org':
                host = SrcName.ARCH_LINUX_AUR
                parts = path.split('/')
                if parts[0] == 'packages':
                    path = parts[1]
            case _:
                raise NotImplementedError(f'unhandled netloc: {parsed.netloc}')
    elif parsed.scheme:
        host = parsed.scheme
    else:
        raise ValueError('missing git host')

    repo_path = path
    repo_dir = CODE_ROOT_DIR / host.lower() / repo_path.lower()
    return repo_dir, host, path


def main():
    parser = argparse.ArgumentParser('git-sync')
    parser.add_argument('--show-cache', action='store_true')
    parser.add_argument('--rm', action='store_true')
    parser.add_argument('repo', nargs='?')
    args = parser.parse_args()

    CACHE_PATH.touch()

    cache = []
    cache_modified = False
    for repo in CACHE_PATH.read_text().splitlines():
        repo_dir, _, _ = parse_repo(repo)
        if repo_dir.is_dir():
            cache_modified = True
            cache.append(repo)

    if args.show_cache:
        print('\n'.join(
            str(repo)
            for repo in sorted(_find_git_repos(CODE_ROOT_DIR))))
    elif args.repo is None:
        for repo_dir in _find_git_repos(pathlib.Path().absolute()):
            print(repo_dir)
            Git.fetch(repo_dir)
    else:
        repo = args.repo.lower()
        repo_dir, host, path = parse_repo(repo)
        if args.rm:
            if repo_dir.exists():
                shutil.rmtree(repo_dir)
                parser.exit()
            if repo in cache:
                cache_modified = True
                cache.remove(repo)
        else:
            if not repo_dir.exists():
                repo = f'{host}:{path}'
                Git.clone(repo, repo_dir)

            cache_modified = True
            if repo in cache:
                cache.remove(repo)
            cache.append(repo)
            print(repo_dir)

    if cache_modified:
        CACHE_PATH.write_text('\n'.join(cache))


if __name__ == '__main__':
    main()
