#!/usr/bin/env python3
import argparse
import pathlib
import subprocess
import sys
import urllib.parse

CODE_ROOT_DIR = pathlib.Path('~/code').expanduser()


class Git:
    @staticmethod
    def clone(repository, directory):
        subprocess.run(
            ['git', 'clone', repository, directory],
            check=True
        )

    @staticmethod
    def fetch(directory):
        subprocess.run(
            ['git', '-C', str(directory), 'fetch', '--all'],
            check=True)


def _find_git_repos(root):
    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                if path.name == '.git':
                    yield path.parent.absolute()
                else:
                    stack.append(path)


def main():
    parser = argparse.ArgumentParser('git-sync')
    parser.add_argument('--show-dir', action='store_true')
    parser.add_argument('repo', nargs='?')
    args = parser.parse_args()

    if args.repo is None:
        for repo_dir in _find_git_repos(pathlib.Path().absolute()):
            print(repo_dir)
            Git.fetch(repo_dir)
    else:
        parsed = urllib.parse.urlparse(args.repo)
        if parsed.scheme in ('http', 'https'):
            # TODO: parse .ssh/config for HostName
            if parsed.netloc in ('www.github.com', 'github.com'):
                host = 'github'
            else:
                raise NotImplementedError(f'unhandled netloc: {parsed.netloc}')
        elif parsed.scheme:
            host = parsed.scheme
        else:
            host = 'github'

        path = parsed.path.strip('/')
        if host == 'github':
            parts = path.split('/')
            if len(parts) < 2:
                raise RuntimeError('invalid github url')
            path = '/'.join(parts[0:2])

        repo_dir = CODE_ROOT_DIR / host.lower() / path.lower()
        if args.show_dir:
            print(repo_dir)
            sys.exit()

        if not repo_dir.exists():
            repo = f'{host}:{path}'
            Git.clone(repo, repo_dir)


if __name__ == '__main__':
    main()
