#!/usr/bin/env python3
import argparse
import os
import pathlib
import subprocess
import sys
import urllib.parse


SSH_CONFIG_PATH = pathlib.Path("~/.ssh/config").expanduser()


def ssh_hostmap():
    hostmap = {}

    host = None
    for line in SSH_CONFIG_PATH.read_text().splitlines():
        line = line.strip()
        if not line:
            continue
        key, value = line.split(maxsplit=1)
        if key.lower() == "host":
            host = value
        elif key.lower() == "hostname":
            hostmap[host] = value
    return hostmap


class Git:
    @staticmethod
    def toplevel(path):
        wdir = path.parent if path.is_file() else path
        proc = subprocess.run(
            ["git", "-C", wdir, "rev-parse", "--show-toplevel"],
            stdout=subprocess.PIPE,
            check=True,
        )
        lines = proc.stdout.decode().splitlines()
        if len(lines) != 1:
            raise RuntimeError(lines)
        return pathlib.Path(lines[0])

    @staticmethod
    def remote_url(path):
        wdir = path.parent if path.is_file() else path
        for remote in ("upstream", "origin"):
            proc = subprocess.run(
                ["git", "-C", wdir, "remote", "get-url", remote],
                stdout=subprocess.PIPE,
                stderr=subprocess.DEVNULL,
            )
            if proc.returncode == 0:
                return remote, proc.stdout.decode().strip()
        raise RuntimeError

    @staticmethod
    def remote_branches(path):
        wdir = path.parent if path.is_file() else path
        proc = subprocess.run(
            ["git", "-C", wdir, "branch", "--all"], stdout=subprocess.PIPE, check=True
        )

        branches = {}
        for line in proc.stdout.decode().splitlines():
            name = line[2:].split()[0]
            if name.startswith("remotes/"):
                _, remote, branch, *_ = name.split("/")
                branches.setdefault(remote, set())
                branches[remote].add(branch)
        return branches

    @staticmethod
    def current_branch(path):
        wdir = path.parent if path.is_file() else path
        proc = subprocess.run(
            ["git", "-C", wdir, "branch", "--show-current"],
            stdout=subprocess.PIPE,
            check=True,
        )
        return proc.stdout.decode().strip()


def get_url(path, lines):
    if path is None:
        path = Git.toplevel(pathlib.Path())
    path = path.absolute()

    remote, remote_url = Git.remote_url(path)
    if remote_url.lower().startswith(("http://", "https://")):
        url = remote_url
    elif ":" in remote_url:
        host, urlpath = remote_url.split(":", maxsplit=1)
        try:
            hostname = ssh_hostmap()[host]
        except KeyError:
            if "@" in host:
                host = host.split("@", maxsplit=1)[-1]
                hostname = host.split(":", maxsplit=1)[0]
        if hostname == "aur.archlinux.org":
            url = f"https://aur.archlinux.org/packages/{urlpath}"
        else:
            url = f"https://{hostname}/{urlpath}"
    else:
        raise NotImplementedError(remote_url)

    toplevel = Git.toplevel(path)
    path_parts = path.relative_to(toplevel).parts if toplevel != path else []

    if path_parts or lines:
        branches = Git.remote_branches(path)
        current_branch = Git.current_branch(path)

        for branch in (current_branch, "main", "master"):
            if branch in branches[remote]:
                preferred = branch
                break

        parsed = urllib.parse.urlparse(url)
        netloc = parsed.netloc.lower()

        start, end = lines if lines else (None, None)
        # purposefully fuzzy for the sake of internal deployments
        if "github" in netloc:
            url = "/".join([url, "blob", preferred, *path_parts])
            if start:
                url = f"{url}#L{start}"
                if end:
                    url = f"{url}-L{end}"
        elif "gitlab" in netloc:
            url = "/".join([url, "-", "blob", preferred, *path_parts])
            if start:
                url = f"{url}#L{start}"
                if end:
                    url = f"{url}-{end}"
        else:
            print("error: unhandled git host", file=sys.stderr)
    return url


def _parser_lines(value):
    if "-" in value:
        start, end = value.split("-")
        return int(start), int(end)
    else:
        return int(value), None


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("path", type=pathlib.Path, nargs="?")
    parser.add_argument("-l", "--lines", type=_parser_lines)
    args = parser.parse_args()

    url = get_url(args.path, lines=args.lines)
    print(url)
    if sys.stdout.isatty() and not os.environ.get("SSH_TTY"):
        subprocess.run(["open", url])


if __name__ == "__main__":
    main()
