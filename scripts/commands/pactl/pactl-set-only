#!/usr/bin/env python
import asyncio
import argparse
import json


class pactl:

    @staticmethod
    async def list_cards():
        proc = await asyncio.create_subprocess_exec(
            'pactl', '--format=json', 'list', 'cards',
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError(f'returncode {proc.returncode}')
        return json.loads(stdout.decode())

    @staticmethod
    async def set_profile(card_name, profile_name):
        proc = await asyncio.create_subprocess_exec(
            'pactl', 'set-card-profile', card_name, profile_name)
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError(f'returncode {proc.returncode}')

    @staticmethod
    async def set_sink_mute():
        proc = await asyncio.create_subprocess_exec(
            'pactl', 'set-sink-mute', '@DEFAULT_SINK@', '0')
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError(f'returncode {proc.returncode}')

    @staticmethod
    async def set_source_mute():
        proc = await asyncio.create_subprocess_exec(
            'pactl', 'set-source-mute', '@DEFAULT_SOURCE@', '0')
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError(f'returncode {proc.returncode}')


async def async_main(args):
    cards = await pactl.list_cards()

    if args.list_active:
        for card in cards:
            if card['active_profile'] != 'off':
                print(card['properties']['device.product.name'])
                print('  ', card['profiles'][card['active_profile']]['description'])
        return

    if args.list:
        for card in cards:
            print(card['properties']['device.product.name'])
            for profile, properties in card['profiles'].items():
                if properties['available']:
                    print('  ', properties['description'])
        return

    active_card_profiles = {}
    for card_name, profile_name in args.profile:
        for card in cards:
            if card['properties']['device.product.name'] == card_name:
                for profile_id, profile in card['profiles'].items():
                    if profile['description'] == profile_name:
                        active_card_profiles[card['name']] = profile_id

    await asyncio.gather(*[
        pactl.set_profile(card_name, profile_name)
        for card_name, profile_name in active_card_profiles.items()
    ])

    await asyncio.gather(
        *[pactl.set_profile(card['name'],  'off')
          for card in cards
          if card['name'] not in active_card_profiles]
    )
    await asyncio.gather(pactl.set_sink_mute(), pactl.set_source_mute())


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--list', action='store_true')
    parser.add_argument('--list-active', action='store_true')
    parser.add_argument(
        '--profile', metavar=('PRODUCT_NAME', 'PROFILE_DESCRIPTION'),
        nargs=2, action='append')
    args = parser.parse_args()

    asyncio.run(async_main(args))


if __name__ == '__main__':
    main()
