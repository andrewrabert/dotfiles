#!/usr/bin/env python
import argparse
import contextlib
import datetime
import pathlib
import subprocess
import tempfile


DEVICE = 'epkowa'
FORMAT_SUFFIXES = {
    'jpeg': '.jpg',
    'png': '.png',
    'tiff': '.tif',
    'pnm': '.pnm',
}

# less than 400 rounded to 400
# 2400 is rounded to 1600
SUPPORTED_DPI = {400, 800, 1200, 1600}


def scan(output, output_format, dpi):
    # use a temp file to avoid a partial scan
    # if scanning is interrupted
    with _temp_path(dir=output.parent, prefix='.scan_') as tmp:
        subprocess.run(
            ['scanimage',
             '--format', output_format,
             '--device', DEVICE,
             '--scan-area', 'Maximum',
             '--resolution', str(dpi),
             '--x-resolution', str(dpi) + 'dpi',
             '--y-resolution', str(dpi) + 'dpi',
             '--progress',
             '--output', str(tmp)],
            check=True)
        tmp.rename(output)


@contextlib.contextmanager
def _temp_path(**kwargs):
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def _default_filename(suffix, description):
    now = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    parts = ['scan_', now]
    if description:
        parts.append(description)
    parts.append(suffix)
    return ''.join(parts)


def main():
    parser = argparse.ArgumentParser()
    mutex_group = parser.add_mutually_exclusive_group()
    mutex_group.add_argument('--dpi', type=int, choices=SUPPORTED_DPI,
                             default=min(SUPPORTED_DPI),
                             help='(default: %(default)s)')
    mutex_group.add_argument('--max', action='store_true',
                             help='scan at max quality')
    parser.add_argument('-f', '--format', choices=FORMAT_SUFFIXES,
                        default='png',
                        help='(default: %(default)s)')
    parser.add_argument('description', nargs='?', default='')
    args = parser.parse_args()

    output_format = args.format
    output = pathlib.Path(
        _default_filename(FORMAT_SUFFIXES[output_format], args.description))

    scan(
        output=output,
        output_format=output_format,
        dpi=max(SUPPORTED_DPI) if args.max else args.dpi,
    )


if __name__ == '__main__':
    main()
