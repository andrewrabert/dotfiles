#!/usr/bin/env python
import argparse
import contextlib
import datetime
import pathlib
import subprocess
import tempfile


DEVICE = 'epkowa'
FORMAT_SUFFIXES = {
    'jpeg': '.jpg',
    'png': '.png',
    'tiff': '.tif',
}

# more than 800 crashes
# less than 400 rounded to 400
SUPPORTED_DPI = {400, 800}


def scan(output, output_format, dpi):
    # use a temp file to avoid a partial scan
    # if scanning is interrupted
    with _temp_path(dir=output.parent, prefix='.scan_') as tmp:
        subprocess.run(
            ['scanimage',
             '--format', output_format,
             '--device', DEVICE,
             '--scan-area', 'Maximum',
             '--resolution', str(dpi),
             '--x-resolution', str(dpi),
             '--y-resolution', str(dpi),
             '--progress',
             '--output', str(tmp)],
            check=True)
        tmp.rename(output)


@contextlib.contextmanager
def _temp_path(**kwargs):
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def _default_filename(suffix):
    now = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    return f'scan_{now}.{suffix}'


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dpi', type=int, choices=SUPPORTED_DPI,
                        default=min(SUPPORTED_DPI))
    parser.add_argument('-f', '--format', choices=FORMAT_SUFFIXES,
                        default='jpeg')
    parser.add_argument('output', nargs='?', type=pathlib.Path)
    args = parser.parse_args()

    output = args.output
    if output is None:
        output_format = args.format
        output = pathlib.Path(
            _default_filename(FORMAT_SUFFIXES[output_format]))
    elif output.is_dir():
        output_format = args.format
        output = output.absolute()
        output = output / _default_filename(FORMAT_SUFFIXES[output_format])
    else:
        suffix = output.suffix.lower()
        matches = [
            key
            for key, value in FORMAT_SUFFIXES.items()
            if suffix == value
        ]
        try:
            output_format = matches[0]
        except IndexError:
            parser.error('cannot determine output format')
            parser.exit(1)

    scan(output=output, output_format=output_format, dpi=args.dpi)


if __name__ == '__main__':
    main()
