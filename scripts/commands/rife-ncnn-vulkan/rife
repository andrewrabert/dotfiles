#!/usr/bin/env python3
import argparse
import asyncio
import pathlib

DEFAULT_MODEL = 'rife-UHD'
INSTALL_PATH = pathlib.Path('/usr/share/rife-ncnn-vulkan')
MODELS = sorted(
    path.name
    for path in INSTALL_PATH.iterdir()
    if path.is_dir()
    and path.name.startswith('rife-')
)


async def rife_ncnn_vulkan(input_path, output_path, time_step=0.5):
    proc = await asyncio.create_subprocess_exec(
        '/usr/share/rife-ncnn-vulkan/rife-ncnn-vulkan',
        '-vv',
        '-m', DEFAULT_MODEL,
        '-i', input_path,
        '-o', output_path,
        '-s', str(time_step),
        '-u', # UHD mode
        '-x', # spatial tta mode
        '-z', # temporal tta mode
    )
    await proc.communicate()
    if proc.returncode:
        raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text



async def main():
    parser = argparse.ArgumentParser(description='models:\n' + '\n'.join(' ' + m for m in MODELS),
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-m', '--model', metavar='MODEL', choices=MODELS, default=DEFAULT_MODEL,
                        help='(default: %(default)s)')
    parser.add_argument('-s', '--time-step', metavar='NUM', default=0.5, type=float,
                        help='(default: %(default)s)')
    parser.add_argument('input', type=pathlib.Path)
    parser.add_argument('output', type=pathlib.Path)
    args = parser.parse_args()

    args.output.mkdir(exist_ok=True)
    await rife_ncnn_vulkan(args.input, args.output, args.time_step)


if __name__ == '__main__':
    asyncio.run(main())
