#!/usr/bin/env python3
import argparse
import asyncio
import pathlib
import shutil

DEFAULT_MODEL = "rife-v4.25-heavy"
INSTALL_PATH = pathlib.Path("/usr/share/rife-ncnn-vulkan")
MODELS = sorted(
    path.name
    for path in INSTALL_PATH.iterdir()
    if path.is_dir() and path.name.startswith("rife-")
)


async def rife_ncnn_vulkan(input_path_0, input_path_1, output_path):
    # explicit input 0 and 1 args results in an overall smoother animation
    proc = await asyncio.create_subprocess_exec(
        "/usr/share/rife-ncnn-vulkan/rife-ncnn-vulkan",
        "-m",
        DEFAULT_MODEL,
        "-0",
        input_path_0,
        "-1",
        input_path_1,
        "-o",
        output_path,
        "-u",  # UHD mode
        "-x",  # spatial tta mode
        "-z",  # temporal tta mode
        stderr=asyncio.subprocess.DEVNULL,
        stdout=asyncio.subprocess.DEVNULL,
    )
    await proc.wait()
    if proc.returncode:
        raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f"exit {proc.returncode}"
        if self.message is not None:
            text = f"{text} - {self.message}"

        try:
            args = proc._transport._extra["subprocess"].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f"{text}: {args}"
        return text


async def main():
    parser = argparse.ArgumentParser(
        description="models:\n" + "\n".join(" " + m for m in MODELS),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "-m",
        "--model",
        metavar="MODEL",
        choices=MODELS,
        default=DEFAULT_MODEL,
        help="(default: %(default)s)",
    )
    parser.add_argument(
        "-n",
        "--num-passes",
        metavar="NUM",
        type=int,
        default=1,
        help="number of interpolation passes (default: %(default)s)",
    )
    parser.add_argument("input", type=pathlib.Path)
    parser.add_argument("output", type=pathlib.Path)
    args = parser.parse_args()

    input_paths = []
    for path in args.input.iterdir():
        if not path.is_file():
            raise ValueError("cannot be nested")
        if path.suffix.lower() != ".png":
            raise ValueError("must be .png")
        input_paths.append(path)
    if len(input_paths) < 2:
        raise ValueError("must specify at least two paths")

    args.output.mkdir(exist_ok=True)

    input_paths = sorted(input_paths)

    working_paths = input_paths.copy()
    for p in range(args.num_passes):
        pass_paths = []
        for i in range(len(working_paths) - 1):
            input_path_0 = working_paths[i]
            input_path_1 = working_paths[i + 1]
            output_path = args.output / f".rife_pass{p}_{i}.png"
            await rife_ncnn_vulkan(input_path_0, input_path_1, output_path)
            pass_paths.extend([input_path_0, output_path])
        pass_paths.append(input_path_1)
        working_paths = pass_paths

    zwidth = len(str(len(working_paths)))
    for i, path in enumerate(working_paths):
        name = str(i).zfill(zwidth) + ".png"
        target = args.output / name
        if path in input_paths:
            shutil.copy(path, target)
        else:
            path.rename(target)


if __name__ == "__main__":
    asyncio.run(main())
