#!/usr/bin/env python3
import argparse
import asyncio
import math
import pathlib

import tqdm

DEFAULT_MODEL = "rife-v4.25-heavy"
INSTALL_PATH = pathlib.Path("/usr/share/rife-ncnn-vulkan")
MODELS = sorted(
    path.name
    for path in INSTALL_PATH.iterdir()
    if path.is_dir() and path.name.startswith("rife-")
)


async def rife_ncnn_vulkan(input_path, output_path, time_step=0.5):
    start_count = len(list(input_path.iterdir()))
    estimated_result_count = math.ceil(start_count / time_step)

    with tqdm.tqdm(
        total=estimated_result_count, bar_format="{percentage:.0f}% |{bar}| "
    ) as pbar:
        proc = await asyncio.create_subprocess_exec(
            "/usr/share/rife-ncnn-vulkan/rife-ncnn-vulkan",
            "-m",
            DEFAULT_MODEL,
            "-i",
            input_path,
            "-o",
            output_path,
            "-s",
            str(time_step),
            "-u",  # UHD mode
            "-x",  # spatial tta mode
            "-z",  # temporal tta mode
            stderr=asyncio.subprocess.DEVNULL,
            stdout=asyncio.subprocess.DEVNULL,
        )
        while True:
            try:
                await asyncio.wait_for(proc.wait(), 0.5)
            except TimeoutError:
                pass
            done_count = len(list(output_path.iterdir()))
            if proc.returncode is not None:
                pbar.reset(done_count)
                pbar.update(done_count)
                pbar.refresh()
                break
            else:
                pbar.reset(max(estimated_result_count, done_count))
                pbar.update(done_count)
                pbar.refresh()
        if proc.returncode:
            raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f"exit {proc.returncode}"
        if self.message is not None:
            text = f"{text} - {self.message}"

        try:
            args = proc._transport._extra["subprocess"].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f"{text}: {args}"
        return text


async def main():
    parser = argparse.ArgumentParser(
        description="models:\n" + "\n".join(" " + m for m in MODELS),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "-m",
        "--model",
        metavar="MODEL",
        choices=MODELS,
        default=DEFAULT_MODEL,
        help="(default: %(default)s)",
    )
    parser.add_argument(
        "-s",
        "--time-step",
        metavar="NUM",
        default=0.5,
        type=float,
        help="(default: %(default)s)",
    )
    parser.add_argument("input", type=pathlib.Path)
    parser.add_argument("output", type=pathlib.Path)
    args = parser.parse_args()

    args.output.mkdir(exist_ok=True)
    await rife_ncnn_vulkan(args.input, args.output, args.time_step)


if __name__ == "__main__":
    asyncio.run(main())
