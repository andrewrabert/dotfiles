#!/usr/bin/env python3
import argparse
import asyncio
import enum
import pathlib


class MagickStack(enum.StrEnum):
    HORIZONTAL = enum.auto()
    VERTICAL = enum.auto()


async def magick_stack(*sources, target, mode):
    args = ['magick', *sources]
    match mode:
        case MagickStack.HORIZONTAL:
            args.extend(['-append'])
        case MagickStack.VERTICAL:
            args.extend(['-gravity', 'center', '-append'])
        case _:
            raise ValueError
    args.append(target)
    print(args)
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.wait()
    if proc.returncode:
        raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--mode', choices=MagickStack, required=True)
    parser.add_argument('-o', '--output', type=pathlib.Path, required=True)
    parser.add_argument(
        'paths', metavar='path', type=pathlib.Path, nargs='+')
    args = parser.parse_args()

    await magick_stack(*args.paths, 
                       target=args.output, 
                       mode=args.mode)


if __name__ == '__main__':
    asyncio.run(main())
