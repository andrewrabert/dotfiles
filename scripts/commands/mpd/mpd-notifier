#!/usr/bin/env python
import argparse
import contextlib
import logging
import os
import pathlib
import subprocess
import sys
import time

import mpd

_LOGGER = logging.getLogger('mpd-notifier')

_ALBUMART_PATH = '/tmp/mpd-notifier_image'


@contextlib.contextmanager
def _mpd_client(*args, **kwargs):
    attempts = 3
    for attempt in range(1, attempts + 1):
        try:
            client = mpd.MPDClient()
            client.connect(*args, **kwargs)
            break
        except ConnectionRefusedError:
            _LOGGER.info(
                'Connection failure (attempt %d of %d)', attempt, attempts)
            if attempt == attempts:
                raise
            else:
                time.sleep(1)
    try:
        yield client
    finally:
        client.disconnect()


def tmp_art_path():
    """
    Fixes bug in Dunst where image is not updated when:
    - notification is currently show
    - track changes

    Seems to be caching the image. Tested with dunst 1.9.2
    """
    while True:
        yield _ALBUMART_PATH + '_a'
        yield _ALBUMART_PATH + '_b'


def _run(client):
    art_path_iterator = tmp_art_path()
    while True:
        status = client.status()
        client.idle()
        new_status = client.status()

        if new_status['state'] == 'stop':
            if status['state'] == 'play':
                _dunstify('[stopped]')
            continue

        if status.get('songid') == new_status.get('songid'):
            if status['state'] == new_status['state']:
                if new_status['time'].split(':')[0] != '0':
                    continue

        current = client.currentsong()
        if not current:
            continue

        # TODO cache this
        try:
            albumart = client.albumart(current['file'])
        except Exception as e:
            print(e, file=sys.stderr)
            break
        if albumart:
            art_path = next(art_path_iterator)
            with open(art_path, 'wb') as f:
                f.write(albumart['binary'])
        else:
            art_path = None

        if new_status['state'] == 'pause':
            _dunstify(
                '[paused]',
                icon=art_path)
        else:
            _dunstify(
                '<b>{}</b>\n{}'.format(
                    current['title'],
                    current['artist']),
                icon=art_path)


def _dunstify(text, icon=None):
    args = [
        'dunstify',
        'mpd',
        text,
        '--hints=int:transient:1',
        '--hints=string:x-dunst-stack-tag:mpd-notifier',
        '--appname', 'mpd-notifier',
    ]
    if icon:
        args.extend(['--icon', str(icon)])
    subprocess.run(args, check=True)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--host')
    parser.add_argument('--port', type=int, default=6600)
    args = parser.parse_args()

    mpd_host = args.host
    if mpd_host is None:
        runtime_dir = os.environ['XDG_RUNTIME_DIR']
        if runtime_dir:
            socket = pathlib.Path(runtime_dir) / 'mpd' / 'socket'
            if socket.exists():
                mpd_host = str(socket)
    if mpd_host is None:
        mpd_host = 'localhost'

    logging.basicConfig(level=logging.INFO, format='%(message)s')

    while True:
        with _mpd_client(mpd_host, args.port) as client:
            client.timeout = 5
            try:
                _run(client)
            except mpd.ConnectionError:
                pass


if __name__ == '__main__':
    main()
