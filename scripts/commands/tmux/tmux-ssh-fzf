#!/usr/bin/env python3
import asyncio
import os
import pathlib
import subprocess
import sys

CACHE_HOME = (
    pathlib.Path(os.environ["XDG_CACHE_HOME"])
    if os.environ.get("XDG_CACHE_HOME")
    else pathlib.Path.home() / ".cache"
)


class HistoryCache:
    """File-backed history with append-only writes."""

    def __init__(self, path):
        self.path = pathlib.Path(path)

    def read(self):
        """Read items from cache as list."""
        if self.path.exists():
            return self.path.read_text().splitlines()
        return []

    def add(self, item):
        """Add item to cache if not present."""
        if item not in set(self.read()):
            self.path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.path, "a") as f:
                f.write(f"{item}\n")


class fzf:
    @classmethod
    async def select(cls, items, prompt=None, allow_custom=False):
        """Run fzf with given items and return selected item."""
        args = ["fzf", "--tac"]
        if prompt:
            args.extend(["--prompt", prompt])
        if allow_custom:
            args.append("--print-query")

        proc = await asyncio.create_subprocess_exec(
            *args,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate(input="\n".join(items).encode())

        match proc.returncode:
            case 0 | 1:
                output = stdout.decode().strip().split("\n")[-1]
                return output or None
            case 130:
                return None
            case _:
                raise subprocess.CalledProcessError(
                    returncode=proc.returncode, cmd=args, output=stdout
                )


async def main():
    cache = HistoryCache(CACHE_HOME / "tmux-ssh-history")

    selected = await fzf.select(
        sorted(cache.read()),
        prompt="SSH Host: ",
        allow_custom=True,
    )
    if not selected:
        sys.exit(130)

    cache.add(selected)

    os.execvp(
        "ssh-tmux-attach", ["ssh-tmux-attach", "--current-window", selected]
    )


if __name__ == "__main__":
    asyncio.run(main())
