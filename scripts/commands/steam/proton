#!/usr/bin/env python
import argparse
import os
import pathlib
import shutil
import subprocess

PREFIX_ROOT = pathlib.Path(
    os.environ.get("PROTON_PREFIX_ROOT", "~/.local/share/proton-prefixes")
).expanduser()
DEFAULT_PREFIX = PREFIX_ROOT / "default"
STEAM_ROOT = pathlib.Path("~/.local/share/Steam").expanduser()
SYSTEM_PROTON = pathlib.Path("/usr/bin/proton-ge")


def installed_versions():
    versions = {}

    if wine_bin := shutil.which("wine"):
        versions["wine"] = [wine_bin, "wine"]

    if SYSTEM_PROTON.is_file():
        versions["system"] = [SYSTEM_PROTON, "run", "run"]

    for path in (STEAM_ROOT / "steamapps" / "common").iterdir():
        if not path.name.startswith("Proton "):
            continue
        if not path.is_dir():
            continue
        proton_bin = path / "proton"
        if proton_bin.is_file():
            version = path.name.removeprefix("Proton ").strip()

            # double run???
            versions[version] = [proton_bin, "run", "run"]

    return versions


class CasefoldUnsupported(Exception):
    """Raised when case casefolding is not supported"""


def case_insensitivty(path):
    # enable case-insensitivity (ext4)
    #
    # WARNING: overlayfs cannot be used on a filesystem with casefold enabled
    # https://bugzilla.kernel.org/show_bug.cgi?id=216471
    proc = subprocess.run(["chattr", "+F", str(path)], stderr=subprocess.PIPE)
    if proc.returncode:
        if proc.stderr.decode().startswith(
            "chattr: Operation not supported while setting flags on "
        ):
            raise CasefoldUnsupported
        else:
            raise RuntimeError(proc.returncode)


def _parser_prefix(value):
    if "/" in value:
        return pathlib.Path(value).absolute()
    else:
        return PREFIX_ROOT / value


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--versions", action="store_true")
    parser.add_argument("--winearch", choices=["win32", "win64"], default="win64")
    parser.add_argument(
        "-p", "--prefix", default=DEFAULT_PREFIX, type=_parser_prefix, nargs="?"
    )
    parser.add_argument("--use", metavar="VERSION", default="system")
    parser.add_argument("--cd", action="store_true")
    parser.add_argument("args", nargs="*")

    args = parser.parse_args()

    if args.cd:
        parser.error("cd zsh integration failure")
        parser.exit(1)

    prefix = args.prefix

    versions = installed_versions()
    if args.versions:
        for version in sorted(versions):
            print(version)
        parser.exit()

    proton_bin = versions[args.use]

    if not args.args:
        if prefix.is_dir():
            print(prefix)
            parser.exit()
        else:
            parser.error("no such prefix")
            parser.exit(1)

    if not prefix.is_dir():
        prefix.mkdir(exist_ok=True, parents=True)
        try:
            case_insensitivty(prefix)
        except CasefoldUnsupported:
            print("Casefold not supported. Ignoring")

    cmd = args.args
    if args.args[0].startswith("c:\\"):
        path = prefix / "pfx" / "drive_c"
        parts = args.args[0].removeprefix("c:\\").split("\\")
        for part in parts[:-1]:
            path = path / part
        os.chdir(path)
        cmd = [path / parts[-1], *args.args[1:]]

    os.environ.update(
        {
            "STEAMAPPS_COMMON": str(STEAM_ROOT / "steamapps" / "common"),
            "STEAM_COMPAT_CLIENT_INSTALL_PATH": str(STEAM_ROOT),
            "STEAM_COMPAT_DATA_PATH": str(prefix),
            "WINEARCH": args.winearch,
            "WINEPREFIX": str(prefix / "pfx"),
        }
    )
    os.execl(*proton_bin, *cmd)


if __name__ == "__main__":
    main()
