#!/usr/bin/env python
import argparse
import json
import os
import pathlib
import shlex
import sys

PREFIX_ROOT = pathlib.Path('~/.local/share/proton-prefixes').expanduser()
STEAM_ROOT = pathlib.Path('~/.local/share/Steam').expanduser()
SYSTEM_PROTON = pathlib.Path('/usr/bin/proton')
LINK_ROOT = pathlib.Path('~/.local/bin').expanduser()

DEFAULT_PREFIX = 'default'


def installed_versions():
    versions = {}

    if SYSTEM_PROTON.is_file():
        versions['system'] = [SYSTEM_PROTON, 'run']

    for path in (STEAM_ROOT / 'steamapps' / 'common').iterdir():
        if not path.name.startswith('Proton '):
            continue
        if not path.is_dir():
            continue
        proton_bin = path / 'proton'
        if proton_bin.is_file():
            version = path.name.removeprefix('Proton ').strip()

            # double run???
            versions[version] = [proton_bin, 'run', 'run']

    return versions


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--link', action='store_true')
    parser.add_argument('--versions', action='store_true')
    parser.add_argument('--winearch', choices=['win32', 'win64'],
                        default='win64')
    parser.add_argument('-p', '--prefix', default='default', nargs='?')
    parser.add_argument('--use', metavar='VERSION', default='system')
    parser.add_argument('args', nargs='*')

    script_path = pathlib.Path(__file__)
    if script_path.name != script_path.resolve().name:
        create_link = False
        args = parser.parse_args(json.loads(
            (PREFIX_ROOT / script_path.name / 'link_args').read_text()
        ))
    else:
        if not sys.argv[1:]:
            parser.print_help()
            parser.exit(1)

        args = parser.parse_args()
        create_link = args.link

    if args.prefix is None:
        print('\n'.join(sorted(
            path.name
            for path in PREFIX_ROOT.iterdir()
        )))
        parser.exit()

    prefix = PREFIX_ROOT / args.prefix

    versions = installed_versions()
    if args.versions:
        for version in sorted(versions):
            print(version)
        parser.exit()

    prefix = PREFIX_ROOT / args.prefix

    proton_bin = versions[args.use]

    if not args.args:
        if prefix.is_dir():
            print(prefix)
            parser.exit()
        else:
            parser.error('no such prefix')
            parser.exit(1)

    prefix.mkdir(exist_ok=True, parents=True)
    if create_link:
        """
        create two symlinks like so:
            ~/.local/bin/PREFIX -> PREFIX_ROOT/PREFIX/link -> THIS_SCRIPT

        why?
        - does not require a new PATH in PATH
        - if PREFIX_ROOT/PREFIX is deleted, the symlink becomes broken
        """
        (prefix / 'link_args').write_text(json.dumps(sys.argv[1:]))

        link_1 = prefix / 'link'
        link_2 = LINK_ROOT / args.prefix

        link_1.unlink(missing_ok=True)
        link_2.unlink(missing_ok=True)

        link_1.symlink_to(script_path.resolve())
        link_2.symlink_to(link_1)

    cmd = args.args
    if args.args[0].startswith('c:\\'):
        path = prefix / 'pfx' / 'drive_c'
        parts = args.args[0].removeprefix('c:\\').split('\\')
        for part in parts[:-1]:
            path = path / part
        os.chdir(path)
        cmd = [
            path / parts[-1],
            *args.args[1:]
        ]

    os.environ.update({
        'STEAMAPPS_COMMON': str(STEAM_ROOT / 'steamapps' / 'common'),
        'STEAM_COMPAT_CLIENT_INSTALL_PATH': str(STEAM_ROOT),
        'STEAM_COMPAT_DATA_PATH': str(PREFIX_ROOT / args.prefix),
        'WINEARCH': args.winearch,
    })
    os.execl(*proton_bin, *cmd)


if __name__ == '__main__':
    main()
