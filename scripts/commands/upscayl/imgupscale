#!/usr/bin/env python3
import argparse
import asyncio
import functools
import pathlib


class Upscayl:
    BIN = '/opt/upscayl/bin/upscayl-bin'
    MODELS = '/opt/upscayl/models'

    FORMATS = {'jpg', 'png', 'webp'}

    @classmethod
    @functools.cache
    def available_models(cls):
        models = set()
        for path in pathlib.Path(cls.MODELS).iterdir():
            models.add(path.stem)
        return sorted(models)

    @classmethod
    async def upscale(cls, source, target, *, format='png', model, output_scale=4):
        args = [
            cls.BIN,
            '-m', cls.MODELS,
            '-n', model,
            '-s', output_scale,
            '-i', source,
            '-v',
            '-f', format,
            '-o', target,
        ]
        proc = await asyncio.create_subprocess_exec(
            *args,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError


async def optimize_images(path):
    proc = await asyncio.create_subprocess_exec(
        'imgoptim',
        '--strip',
        '--',
        path,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    await proc.communicate()
    if proc.returncode != 0:
        raise RuntimeError


async def run(args):
    path = args.path.absolute()
    if args.output:
        target = args.output.absolute()
        if target.exists():
            raise ValueError(f'target exists: {target}')
        target.mkdir(parents=True)
    else:
        if path.is_dir():
            target = path.with_name(f'{path.name}_upscaled')
            while target.exists():
                target = target.with_name(f'{target.name}_')
            target.mkdir(parents=True)
        else:
            target = path.with_name(f'{path.stem}{path.suffix}')
            while target.exists():
                target = target.with_name(f'{path.stem}_{path.suffix}')

    upscayl = Upscayl()
    await upscayl.upscale(path, target, model=args.model, output_scale=args.output_scale)
    if args.format == 'jpg':
        await convert_to_jpg(target, args.jpg_quality)
        await optimize_images(target)


async def convert_to_jpg(path, quality):
    if path.is_dir():
        paths = list(path.iterdir())
    else:
        paths = [path]

    for p in paths:
        proc = await asyncio.create_subprocess_exec(
            'convert',
            p,
            '-quality', f'{quality}%',
            p.with_suffix('.jpg')
        )
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError
        p.unlink()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--model',
                        choices=Upscayl.available_models(),
                        default='realesrgan-x4plus',
                        help='(default: %(default)s)')
    parser.add_argument('-f', '--format', choices=['jpg', 'png'],
                        default='png')
    parser.add_argument('--output-scale', default=4)
    parser.add_argument('-o', '--output', type=pathlib.Path)
    parser.add_argument('--jpg-quality', type=int, default=90)
    parser.add_argument('path', type=pathlib.Path)
    args = parser.parse_args()

    asyncio.run(run(args))


if __name__ == '__main__':
    main()
