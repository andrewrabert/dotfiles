#!/usr/bin/env python3
import argparse
import asyncio
import json
import pathlib
import sys


class cdemu:

    @classmethod
    async def info(cls):
        status, devmap = await asyncio.gather(
            cls._status(),
            cls._device_mapping(ignore_missing_device=True))
        mounted = []

        for cdemu_id, paths in status.items():
            if paths:
                parents = set(
                    pathlib.Path(path).parent
                    for path in paths
                )
                if len(parents) == 1:
                    names = [
                        pathlib.Path(path).name
                        for path in paths
                    ]
                    label_names = names[0] if len(names) == 1 else str(names)
                    label = f'{label_names} ({parents.pop()})'
                else:
                    label = str(paths)
                info = {
                    'cdemu_id': cdemu_id,
                    'device': devmap[cdemu_id],
                    'ui_label': label,
                }
                mounted.append(info)
        return mounted

    @staticmethod
    async def _device_mapping(ignore_missing_device=False):
        retry = True
        while retry:
            retry = False
            proc = await asyncio.create_subprocess_exec(
                'cdemu', 'device-mapping',
                stdout=asyncio.subprocess.PIPE)
            stdout, _ = await proc.communicate()
            if proc.returncode:
                raise RuntimeError
            devmap = {}

            for line in stdout.decode().splitlines()[2:]:
                # DEV   SCSI CD-ROM     SCSI generic
                parts = (
                    line[0:6].strip(),
                    line[6:17].strip() or None,
                    line[17:].strip() or None,
                )

                cdemu_id = parts[0]
                if not cdemu_id:
                    raise RuntimeError

                device_cd = parts[1]
                # device_generic = parts[2]
                if not device_cd:
                    if ignore_missing_device:
                        continue
                    else:
                        retry = True
                        await asyncio.sleep(0.25)
                        break
                devmap[cdemu_id] = device_cd
        return devmap

    @staticmethod
    async def _status():
        proc = await asyncio.create_subprocess_exec(
            'cdemu', 'status',
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode:
            raise RuntimeError
        devmap = {}

        for line in stdout.decode().splitlines()[2:]:
            # DEV   LOADED     FILENAME
            parts = (
                line[0:6].strip() or None,
                line[6:17].strip() or None,
                line[17:].strip() or None,
            )
            if parts[0]:
                cdemu_id = parts[0]
                match parts[1]:
                    case 'True':
                        is_loaded = True
                    case 'False':
                        is_loaded = False
                    case _:
                        raise ValueError(parts)
                devmap[cdemu_id] = []
                if parts[2]:
                    if not is_loaded:
                        raise RuntimeError
                    devmap[cdemu_id].append(parts[2])
            else:
                if parts[0] or parts[1]:
                    raise RuntimeError
                if not parts[2]:
                    raise RuntimeError
                devmap[cdemu_id].append(parts[2])
        return devmap

    @classmethod
    async def _find_available_device(cls):
        status = await cls._status()
        for cdemu_id, paths in status.items():
            if not paths:
                return cdemu_id

    @classmethod
    async def load(cls, *paths):
        cdemu_id = await cls._find_available_device()
        if cdemu_id is None:
            await cls._add_device()
        cdemu_id = await cls._find_available_device()
        if cdemu_id is None:
            raise RuntimeError

        proc = await asyncio.create_subprocess_exec(
            'cdemu', 'load', cdemu_id, '--', *paths)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError

    @staticmethod
    async def _add_device():
        proc = await asyncio.create_subprocess_exec(
            'cdemu', 'add-device')
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError

    @classmethod
    async def unload(cls, cdemu_id):
        proc = await asyncio.create_subprocess_exec(
            'cdemu', 'unload', cdemu_id)

        # cdemu unload exits before the image is unloaded
        while True:
            if proc.returncode:
                raise RuntimeError
            status = await cls._status()
            if status[cdemu_id]:
                await asyncio.sleep(0.25)
            else:
                break

        await proc.communicate()
        if proc.returncode:
            raise RuntimeError


class sshfs:

    @staticmethod
    async def info():
        mounted = []
        for line in pathlib.Path('/proc/mounts').read_text().splitlines():
            device, mount_point, fs_type, *_ = line.split(maxsplit=4)
            if fs_type != 'fuse.sshfs':
                continue
            info = {
                'device': device,
                'mount_point': mount_point,
            }
            mounted.append(info)
        return mounted

    @staticmethod
    async def unmount(mount_point):
        proc = await asyncio.create_subprocess_exec(
            'fusermount3', '-quz', '--', mount_point)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError


class udiskie:

    @staticmethod
    async def info():
        columns = [
            'autoclear',
            'device_file',
            'device_id',
            'device_presentation',
            'device_size',
            'drive_label',
            'drive_model',
            'drive_vendor',
            'has_media',
            'id_label',
            'id_type',
            'id_usage',
            'id_uuid',
            'in_use',
            'is_block',
            'is_crypto',
            'is_detachable',
            'is_drive',
            'is_ejectable',
            'is_external',
            'is_filesystem',
            'is_ignored',
            'is_loop',
            'is_luks',
            'is_luks_cleartext',
            'is_mounted',
            'is_partition',
            'is_partition_table',
            'is_systeminternal',
            'is_toplevel',
            'is_unlocked',
            'loop_file',
            'mount_path',
            'mount_paths',
            'setup_by_uid',
            'should_automount',
            'symlinks',
            'ui_device_label',
            'ui_device_presentation',
            'ui_id_label',
            'ui_id_uuid',
            'ui_label',
        ]
        output_arg = '\t'.join('{' + c + '}' for c in columns)
        proc = await asyncio.create_subprocess_exec(
            'udiskie-info', '--all', '--output', output_arg,
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode:
            raise RuntimeError

        items = []
        for line in stdout.decode().splitlines():
            items.append({
                key: value
                for key, value in zip(columns, line.split('\t'))
            })
        return items

    @staticmethod
    async def unmount(device):
        proc = await asyncio.create_subprocess_exec(
            'udiskie-umount', device)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError

    @staticmethod
    async def mount(device, options='', recursive=False):
        args = []
        if options:
            args.extend(['--options', options])
        if recursive:
            args.append('--recursive')
        else:
            args.append('--no-recursive')
        proc = await asyncio.create_subprocess_exec(
            'udiskie-mount', *args, device)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError


async def fzf(data):
    proc = await asyncio.create_subprocess_exec(
        'fzf', '--black', '--prompt=', '--no-info', '--exact', '--no-sort',
        '--no-extended', '-i', '--layout=reverse', '--print-query',
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
    )
    stdin = []
    for line in data:
        stdin.append(line.encode())
    stdout, _ = await proc.communicate(b'\n'.join(stdin))
    try:
        result = stdout.decode().splitlines()[-1]
    except IndexError:
        result = None

    return result


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--json', action='store_true')
    parser.add_argument('-o', '--options', default='')
    parser.add_argument('image', type=pathlib.Path, nargs='*')
    args = parser.parse_args()

    if args.json:
        print(json.dumps(await udiskie.info(), indent=2, sort_keys=True))
        return

    match len(args.image):
        case 0:
            pass
        case 1:
            image = args.image[0]
            if image.name.lower().endswith(('.cue', '.toc')):
                await cdemu.load(image)
            else:
                await udiskie.mount(image, options=args.options)
            return
        case _:
            for image in args.image:
                if not image.name.lower().endswith('.toc'):
                    raise ValueError(
                        'all files must be .toc when specifying multiple')
            await cdemu.load(*args.image)
            return

    items = {}
    udiskie_info, cdemu_info, sshfs_info = await asyncio.gather(
        udiskie.info(),
        cdemu.info(),
        sshfs.info(),
    )
    for item in udiskie_info:
        if item['is_filesystem'] == 'True':
            key = '\t'.join([
                'mount' if item['is_mounted'] == 'False' else 'unmount',
                item['ui_label'] + ' ' + (item['mount_path'] or ''),
            ])
        elif item['is_loop'] == 'True' and item['is_toplevel'] == 'True':
            key = '\t'.join(['detach', item['ui_label']])
        else:
            continue

        if key in items:
            raise RuntimeError
        items[key] = ['udiskie', item]

    for item in cdemu_info:
        key = '\t'.join(['detach', item['device'] + ': ' + item['ui_label']])
        items[key] = ['cdemu', item]

    for item in sshfs_info:
        key = '\t'.join(['unmount', item['mount_point']])
        items[key] = ['sshfs', item]

    if not items:
        sys.exit(1)
    result = await fzf(sorted(items))
    if not result:
        sys.exit(1)

    item_type, item = items[result]
    action, _ = result.split('\t')
    if item_type == 'udiskie':
        if action == 'mount':
            await udiskie.mount(item['device_file'],
                                options=args.options)
        elif action == 'unmount':
            await udiskie.unmount(item['device_file'])
        elif action == 'detach':
            await udiskie.unmount(item['device_file'])
    elif item_type == 'sshfs':
        if action == 'unmount':
            await sshfs.unmount(item['mount_point'])
    elif item_type == 'cdemu':
        if action == 'detach':
            await cdemu.unload(item['cdemu_id'])


if __name__ == '__main__':
    asyncio.run(main())
