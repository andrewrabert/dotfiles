#!/usr/bin/env python3
import argparse
import asyncio
import contextlib
import pathlib
import tempfile


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f"exit {proc.returncode}"
        if self.message is not None:
            text = f"{text} - {self.message}"

        try:
            args = proc._transport._extra["subprocess"].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f"{text}: {args}"
        return text


async def ffmpeg_extract_slice(source, target, start, end):
    if not isinstance(start, str):
        start = _format_ffmpeg_slice_time(*start)
    if not isinstance(end, str):
        end = _format_ffmpeg_slice_time(*end)
    with TempPath(
        prefix=".ffmpeg_extract_slice", suffix=target.suffix, dir=target.parent
    ) as tmp:
        proc = await asyncio.create_subprocess_exec(
            "ffmpeg",
            "-ss",
            start,
            "-to",
            end,
            "-i",
            source,
            "-an",  # no audio
            "-vcodec",
            "ffv1",
            "-slices",
            "30",
            "-y",
            tmp,
        )
        await proc.wait()
        if proc.returncode != 0:
            raise ProcessError(proc)
        tmp.rename(target)


def _parse_ffmpeg_slice_time(value):
    hours, minutes, seconds = (int(v) for v in value.split(":"))
    if not (0 <= minutes <= 59):
        raise ValueError("minutes")
    if not (0 <= seconds <= 59):
        raise ValueError("seconds")
    if hours < 0:
        raise ValueError("hours")
    return hours, minutes, seconds


def _format_ffmpeg_slice_time(hours, minutes, seconds):
    return ":".join(f"{v:02d}" for v in (hours, minutes, seconds))


def _parser_ffmpeg_slice_end(value):
    is_offset = False
    if value.startswith(("+", "-")):
        is_offset = True
        value = value.removeprefix(("+", "-"))
        raise NotImplementedError
    return is_offset, _parse_ffmpeg_slice_time(value)


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", type=pathlib.Path, required=True)
    parser.add_argument("source", type=pathlib.Path)
    parser.add_argument("--start", type=_parse_ffmpeg_slice_time, required=True)
    parser.add_argument("--end", type=_parser_ffmpeg_slice_end, required=True)
    args = parser.parse_args()

    source = args.source
    if not source.is_file():
        raise ValueError("source does not exist")
    target = args.output
    if target.exists():
        raise ValueError("output already exists")

    start = args.start
    is_offset, end = args.end

    print(start)
    print(end)
    print(is_offset)

    await ffmpeg_extract_slice(source, target, start, end)


if __name__ == "__main__":
    asyncio.run(main())
