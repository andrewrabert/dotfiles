#!/usr/bin/env python3
import json
import os
import sys

if sys.version_info.major < 3 or sys.version_info.minor < 8:
    virtual_env = os.environ.pop('VIRTUAL_ENV')
    if virtual_env:
        virtual_env = virtual_env.rstrip('/') + '/'
        os.environ['PATH'] = os.pathsep.join(
            part
            for part in os.environ['PATH'].split(os.pathsep)
            if not part.startswith(virtual_env)
        )
        os.execvp(__file__, sys.argv)
    else:
        sys.stderr.write('error: requires at least Python 3.8 to run\n')
        sys.exit(1)

import argparse
import hashlib
import pathlib
import shlex
import shutil
import subprocess

ENV_ROOT = pathlib.Path('~/.local/share/virtualenvs').expanduser()


class _PruneAction(argparse.Action):

    def __init__(self,
                 option_strings,
                 dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS,
                 help=None):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            default=default,
            nargs=0,
            help=help)

    def __call__(self, parser, *_):
        for path in ENV_ROOT.glob('*/'):
            link = path / '.parent'
            if link.is_symlink():
                try:
                    link.resolve(strict=True)
                except FileNotFoundError:
                    shutil.rmtree(path)
        parser.exit()


def python_bin_exists(python_bin):
    try:
        subprocess.run(
            [python_bin, '--version'],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        return False
    return True


def create_virtualenv(python_bin, path):
    if shutil.which('virtualenv'):
        subprocess.run(
            ['virtualenv', '-p', str(python_bin), str(path)],
            stdout=subprocess.DEVNULL,
            check=True)
    else:
        subprocess.run(
            [str(python_bin), '-m', 'venv', str(path)],
            stdout=subprocess.DEVNULL,
            check=True)


def upgrade_virtualenv(path):
    pip = pathlib.Path(path) / 'bin/pip'
    env = {
        'PIP_USER': '0'
    }
    proc = subprocess.run(
        [pip, 'list', '--format', 'json'],
        stdout=subprocess.PIPE,
        env=env,
        check=True)
    installed = json.loads(proc.stdout.decode())

    names = [package['name'] for package in installed]

    subprocess.run(
        [pip, 'install', '--upgrade', *names],
        stdout=subprocess.DEVNULL,
        env=env,
        check=True)


ENVRC = """\
if ! [ -f "{activate_path}" ]; then
    echo "error: must reset virtualenv" >&2
    exit 1
fi

. "{activate_path}"

# prevent direnv from warning about prompt export failure
unset PS1

# export PIP_USER even though it's disabled in pip.conf.
# tox doesn't seem to respect the venv's pip.conf
export PIP_USER=0
"""


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--prune', action=_PruneAction)
    parser.add_argument('-d', '--delete', action='store_true')
    parser.add_argument('bin', nargs='?')
    args = parser.parse_args()

    if not shutil.which('direnv'):
        parser.error('direnv is not installed')
        parser.exit(1)

    os.environ.pop('VIRTUAL_ENV', None)

    python_bin = args.bin or 'python'

    if not python_bin_exists(python_bin):
        parser.error('version not available')
        parser.exit(1)

    ENV_ROOT.mkdir(parents=True, exist_ok=True)

    cwd = pathlib.Path().resolve()
    cwd_envrc = cwd.joinpath('.envrc')
    cwd_envrc.unlink(missing_ok=True)
    env_folder = ENV_ROOT / hashlib.sha256(str(cwd).encode()).hexdigest()
    try:
        shutil.rmtree(env_folder)
    except FileNotFoundError:
        pass

    if args.delete:
        parser.exit()

    create_virtualenv(python_bin, env_folder)
    upgrade_virtualenv(env_folder)

    env_folder.joinpath('.parent').symlink_to(cwd)
    activate_path = shlex.quote(str(env_folder.joinpath('bin/activate')))
    cwd_envrc.write_text(ENVRC.format(activate_path=activate_path))
    shutil.copyfile(cwd_envrc, env_folder.joinpath('.envrc'))
    env_folder.joinpath('pip.conf').write_text('[global]\nuser = false')

    for path in cwd, env_folder:
        subprocess.run(['direnv', 'allow', str(path)], check=True)
    subprocess.run(['direnv', 'reload'], check=True)


if __name__ == '__main__':
    main()
