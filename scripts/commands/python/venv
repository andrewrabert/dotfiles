#!/usr/bin/env sh
set -e

PYTHON_BIN=python
ENV_ROOT="$HOME/.local/share/virtualenvs"

show_help() {
    cat << EOF
usage: venv [--delete|--prune] [PYENV_VERSION]

simplified virtualenvs with direnv

    -d, --delete    delete the virtualenv
        --prune     prune orphan virtualenvs
        --help      show help and exit
EOF
}

PRUNE=''
DELETE=''
while true; do
    case "$1" in
        -d|--delete)
            DELETE=1
            shift
            ;;
        --prune)
            PRUNE=1
            shift
            ;;
        --help)
            show_help
            exit
            ;;
        *)
            break
    esac
done

if [ -n "$PRUNE" ] && [ -n "$DELETE" ]; then
    echo error: delete and prune many not be used together >&2
    exit 1
fi

if [ -n "$PRUNE" ]; then
    for p in "$ENV_ROOT/"*/.parent; do
        if [ -L "$p" ]; then
            if ! [ -e "$p/.envrc" ]; then
                venvdir="$(dirname "$p")"
                echo Removing venv for "$p"
                rm -rf "$venvdir"
            fi
        fi
    done
    exit
fi

if ! command -v direnv > /dev/null; then
    echo error: requires direnv >&2
    exit 1
fi

parent="$(pwd)"

env_folder="$ENV_ROOT/$(printf "%s" "$parent" | sha256sum | awk '{print $1}')"

rm -rf "$env_folder" .envrc
pipenv --rm > /dev/null 2>&1 || true
unset VIRTUAL_ENV

if [ -n "$DELETE" ]; then
    exit
elif [ -n "$1" ]; then
    version="$1"
    found="$(pyenv versions --bare | grep '[0-9].[0-9]\+.[0-9]\+' | sort -r --version-sort | grep "^$version" | head -n 1)"
    if [ -n "$found" ]; then
        version="$found"
    fi
    echo "Using '$version' from pyenv"
    if [ -z "$PYENV_ROOT" ]; then
        echo error: unable to determine pyenv location
        exit 1
    fi
    PYTHON_BIN="$PYENV_ROOT/shims/python"
    eval "$(pyenv sh-shell "$version")"
fi

mkdir -p "$ENV_ROOT"

if [ -e Pipfile ]; then
    pipenv --rm > /dev/null 2>&1 || true
    pipenv install
    env_folder=$(pipenv --venv)
elif command -v virtualenv > /dev/null 2>&1; then
    virtualenv -q -p "$PYTHON_BIN" "$env_folder" > /dev/null
else
    "$PYTHON_BIN" -m venv "$env_folder"
fi

ln -s "$parent" "$env_folder/.parent"

cat > "$env_folder/.envrc" << EOF
. "$env_folder/bin/activate"
# export PIP_USER even though it's disabled in pip.conf
# tox doesn't seem to respect the venv's pip.conf
export PIP_USER=0
EOF

cat > "$env_folder/pip.conf"<<EOF
[global]
user = false
EOF

cp "$env_folder/.envrc" .
"$env_folder/bin/pip" install -q --upgrade pip setuptools wheel

direnv allow "$env_folder"
direnv allow
direnv reload
