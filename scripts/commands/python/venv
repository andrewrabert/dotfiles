#!/usr/bin/env python3
import json
import os
import sys

if sys.version_info.major < 3 or sys.version_info.minor < 8:
    virtual_env = os.environ.pop("VIRTUAL_ENV")
    if virtual_env:
        virtual_env = virtual_env.rstrip("/") + "/"
        os.environ["PATH"] = os.pathsep.join(
            part
            for part in os.environ["PATH"].split(os.pathsep)
            if not part.startswith(virtual_env)
        )
        os.execvp(__file__, sys.argv)
    else:
        sys.stderr.write("error: requires at least Python 3.8 to run\n")
        sys.exit(1)

import argparse
import hashlib
import pathlib
import shlex
import shutil
import subprocess

ENV_ROOT = pathlib.Path("~/.local/share/virtualenvs").expanduser()


class _PruneAction(argparse.Action):
    def __init__(
        self,
        option_strings,
        dest=argparse.SUPPRESS,
        default=argparse.SUPPRESS,
        help=None,
    ):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            default=default,
            nargs=0,
            help=help,
        )

    def __call__(self, parser, *_):
        for path in ENV_ROOT.glob("*/"):
            link = path / ".parent"
            if link.is_symlink():
                try:
                    link.resolve(strict=True)
                except FileNotFoundError:
                    shutil.rmtree(path)
        parser.exit()


def _pyenv_versions(version):
    # prefer pyenv's latest over system's
    pyenv_root = os.environ.get("PYENV_ROOT")
    if not pyenv_root:
        return

    pyenv_root = pathlib.Path(pyenv_root) / "versions"
    if not pyenv_root.is_dir():
        return

    versions = []
    for path in pyenv_root.iterdir():
        if not path.is_dir():
            continue
        name = path.name
        if not name.startswith(version):
            continue
        if name.endswith("-dev"):
            continue
        if "b" in name:
            continue
        major, minor, patch = (int(i) for i in name.split("."))
        versions.append((major, minor, patch))

    if versions:
        latest = sorted(versions)[-1]
        return pyenv_root / ".".join(str(v) for v in latest) / "bin" / "python"


def _python_bin(python_bin):
    path = pathlib.Path(python_bin)
    if path.is_file():
        return str(python_bin)

    pyenv_version = _pyenv_versions(python_bin)
    if pyenv_version:
        return pyenv_version
    try:
        subprocess.run(
            [python_bin, "--version"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
    except FileNotFoundError:
        raise argparse.ArgumentTypeError(f"command not found: {python_bin}")
    return python_bin


def create_virtualenv(python_bin, path):
    if shutil.which("virtualenv"):
        subprocess.run(["virtualenv", "-p", str(python_bin), str(path)], check=True)
    else:
        subprocess.run([str(python_bin), "-m", "venv", str(path)], check=True)


def upgrade_virtualenv(path):
    pip = pathlib.Path(path) / "bin/pip"
    env = {"PIP_USER": "0"}
    proc = subprocess.run(
        [pip, "--disable-pip-version-check", "list", "--format", "json"],
        stdout=subprocess.PIPE,
        env=env,
        check=True,
    )
    installed = json.loads(proc.stdout.decode())

    names = [package["name"] for package in installed]

    subprocess.run(
        [pip, "--disable-pip-version-check", "install", "--upgrade", *names],
        stdout=subprocess.DEVNULL,
        env=env,
        check=True,
    )


ENVRC = """\
if ! [ -f "{activate_path}" ]; then
    echo "error: must reset virtualenv" >&2
    exit 1
fi

. "{activate_path}"

# prevent direnv from warning about prompt export failure
unset PS1

# export PIP_USER even though it's disabled in pip.conf.
# tox doesn't seem to respect the venv's pip.conf
export PIP_USER=0

# zsh-only. fixes virtualenv in PATH not taking precedence
command -v rehash >/dev/null && rehash
"""


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--prune", action=_PruneAction)
    parser.add_argument("-d", "--delete", action="store_true")
    parser.add_argument("-e", "--env", type=pathlib.Path)
    parser.add_argument("-p", "--python", type=_python_bin, default="python3")
    args = parser.parse_args()

    if not shutil.which("direnv"):
        parser.error("direnv is not installed")
        parser.exit(1)

    os.environ.pop("VIRTUAL_ENV", None)

    cwd = pathlib.Path().resolve()
    cwd_envrc = cwd.joinpath(".envrc")
    cwd_envrc.unlink(missing_ok=True)

    if args.env:
        env_folder = args.env
    else:
        ENV_ROOT.mkdir(parents=True, exist_ok=True)
        env_folder = (
            ENV_ROOT / hashlib.sha256(f"{cwd}{args.python}".encode()).hexdigest()
        )

    if not args.env or args.delete:
        try:
            shutil.rmtree(env_folder)
        except FileNotFoundError:
            pass

    if args.delete:
        parser.exit()

    if not env_folder.exists():
        create_virtualenv(args.python, env_folder)
        upgrade_virtualenv(env_folder)

    if not args.env:
        env_folder.joinpath(".parent").symlink_to(cwd)
    activate_path = shlex.quote(str(env_folder.joinpath("bin/activate")))
    cwd_envrc.write_text(ENVRC.format(activate_path=activate_path))
    shutil.copyfile(cwd_envrc, env_folder.joinpath(".envrc"))
    env_folder.joinpath("pip.conf").write_text("[global]\nuser = false")

    for path in cwd, env_folder:
        subprocess.run(["direnv", "allow", str(path)], check=True)
    subprocess.run(["direnv", "reload"], check=True)


if __name__ == "__main__":
    main()
