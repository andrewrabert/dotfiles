#!/usr/bin/env python3
import sys

if sys.version_info.major < 3 or sys.version_info.minor < 8:
    sys.stderr.write('error: requires at least Python 3.8 to run\n')
    sys.exit(1)

import argparse
import hashlib
import os
import pathlib
import shlex
import shutil
import subprocess

import pkg_resources

ENV_ROOT = pathlib.Path('~/.local/share/virtualenvs').expanduser()


class _PruneAction(argparse.Action):

    def __init__(self,
                 option_strings,
                 dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS,
                 help=None):
        super().__init__(
            option_strings=option_strings,
            dest=dest,
            default=default,
            nargs=0,
            help=help)

    def __call__(self, parser, *_):
        for path in ENV_ROOT.glob('*/'):
            link = path / '.parent'
            if link.is_symlink():
                try:
                    link.resolve(strict=True)
                except FileNotFoundError:
                    shutil.rmtree(path)
        parser.exit()


def python_bin_exists(python_bin):
    try:
        subprocess.run(
            [python_bin, '--version'],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        return False
    return True


def pyenv_versions():
    proc = subprocess.run(
        ['pyenv', 'versions', '--bare'],
        stdout=subprocess.PIPE,
        check=True)
    return sorted(
        (version.strip() for version in proc.stdout.decode().split()),
        key=lambda v: pkg_resources.parse_version(v),
        reverse=True
    )


def create_virtualenv(python_bin, path):
    if shutil.which('virtualenv'):
        subprocess.run(
            ['virtualenv', '-p', str(python_bin), str(path)],
            stdout=subprocess.DEVNULL,
            check=True)
    else:
        subprocess.run(
            [str(python_bin), '-m', 'venv', str(path)],
            stdout=subprocess.DEVNULL,
            check=True)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--prune', action=_PruneAction)
    parser.add_argument('-d', '--delete', action='store_true')
    parser.add_argument('-l', '--list', action='store_true')
    parser.add_argument('version', nargs='?')
    args = parser.parse_args()

    if not shutil.which('direnv'):
        parser.error('direnv is not installed')
        parser.exit(1)

    os.environ.pop('PYENV_VERSION', None)
    os.environ.pop('VIRTUAL_ENV', None)

    if args.list:
        # TODO: include non-pyenv versions
        for version in sorted(pyenv_versions()):
            print(version)
        parser.exit()
    elif args.version:
        try:
            pyenv_root = pathlib.Path(os.environ['PYENV_ROOT'])
        except KeyError:
            parser.error('pyenv not available')
            parser.exit(1)
        for pyenv_version in pyenv_versions():
            if pyenv_version.startswith(args.version):
                python_bin = pyenv_root / 'shims' / 'python'
                os.environ['PYENV_VERSION'] = pyenv_version
                break
        else:
            python_bin = f'python{args.version}'
    else:
        python_bin = 'python'

    if not python_bin_exists(python_bin):
        parser.error('version not available')
        parser.exit(1)

    ENV_ROOT.mkdir(parents=True, exist_ok=True)

    cwd = pathlib.Path().resolve()
    cwd_envrc = cwd.joinpath('.envrc')
    cwd_envrc.unlink(missing_ok=True)
    env_folder = ENV_ROOT / hashlib.sha256(str(cwd).encode()).hexdigest()
    try:
        shutil.rmtree(env_folder)
    except FileNotFoundError:
        pass

    if args.delete:
        parser.exit()

    create_virtualenv(python_bin, env_folder)

    env_folder.joinpath('.parent').symlink_to(cwd)
    activate_path = env_folder.joinpath('bin/activate')
    cwd_envrc.write_text('\n'.join([
        f'. {shlex.quote(str(activate_path))}',
        "# export PIP_USER even though it's disabled in pip.conf",
        "# tox doesn't seem to respect the venv's pip.conf",
        "export PIP_USER=0\n"
    ]))
    shutil.copyfile(cwd_envrc, env_folder.joinpath('.envrc'))
    env_folder.joinpath('pip.conf').write_text('[global]\nuser = false')

    for path in cwd, env_folder:
        subprocess.run(['direnv', 'allow', str(path)], check=True)
    subprocess.run(['direnv', 'reload'], check=True)


if __name__ == '__main__':
    main()
