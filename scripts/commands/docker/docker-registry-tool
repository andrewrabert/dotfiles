#!/usr/bin/env python3
import argparse
import json
import re
import sys
import urllib.error
import urllib.parse
import urllib.request


def parse_links(header):
    links = {}

    for val in re.split(r",(?=\s*<)", header):
        url, params = re.match(r"\s*<(.*)>(.*)", val).groups()
        params = params.split(";")[1:]

        rel = None
        for param in params:
            key, _, value, _ = re.match(
                r"^\s*(\S*)\s*=\s*(['\"]?)(.*?)(\2)\s*$",
                param, re.M
            ).groups()

            if key == 'rel':
                if rel is None:
                    rel = value
                else:
                    raise NotImplementedError

        if rel in links:
            raise NotImplementedError

        links[rel] = url

    return links


class DockerRegistry:

    def __init__(self, url):
        self.url = url

    def get_tags(self, image_path):
        accept_header = 'application/vnd.docker.distribution.manifest.v2+json'
        status_code, _, body = self.request(
            'GET',
            f'/v2/{image_path}/tags/list',
            headers={'Accept': accept_header}
        )
        try:
            tags = json.loads(body)['tags']
        except KeyError:
            raise DockerNotFound

        if tags is None:
            raise DockerNotFound
        return tags

    def get_repositories(self):
        repos = set()
        path = '/v2/_catalog'

        while path:
            _, headers, body = self.request('GET', path)
            for repo in json.loads(body)['repositories']:
                repos.add(repo)
            try:
                path = parse_links(headers['Link'])['next']
            except KeyError:
                path = None
        return repos

    def get_tag_manifest(self, image_path, tag):
        accept_header = 'application/vnd.docker.distribution.manifest.v2+json'
        _, headers, _ = self.request(
            'HEAD',
            f'/v2/{image_path}/manifests/{tag}',
            headers={'Accept': accept_header}
        )
        return headers['etag'].replace('"', '')

    def delete_manifest(self, image_path, manifest):
        self.request(
            'DELETE',
            f'/v2/{image_path}/manifests/{manifest}'
        )

    def request(self, method, path, data=None, headers={}, timeout=30):
        url = urllib.parse.urlunsplit(
            urllib.parse.urlsplit(self.url)._replace(path=path)
        )
        r = urllib.request.Request(
            url, data=data, headers=headers, method=method)
        try:
            response = urllib.request.urlopen(r, timeout=timeout)
        except urllib.error.HTTPError as error:
            response = error.fp
        return response.getcode(), dict(response.headers), response.read()


class DockerNotFound(Exception):
    """The Docker object was not found"""


def split_tag(image):
    vals = image.split(':')
    if len(vals) == 1:
        image_path = vals[0]
        tag = 'latest'
    elif len(vals) == 2:
        image_path = vals[0]
        tag = vals[1]
    else:
        raise ValueError('invalid image')
    return image_path, tag


def main():
    parser = argparse.ArgumentParser()
    parser.set_defaults(mode=None)

    sp = parser.add_subparsers()

    sp_repos = sp.add_parser('repos')
    sp_repos.set_defaults(mode='repos')

    sp_tags = sp.add_parser('tags')
    sp_tags.set_defaults(mode='tags')
    sp_tags.add_argument('path', help='image path')

    sp_delete = sp.add_parser('delete')
    sp_delete.set_defaults(mode='delete')
    sp_delete.add_argument('image', help='image with tag')

    parser.add_argument(
        '--url', help='Docker registry URL', required=True
    )
    args = parser.parse_args()

    api = DockerRegistry(args.url)

    try:
        if args.mode == 'repos':
            print('\n'.join(sorted(api.get_repositories())))
        elif args.mode == 'tags':
            tags = api.get_tags(args.path)
            versions = [
                t
                for t in tags
            ]
            print('\n'.join(
                sorted(
                    [str(v) for v in versions]
                )
            ))

        elif args.mode == 'delete':
            image_path, tag = split_tag(args.image)
            manifest = api.get_tag_manifest(image_path, tag)
            api.delete_manifest(image_path, manifest)
    except DockerNotFound:
        print('error: object not found', file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
