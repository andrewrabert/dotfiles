#!/usr/bin/env python3
import argparse
import asyncio
import importlib.machinery
import tempfile
import json
import os
import pathlib
import shutil
import time

DBUS_SESSION_BUS_ADDRESS = os.environ["DBUS_SESSION_BUS_ADDRESS"]
XDG_RUNTIME_DIR = pathlib.Path(os.environ["XDG_RUNTIME_DIR"])


class cdemu_proxy:
    def __init__(self):
        cdemu_cli = importlib.machinery.SourceFileLoader(
            "cdemu", shutil.which("cdemu")
        ).load_module()
        self.proxy = cdemu_cli.CDEmuDaemonProxy("session")
        self.device = 0

    async def status(self):
        is_loaded, filenames = self.proxy.DeviceGetStatus(self.device)
        dev_sr, dev_sg = self.proxy.DeviceGetMapping(self.device)
        return {
            "dev_sr": dev_sr,
            "dev_sg": dev_sg,
            "filenames": filenames,
        }

    async def wait_for_device_ready(self):
        while True:
            dev_sr, _ = self.proxy.DeviceGetMapping(self.device)
            if dev_sr:
                break
            else:
                await asyncio.sleep(0.25)

    async def wait_for_device_loaded(self):
        while True:
            is_loaded, _ = self.proxy.DeviceGetStatus(self.device)
            if is_loaded:
                break
            else:
                await asyncio.sleep(0.25)

    async def load(self, *paths):
        paths = [str(pathlib.Path(p).absolute()) for p in paths]
        self.proxy.DeviceLoad(self.device, paths, {})


async def systemd_run_load(*files):
    name = f"cdemu-tool@{str(time.time_ns())}"
    proc = await asyncio.create_subprocess_exec(
        "systemd-run",
        "--user",
        "--collect",
        "--quiet",
        f"--property=RuntimeDirectory=cdemu-tool/{name}",
        f"--unit={name}",
        f"--setenv=CDEMU_TOOL_NAME={name}",
        "--",
        "dbus-run-session",
        "cdemu-tool",
        "systemd-load",
        *files,
    )
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError
    return name


def safe_write(path, data):
    path = pathlib.Path(path)
    if isinstance(data, str):
        data = data.encode()
    with tempfile.NamedTemporaryFile(delete=False, dir=path.parent) as handle:
        temp_path = pathlib.Path(handle.name)
        try:
            temp_path.write_bytes(data)
            temp_path.rename(path)
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


async def systemd_stop(name):
    proc = await asyncio.create_subprocess_exec(
        "systemctl", "--user", "stop", f"{name}.service"
    )
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError


def get_devices():
    parent = XDG_RUNTIME_DIR / "cdemu-tool"
    devices = []
    try:
        for parent in parent.iterdir():
            path = parent / "info.json"
            info = json.loads(path.read_text())
            devices.append(info)
        return devices
    except FileNotFoundError:
        return []


def pretty_json(data):
    return json.dumps(data, indent=2, sort_keys=True, ensure_ascii=False)


class _Parser:
    @staticmethod
    async def status(args):
        devices = get_devices()
        if args.json:
            print(pretty_json(devices))
        else:
            data = {}
            for device in devices:
                dev = device["dev_sr"]
                if dev in data:
                    raise RuntimeError
                data[dev] = device["filenames"]
            for dev in sorted(data):
                print(dev)
                for filename in data[dev]:
                    print(" ", filename)

    @staticmethod
    async def load(args):
        files = [path.absolute() for path in args.file]
        name = await systemd_run_load(*files)
        while True:
            for device in get_devices():
                if device["name"] == name:
                    print(pretty_json(device))
                    return
            await asyncio.sleep(0.25)

    @staticmethod
    async def remove(args):
        devices = get_devices()
        for device in devices:
            if device["dev_sr"] == args.device:
                await systemd_stop(device["name"])
                return
        raise KeyError("device not found")

    @staticmethod
    async def systemd_load(args):
        proc = await asyncio.create_subprocess_exec("cdemu-daemon")
        cdemu = cdemu_proxy()
        await cdemu.wait_for_device_ready()
        await cdemu.load(*args.file)
        await cdemu.wait_for_device_loaded()
        status = await cdemu.status()

        name = os.environ["CDEMU_TOOL_NAME"]
        info = {
            "name": name,
            "filenames": [str(path) for path in args.file],
            "dbus_session_bus_address": DBUS_SESSION_BUS_ADDRESS,
            "dev_sr": status["dev_sr"],
            "dev_sg": status["dev_sg"],
        }
        runtime_directory = pathlib.Path(os.environ["RUNTIME_DIRECTORY"])
        safe_write((runtime_directory / "info.json"), json.dumps(info))

        await proc.communicate()


async def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command", metavar="COMMAND", required=True)

    load_parser = subparsers.add_parser("load", help="")
    load_parser.set_defaults(func=_Parser.load)
    load_parser.add_argument("file", type=pathlib.Path, nargs="+")

    remove_parser = subparsers.add_parser("remove", help="")
    remove_parser.set_defaults(func=_Parser.remove)
    remove_parser.add_argument("device")

    status_parser = subparsers.add_parser("status", help="")
    status_parser.set_defaults(func=_Parser.status)
    status_parser.add_argument("--json", action="store_true")

    systemd_load_parser = subparsers.add_parser("systemd-load", help="")
    systemd_load_parser.set_defaults(func=_Parser.systemd_load)
    systemd_load_parser.add_argument("file", type=pathlib.Path, nargs="+")

    args = parser.parse_args()

    await args.func(args)


if __name__ == "__main__":
    asyncio.run(main())
