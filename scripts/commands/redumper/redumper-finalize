#!/usr/bin/env python3
import argparse
import asyncio
import pathlib
import re


def _parser_path(value):
    path = pathlib.Path(value).absolute()
    if not path.exists():
        raise ValueError('path not found')

    if path.is_file():
        if path.suffix() == '.log':
            return path
        else:
            raise ValueError('file paths must point to the dump log')
    elif path.is_dir():
        log_files = [
            p
            for p in path.iterdir()
            if p.suffix == ('.log')
        ]
        match len(log_files):
            case 0:
                raise ValueError('directory does not contain dump log')
            case 1:
                return log_files[0]
            case 2:
                raise ValueError('multiple log files found')
    else:
        raise RuntimeError


def _parser_default_optical_device():
    pattern = re.compile(r'^sr\d+$')
    devices = []
    for path in pathlib.Path('/dev/').iterdir():
        if not path.name.startswith('sr'):
            continue
        if pattern.match(path.name):
            devices.append(path)
    if len(devices) == 1:
        return devices[0]


def get_dump_profile(log_path):
    for line in log_path.read_text().splitlines():
        if line.startswith('current profile: '):
            return line.removeprefix('current profile: ').strip()
    raise RuntimeError('cannot determine dump profile')


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--device', default=_parser_default_optical_device)
    parser.add_argument('path', type=_parser_path, nargs='+')
    args = parser.parse_args()

    for path in args.path:
        try:
            image_name = path.stem
            cwd = path.parent

            profile = get_dump_profile(path)

            match profile:
                case 'CD-ROM':
                    proc = await asyncio.create_subprocess_exec(
                        'redumper',
                        'protection', 'split', 'hash', 'info', 'skeleton',
                        '--image-name', image_name,
                        cwd=cwd,
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE,
                    )
                    await proc.communicate()
                    if proc.returncode != 0:
                        raise RuntimeError
                case 'DVD-ROM':
                    proc = await asyncio.create_subprocess_exec(
                        'redumper',
                        'dvdkey', 'hash', 'info', 'skeleton',
                        '--image-name', image_name,
                        cwd=cwd,
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE,
                    )
                    await proc.communicate()
                    if proc.returncode != 0:
                        raise RuntimeError
                case _:
                    raise RuntimeError(f'profile not implemented: {profile}')
        except Exception:
            print(f'⚠️ ERROR: {path}')
        else:
            print(f'✅ Success: {path}')


if __name__ == '__main__':
    asyncio.run(main())
