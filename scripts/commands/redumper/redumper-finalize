#!/usr/bin/env python3
import argparse
import asyncio
import pathlib

import async_executor


def get_dump_profile(log_path):
    for line in log_path.read_text().splitlines():
        if line.startswith("current profile: "):
            return line.removeprefix("current profile: ").strip()
    raise RuntimeError("cannot determine dump profile")


async def process_path(path):
    image_name = path.stem
    cwd = path.parent

    profile = get_dump_profile(path)

    if profile.startswith("CD-"):
        proc = await asyncio.create_subprocess_exec(
            "redumper",
            "protection",
            "split",
            "hash",
            "info",
            "skeleton",
            "--image-name",
            image_name,
            cwd=cwd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError
    elif profile.startswith(("DVD-", "BD-", "HD ")):
        proc = await asyncio.create_subprocess_exec(
            "redumper",
            "hash",
            "info",
            "skeleton",
            "--image-name",
            image_name,
            cwd=cwd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )
        await proc.communicate()
        if proc.returncode != 0:
            raise RuntimeError
    else:
        raise RuntimeError(f"profile not implemented: {profile}")


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", dest="num_procs", type=int, default=1)
    parser.add_argument("path", type=pathlib.Path, nargs="+")
    args = parser.parse_args()

    paths = set()
    for path in args.path:
        if not path.is_dir():
            raise ValueError("path must be directory")
        stack = [path]
        while stack:
            log_paths = []
            scram_paths = []
            needs_finalization = True
            parent = stack.pop()
            for p in parent.iterdir():
                if p.is_dir():
                    stack.append(p)
                else:
                    match p.suffix:
                        case ".log":
                            log_paths.append(p)
                        case ".scram":
                            scram_paths.append(p)
                        case ".bin":
                            needs_finalization = False
                        case ".iso":
                            needs_finalization = False
                        case ".hash":
                            needs_finalization = False
                        case ".skeleton":
                            needs_finalization = False
            if needs_finalization and (len(log_paths) == len(scram_paths) == 1):
                paths.add(log_paths[0])

    executor = async_executor.AsyncExecutor(args.num_procs)
    tasks = {}
    for path in paths:
        task = executor.submit(process_path, path)
        tasks[task] = path

    async for task in executor:
        path = tasks[task]
        try:
            task.result()
        except Exception:
            print(f"⚠️ ERROR: {path}")
        else:
            print(f"✅ Success: {path}")


if __name__ == "__main__":
    asyncio.run(main())
