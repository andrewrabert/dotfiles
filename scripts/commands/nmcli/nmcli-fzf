#!/usr/bin/env python3
import asyncio


async def fzf(data, max_selected=None):
    line_map = {}
    lines = []
    for i, line in enumerate(data):
        if isinstance(data, dict):
            text = line
            value = data[line]
        elif isinstance(line, (list, tuple)):
            if len(line) != 2:
                raise ValueError
            text = line[0]
            value = line[1]
        else:
            text = line
            value = line
        line_map[i] = value
        lines.append(f'{i}:{text}')

    proc = await asyncio.create_subprocess_exec(
        'fzf', '--ansi', '--black', '--prompt=', '--no-info',
        '--exact', '--no-sort',
        '--no-extended', '-i', '--layout=reverse', '--print-query',
        '--with-nth', '2..', '--delimiter=:',
        f'--multi={max_selected or 0}',
        stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate('\n'.join(lines).encode())
    if proc.returncode not in (0, 1, 130):
        raise RuntimeError(proc.returncode)

    results = []
    # ignore typed query
    for line in stdout.decode().splitlines()[1:]:
        key = int(line.split(':', maxsplit=1)[0])
        results.append(line_map[key])
    return results


class nmcli:
    @staticmethod
    async def get_connections():
        proc = await asyncio.create_subprocess_exec(
            'nmcli',
            '--terse',
            '--mode', 'multiline',
            'connection',
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode:
            raise RuntimeError

        connections = []
        connection = None
        for line in stdout.decode().splitlines():
            parts = line.split(':', maxsplit=1)
            if len(parts) == 1:
                key = parts[0]
                value = None
            else:
                key, value = parts
            if key == 'NAME':
                if connection:
                    connections.append(connection)
                connection = {}
            connection[key] = value
        if connection:
            connections.append(connection)
        return connections

    @staticmethod
    async def up(name):
        proc = await asyncio.create_subprocess_exec(
            'nmcli', 'connection', 'up', name)
        await proc.wait()
        if proc.returncode:
            raise RuntimeError

    @staticmethod
    async def down(name):
        proc = await asyncio.create_subprocess_exec(
            'nmcli', 'connection', 'down', name)
        await proc.wait()
        if proc.returncode:
            raise RuntimeError


async def main():
    lines = []
    for conn in await nmcli.get_connections():
        if conn['TYPE'] in ('bridge', 'loopback', 'tun'):
            continue

        text = ' '.join([
            '*' if conn['DEVICE'] else ' ',
            conn['TYPE'],
            conn['NAME']
        ])
        lines.append((text, conn))
    lines = sorted(
        lines, key=lambda x: (x[1]['TYPE'], x[1]['NAME'], x[1]['UUID']))

    for conn in await fzf(lines):
        if conn['DEVICE']:
            print('Down', conn['NAME'])
            await nmcli.down(conn['UUID'])
        else:
            print('Up', conn['NAME'])
            await nmcli.up(conn['UUID'])


if __name__ == '__main__':
    asyncio.run(main())
