#!/usr/bin/env python3
import argparse
import contextlib
import json
import pathlib
import shlex
import shutil
import subprocess
import sys
import tempfile


DEFAULT_LANGUAGES = {'eng', 'und'}


def mkv_info(path):
    proc = subprocess.run(
        ['mkvmerge', '-J', path],
        stdout=subprocess.PIPE,
        check=True)
    return json.loads(proc.stdout)


class MKVFile:
    def __init__(self, path):
        self.path = path
        self.metadata = mkv_info(path)

    @property
    def languages(self):
        return {
            track['properties']['language']
            for track in self.metadata['tracks']
        }

    def matching_audio_tracks(self, languages):
        return [
            track['id']
            for track in self.metadata['tracks']
            if track['type'] == 'audio'
            and track['properties']['language'] in languages
        ]

    def matching_subtitle_tracks(self, languages):
        return [
            track['id']
            for track in self.metadata['tracks']
            if track['type'] == 'subtitles'
            and track['properties']['language'] in languages
        ]

    @staticmethod
    def excluded_track_string(track_type, tracks):
        track_command = []
        if tracks:
            track_command += [
                f'--{track_type}-tracks',
                '!' + ','.join(str(track) for track in tracks)
            ]
        return track_command

    def build_mkvmerge_command(self, target, audio=[], subtitle=[]):
        return [
            'mkvmerge', '-o', target,
            *self.excluded_track_string('audio', audio),
            *self.excluded_track_string('subtitle', subtitle),
            self.path
        ]

    def remove_tracks(self, target, audio=[], subtitle=[]):
        target.parent.mkdir(parents=True, exist_ok=True)
        if target.exists():
            print(f'error: already exists "{target}"', file=sys.stderr)
            sys.exit(1)

        with TempPath(dir=target.parent) as temp:
            subprocess.run(
                self.build_mkvmerge_command(temp, audio, subtitle),
                stdout=subprocess.DEVNULL,
                check=True
            )
            temp.rename(target)


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object
    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.
    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                if temp_path.is_file():
                    temp_path.unlink()
                else:
                    shutil.rmtree(temp_path)
            except FileNotFoundError:
                pass


def mkv_files(root):
    files = []
    if root.is_file():
        files.append(root)
    else:
        stack = [root]
        while stack:
            for path in stack.pop().iterdir():
                if path.is_file():
                    files.append(path)
                elif path.is_dir():
                    stack.append(path)
    return sorted(
        f
        for f in files
        if f.suffix.lower() == '.mkv'
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input', type=pathlib.Path, nargs='?')
    parser.add_argument('output', type=pathlib.Path, nargs='?')
    parser.add_argument(
        '-k',
        '--keep',
        action='append',
        help='Language to keep',
    )
    parser.add_argument(
        '-i',
        '--info',
        action='store_true',
        help='Show track language information'
    )
    parser.add_argument(
        '-d',
        '--dryrun',
        action='store_true'
    )
    args = parser.parse_args()

    files = []
    if args.input.is_dir():
        files.extend([
            path.relative_to(args.input)
            for path in mkv_files(args.input)
        ])
    else:
        files.append(args.input)

    if args.info:
        for path in files:
            mkv = MKVFile(path)
            print(path, mkv.languages)
    else:
        if args.output.exists() and args.output.is_file():
            raise RuntimeError
        args.output.mkdir(exist_ok=True, parents=True)

        valid_languages = set(args.keep) if args.keep else DEFAULT_LANGUAGES
        if 'und' in valid_languages:
            valid_languages.add(None)

        for path in files:
            print(path)
            mkv = MKVFile(path)
            invalid_languages = mkv.languages - valid_languages
            target = args.output / path.name
            audio = mkv.matching_audio_tracks(invalid_languages)
            subtitle = mkv.matching_subtitle_tracks(invalid_languages)

            if args.dryrun:
                parts = mkv.build_mkvmerge_command(
                    target, audio=audio, subtitle=subtitle
                )
                print(' '.join(shlex.quote(str(part)) for part in parts))
            else:
                mkv.remove_tracks(target, audio=audio, subtitle=subtitle)


if __name__ == '__main__':
    main()
