#!/usr/bin/env python3
import argparse
import contextlib
import json
import pathlib
import shutil
import subprocess
import tempfile

import tqdm

DEFAULT_LANGUAGES = {
    "eng",  # english
    "und",  # undefined / not-set
    "zxx",  # non-linguistic (eg. instrumental)
}


def mkv_info(path):
    proc = subprocess.run(["mkvmerge", "-J", path], stdout=subprocess.PIPE, check=True)
    return json.loads(proc.stdout)


class MKVFile:
    def __init__(self, path):
        self.path = path
        self.metadata = mkv_info(path)

    @property
    def languages(self):
        return {track["properties"]["language"] for track in self.metadata["tracks"]}

    def matching_audio_tracks(self, languages):
        return [
            track["id"]
            for track in self.metadata["tracks"]
            if track["type"] == "audio" and track["properties"]["language"] in languages
        ]

    def matching_subtitle_tracks(self, languages):
        return [
            track["id"]
            for track in self.metadata["tracks"]
            if track["type"] == "subtitles"
            and track["properties"]["language"] in languages
        ]

    @staticmethod
    def excluded_track_string(track_type, tracks):
        track_command = []
        if tracks:
            track_command += [
                f"--{track_type}-tracks",
                "!" + ",".join(str(track) for track in tracks),
            ]
        return track_command

    def remove_tracks(self, audio=[], subtitle=[]):
        with TempPath(dir=self.path.parent) as temp:
            args = [
                "mkvmerge",
                "-o",
                temp,
                *self.excluded_track_string("audio", audio),
                *self.excluded_track_string("subtitle", subtitle),
                self.path,
            ]
            subprocess.run(args, stdout=subprocess.DEVNULL, check=True)
            temp.rename(self.path)


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object
    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.
    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                if temp_path.is_file():
                    temp_path.unlink()
                else:
                    shutil.rmtree(temp_path)
            except FileNotFoundError:
                pass


def find_mkv_files(*paths):
    files = set()
    stack = set()

    for path in paths:
        path = path.absolute()
        if path.is_file():
            files.add(path)
        else:
            stack.add(path)

    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.add(path)
            elif path.is_dir():
                stack.add(path)

    return sorted(path for path in files if path.suffix.lower() == ".mkv")


class SizeDiffPrinter:
    def __init__(self, num_items):
        self._before_total = 0
        self._after_total = 0
        self._num_items = num_items
        self._num_printed = 0
        self._printed = False

    @staticmethod
    def format_diff(before, after):
        diff = ((before - after) / before) * 100
        if diff:
            diff = "{:.2f}".format(diff)
            if not float(diff):
                diff = f"<{diff}"
        return diff

    @staticmethod
    def sizeof_fmt(num):
        for unit in ["B", "KB", "MB", "GB", "TB", "PB"]:
            if abs(num) < 1024.0:
                break
            num /= 1024.0
        return f"{num:.1f}{unit}"

    def print(self, before, after, name):
        self._num_printed += 1
        self._before_total += before
        self._after_total += after
        diff = self.format_diff(before, after)

        s = f"{diff:>6}%" if diff else 7 * "-"
        num_printed = str(self._num_printed).rjust(len(str(self._num_items)))
        print(f"({num_printed}/{self._num_items})\t{s}\t{name}")

    def print_total(self):
        if self._num_printed:
            if diff := self.format_diff(self._before_total, self._after_total):
                fmt = self.sizeof_fmt(self._before_total - self._after_total)
                print(f"Total: {diff}% ({fmt})")
            else:
                print("Total: -")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("mkv", type=pathlib.Path, nargs="+")
    parser.add_argument(
        "-k",
        "--keep",
        action="append",
        help="Language to keep",
    )
    parser.add_argument("-d", "--dryrun", action="store_true")
    args = parser.parse_args()

    valid_languages = set(args.keep) if args.keep else DEFAULT_LANGUAGES
    if "und" in valid_languages:
        valid_languages.add(None)

    mkv_files = find_mkv_files(*args.mkv)

    if not mkv_files:
        parser.error("no mkv files found")

    pending = []
    for path in mkv_files:
        mkv = MKVFile(path)
        invalid_languages = mkv.languages - valid_languages
        audio_track_remove = mkv.matching_audio_tracks(invalid_languages)
        subtitle_track_remove = mkv.matching_subtitle_tracks(invalid_languages)

        if audio_track_remove or subtitle_track_remove:
            pending.append((mkv, audio_track_remove, subtitle_track_remove))

    if pending:
        for mkv, audio_track_remove, subtitle_track_remove in tqdm.tqdm(pending):
            log = [str(mkv.path)]
            if audio_track_remove:
                log.append(f"(audio: {audio_track_remove})")
            if subtitle_track_remove:
                log.append(f"(subtitle: {subtitle_track_remove})")

            if not args.dryrun:
                mkv.remove_tracks(
                    audio=audio_track_remove, subtitle=subtitle_track_remove
                )


if __name__ == "__main__":
    main()
