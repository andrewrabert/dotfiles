#!/usr/bin/env python3
import argparse
import json
import os
import pathlib
import subprocess


DEFAULT_LANGUAGES = {'eng', 'und', None}


def mkv_info(path):
    proc = subprocess.run(
        ['mkvmerge', '-J', path],
        stdout=subprocess.PIPE,
        check=True)
    return json.loads(proc.stdout)


class MKVFile:
    def __init__(self, path):
        self.path = path
        self.metadata = mkv_info(path)

    def subtitle_tracks(self, languages=None):
        return [
            track['id']
            for track in self.metadata['tracks']
            if track['type'] == 'subtitles'
            and track['properties']['language'] in languages
        ]

    def audio_tracks(self, languages=None):
        return [
            track['id']
            for track in self.metadata['tracks']
            if track['type'] == 'audio'
            and track['properties']['language'] in languages
        ]

    def video_tracks(self, languages=None):
        return [
            track['id']
            for track in self.metadata['tracks']
            if track['type'] == 'video'
            and track['properties']['language'] in languages
        ]


def mkvmerge_tracks(path, include=None):
    args = ['mkvextract', path, 'tracks']
    if include:
        args += [
            f'{track}:{path}.track_{track}'
            for track in include
        ]
    os.execvp('mkvextract', args)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('path', type=pathlib.Path)
    parser.add_argument('--subtitle', action='store_true')
    parser.add_argument('--audio', action='store_true')
    parser.add_argument('--video', action='store_true')
    args = parser.parse_args()

    metadata = MKVFile(args.path)

    include = []
    if args.subtitle:
        include += metadata.subtitle_tracks(DEFAULT_LANGUAGES)

    if args.audio:
        include += metadata.audio_tracks(DEFAULT_LANGUAGES)

    if args.video:
        include += metadata.video_tracks(DEFAULT_LANGUAGES)

    mkvmerge_tracks(args.path, include)


if __name__ == '__main__':
    main()
