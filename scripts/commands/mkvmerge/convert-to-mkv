#!/usr/bin/env python
import argparse
import asyncio
import contextlib
import logging
import pathlib
import tempfile

VIDEO_EXTENSIONS = {
    '.avi',
    '.flv',
    '.m4v',
    '.mov',
    '.mp4',
    '.mpeg',
    '.mpg',
    '.vob',
    '.webm',
}

SUBTITLE_EXTENSIONS = {
    '.ass',
    '.srt',

    # both need to be present at the same time?
    '.itx',
    '.sub',
}

LOGGER = logging.getLogger('convert-to-mkv')


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file() and not path.is_symlink():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


async def mkvmerge(dest, *sources, delete_parts=True, title):
    LOGGER.info('converting %s', dest)
    with TempPath(dir=dest.parent, prefix='.convert-to-mkv_',
                  suffix=dest.suffix + '.tmp') as tmp:
        args = [
            'mkvmerge',
            '--quiet',
            '--output', tmp,
        ]
        if title is not None:
            args.extend(['--title', title])
        args.extend(sources)
        proc = await asyncio.create_subprocess_exec(*args)
        await proc.communicate()
        if proc.returncode:
            raise ProcessError(proc)
        tmp.rename(dest)
    if delete_parts:
        for part in sources:
            if part.absolute() != dest.absolute():
                part.unlink()


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--force', action='store_true',
                        help='include files ending in .mkv')
    parser.add_argument('--keep', action='store_true',
                        help='keep original files after conversion')
    parser.add_argument('path', nargs='+', type=pathlib.Path)
    args = parser.parse_args()

    logging.basicConfig(format='%(message)s', level=logging.INFO)

    paths = set()
    for path in args.path:
        path = path.absolute()
        if path.is_file():
            paths.add(path)
        elif path.is_dir():
            paths.update(all_files(path))

    for path in sorted(paths):
        if path.suffix.lower() in ('.mkv', *VIDEO_EXTENSIONS):
            dest = path.with_suffix('.mkv')

            # cannot use path.stem in glob as glob characters may be in path
            subtitle_paths = [
                p
                for p in path.parent.glob('*')
                if p.name.lower().startswith(path.stem.lower())
                and p.is_file()
                and p.suffix.lower() in SUBTITLE_EXTENSIONS
            ]

            if args.force or (dest != path) or subtitle_paths:
                await mkvmerge(
                    dest, path, *subtitle_paths,
                    delete_parts=not args.keep,
                    title=path.stem,
                )
        else:
            LOGGER.error('unrecognized extension: "%s"', path.suffix)


if __name__ == '__main__':
    asyncio.run(main())
