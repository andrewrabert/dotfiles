#!/usr/bin/env python
import argparse
import contextlib
import logging
import pathlib
import subprocess
import tempfile

EXTENSIONS = {
    '.avi',
    '.flv',
    '.m4v',
    '.mov',
    '.mp4',
    '.mpeg',
    '.mpg',
    '.vob',
    '.webm',
}

SUBTITLE_EXTENSIONS = {
    '.ass',
    '.srt',
}

LOGGER = logging.getLogger('convert-to-mkv')


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file() and not path.is_symlink():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


def mkvmerge(dest, *sources, delete_parts=True):
    LOGGER.info('converting %s (parts %s)', dest, sources)
    with TempPath(dir=dest.parent, prefix='.convert-to-mkv_',
                  suffix=dest.suffix + '.tmp') as tmp:
        subprocess.run(
            ['mkvmerge', '--quiet', '--output', tmp, *sources],
            check=True)
        tmp.rename(dest)
    if delete_parts:
        for part in sources:
            if part.absolute() != dest.absolute():
                part.unlink()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', nargs='+', type=pathlib.Path)
    args = parser.parse_args()

    logging.basicConfig(
        format='%(levelname)-8s %(message)s',
        level=logging.INFO)

    paths = set()
    for path in args.path:
        path = path.absolute()
        if path.is_file():
            paths.add(path)
        elif path.is_dir():
            paths.update(all_files(path))

    for path in sorted(paths):
        if path.suffix.lower() in ('.mkv', *EXTENSIONS):
            dest = path.with_suffix('.mkv')

            # cannot use path.stem in glob as glob characters may be in path
            subtitle_paths = [
                p
                for p in path.parent.glob('*')
                if p.name.lower().startswith(path.stem.lower())
                and p.is_file()
                and p.suffix.lower() in SUBTITLE_EXTENSIONS
            ]

            if (dest != path) or subtitle_paths:
                mkvmerge(dest, path, *subtitle_paths)
        else:
            LOGGER.error('unrecognized extension: "%s"', path.suffix)


if __name__ == '__main__':
    main()
