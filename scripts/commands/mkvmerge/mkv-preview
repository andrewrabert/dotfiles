#!/usr/bin/env python3
import asyncio
import argparse
import collections
import json


async def mediainfo(path):
    proc = await asyncio.create_subprocess_exec(
        'mediainfo', '--Output=JSON', '--', path,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate()
    if proc.returncode != 0:
        raise ProcessError(proc)
    return json.loads(stdout)


async def mkvmerge_identify(path):
    proc = await asyncio.create_subprocess_exec(
        'mkvmerge', '-J', path,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate()
    if proc.returncode != 0:
        raise ProcessError(proc)
    return json.loads(stdout)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path')
    args = parser.parse_args()

    metadata_mkvmerge, metadata_mediainfo = await asyncio.gather(
        mkvmerge_identify(args.path),
        mediainfo(args.path),
    )

    mediainfo_by_uid = {}
    for track in metadata_mediainfo['media']['track']:
        unique_id = track.get('UniqueID', None)
        if unique_id is not None:
            unique_id = int(unique_id)
            if unique_id in mediainfo_by_uid:
                raise RuntimeError
            mediainfo_by_uid[unique_id] = track

    results = {
        'audio': [],
        'subtitles': [],
        'video': [],
    }
    type_counts = collections.Counter()
    for i, track in enumerate(metadata_mkvmerge['tracks']):
        type_counts[track['type']] += 1
        type_selector = None
        if track['type'] in ['video', 'audio', 'subtitles']:
            type_selector = 'track:{}{}'.format(
                track['type'][0],
                type_counts[track['type']],
            )
        track['selectors'] = {
            'global': f'track:{i+1}',
            'type': type_selector,
        }
        results[track['type']].append(track)

    title = metadata_mkvmerge['container']['properties'].get('title')
    if title is not None:
        print('title:', title.strip())
    for track_type in ['video', 'audio', 'subtitles']:
        if tracks := results[track_type]:
            print(track_type)

            for track in tracks:
                uid = track['properties']['uid']
                line = [
                    '{} {}'.format(
                        track['id'],
                        track['selectors']['type'],
                    ),
                ]
                match track['type']:
                    case 'video':
                        mediainfo_track = mediainfo_by_uid[uid]
                        vformat = mediainfo_track['Format']
                        match vformat:
                            case 'HEVC':
                                bd = mediainfo_track['BitDepth']
                                if bd is not None:
                                    vformat += f' ({bd}-bit)'
                        line.extend([
                            vformat,
                            '{}x{}'.format(
                                mediainfo_track['Width'],
                                mediainfo_track['Height'],
                            )
                        ])
                    case 'audio':
                        line.extend([
                            track['properties'].get('language', 'und'),
                            track['codec'],
                        ])
                    case 'subtitles':
                        line.extend([
                            track['properties'].get('language', 'und'),
                            track['codec'],
                            track['properties'].get('track_name', None),
                        ])
                info = '\t'.join(
                    str(value)
                    for value in line
                    if value is not None
                )
                print(f'  {info}')


if __name__ == '__main__':
    asyncio.run(main())
