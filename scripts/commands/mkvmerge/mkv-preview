#!/usr/bin/env python3
import argparse
import collections
import json
import subprocess


def mkv_info(path):
    proc = subprocess.run(
        ['mkvmerge', '-J', path],
        stdout=subprocess.PIPE,
        check=True)
    return json.loads(proc.stdout)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path')
    args = parser.parse_args()

    metadata = mkv_info(args.path)

    results = {
        'audio': [],
        'subtitles': [],
        'video': [],
    }
    type_counts = collections.Counter()
    for i, track in enumerate(metadata['tracks']):
        type_counts[track['type']] += 1
        type_selector = None
        if track['type'] in ['video', 'audio', 'subtitles']:
            type_selector = 'track:{}{}'.format(
                track['type'][0],
                type_counts[track['type']],
            )
        track['selectors'] = {
            'global': f'track:{i+1}',
            'type': type_selector,
        }
        results[track['type']].append(track)

    for track_type in ['video', 'audio', 'subtitles']:
        if tracks := results[track_type]:
            print(track_type)

            for track in tracks:
                line = [
                    track['selectors']['type'],
                ]
                match track['type']:
                    case 'video':
                        line.extend([
                            track['codec'],
                            track['properties']['pixel_dimensions'],
                        ])
                    case 'audio':
                        line.extend([
                            track['properties'].get('language', 'und'),
                            track['codec'],
                        ])
                    case 'subtitles':
                        line.extend([
                            track['properties'].get('language', 'und'),
                            track['codec'],
                            track['properties'].get('track_name', None),
                        ])
                info = '\t'.join(
                    str(value)
                    for value in line
                    if value is not None
                )
                print(f'  {info}')


if __name__ == '__main__':
    main()
