#!/usr/bin/env python3
import argparse
import json
import pathlib
import subprocess


def mkv_info(path):
    proc = subprocess.run(["mkvmerge", "-J", path], stdout=subprocess.PIPE, check=True)
    return json.loads(proc.stdout)


def find_mkv_files(*paths):
    files = set()
    stack = set()

    for path in paths:
        path = path.absolute()
        if path.is_file():
            files.add(path)
        else:
            stack.add(path)

    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.add(path)
            elif path.is_dir():
                stack.add(path)

    return sorted(path for path in files if path.suffix.lower() == ".mkv")


def _parser_language(value):
    # mkv uses ISO 639-2 language codes
    if len(value) != 3:
        raise ValueError("invalid language")
    return value


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("mkv", type=pathlib.Path, nargs="+")
    mode_group = parser.add_mutually_exclusive_group(required=True)
    mode_group.add_argument(
        "-e", "--exclude", metavar="LANGUAGE", type=_parser_language, action="append"
    )
    mode_group.add_argument(
        "-i", "--include", metavar="LANGUAGE", type=_parser_language, action="append"
    )
    args = parser.parse_args()

    is_exclude_mode = args.exclude is not None
    if is_exclude_mode:
        languages = set(args.exclude)
    else:
        languages = set(args.include)

    # ???
    if "und" in languages:
        languages.add(None)

    mkv_files = find_mkv_files(*args.mkv)

    if not mkv_files:
        parser.error("no mkv files found")

    for path in mkv_files:
        path_languages = set()
        for track in mkv_info(path)["tracks"]:
            if track["type"] not in ("audio", "subtitle"):
                continue
            path_languages.add(track["properties"]["language"])

        matched = False
        if is_exclude_mode:
            matched = bool(path_languages - languages)
        else:
            matched = bool(path_languages.intersection(languages))

        if matched:
            print(path)


if __name__ == "__main__":
    main()
