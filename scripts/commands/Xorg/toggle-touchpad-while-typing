#!/usr/bin/env python3
import asyncio
import re


class xinput:
    @staticmethod
    async def ids():
        proc = await asyncio.create_subprocess_exec(
            'xinput', 'list', '--id-only',
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode:
            raise RuntimeError
        return stdout.decode().splitlines()

    @classmethod
    async def list_props(cls, ids=None):
        if ids is None:
            ids = await cls.ids()
        ids = list(ids)
        proc = await asyncio.create_subprocess_exec(
            'xinput', 'list-props', *ids,
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode:
            raise RuntimeError
        props = {}
        current_id = None
        for line in stdout.decode().splitlines():
            if line.startswith('Device '):
                current_id = ids.pop(0)
                props[current_id] = {}
            else:
                line = line.strip()
                full_prop_name, prop_value = line.split(':\t', maxsplit=1)
                prop_name, prop_id = PROP_ID.findall(full_prop_name)[0]
                if prop_name in props[current_id]:
                    raise RuntimeError
                props[current_id][prop_name] = {
                    'id': prop_id,
                    'value': prop_value}
        return props

    @staticmethod
    async def set_prop(dev_id, prop_name, prop_value):
        proc = await asyncio.create_subprocess_exec(
            'xinput', '--set-prop', dev_id, prop_name, prop_value)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError


DISABLE_WHILE_TYPING = 'libinput Disable While Typing Enabled'
PROP_ID = re.compile(r'^(?P<prop_name>.*) \((?P<prop_id>\d+)\)$')


async def _dunstify(text):
    proc = await asyncio.create_subprocess_exec(
        'dunstify',
        '--hints=string:x-dunst-stack-tag:toggle-touchpad-while-typing',
        'Touchpad',
        text,
    )
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError


async def main():
    all_props = await xinput.list_props()
    for dev_id, props in all_props.items():
        if DISABLE_WHILE_TYPING not in props:
            continue

        if props['Device Enabled']['value'] == '0':
            await xinput.set_prop(dev_id, 'Device Enabled', '1')
            await xinput.set_prop(dev_id, DISABLE_WHILE_TYPING, '1')
            await _dunstify('Disabled While Typing')
        elif props[DISABLE_WHILE_TYPING]['value'] == '1':
            await xinput.set_prop(dev_id, DISABLE_WHILE_TYPING, '0')
            await _dunstify('Enabled While Typing')
        else:
            await xinput.set_prop(dev_id, 'Device Enabled', '0')
            await _dunstify('Disabled')


if __name__ == '__main__':
    asyncio.run(main())
