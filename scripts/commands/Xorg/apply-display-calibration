#!/usr/bin/env python3
import argparse
import asyncio
import base64
import os
import pathlib

DOTFILES_ICC = pathlib.Path(os.environ['DOTFILES']) / 'icc'

EDID_PROFILES = {
    # mars lounge - Dell U2412M
    'AP///////wAQrHqgU0RKMBEXAQOANCB46u6Vo1RMmSYPUFShCACBQIGAqUCzANHAAQEBAQEBKDyAoHCwI0AwIDYABkQhAAAaAAAA/wBZTVlIMTM0TDBKRFMKAAAA/ABERUxMIFUyNDEyTQogAAAA/QAyPR5TEQAKICAgICAgAAY=':
        DOTFILES_ICC / 'mars_lounge U2412M #1 2022-03-15 19-25 D6500 2.2 F-S XYZLUT+MTX.icc',
    # mars office - LG 34GP83A-B
    'AP///////wAebUt31PYBAAIfAQS1UCF4n/Z1r05CqyYOUFQhCQBxQIGAgcCpwLMA0cCBANHP2qdwUNWgNFCQIDowIE8xAAAaAAAA/QAwkOHhUAEKICAgICAgAAAA/ABMRyBVTFRSQUdFQVIKAAAA/wAxMDJOVEpKM1M3MjQKAnQCAzBxIwkHB0cQBAMBHxMSgwEAAOMFwADiAGrmBgUBYWE9bRoAAAIFMJAABGE9YT1O1HDQ0KAyUDAgOgAgTzEAABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7nASeQAAAwEUZjgBhm8N7wAvgB8AnwVFAAIACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuQ':
        DOTFILES_ICC / 'mars_office LG34GP83A-B 2022-03-15 19-52 D6500 2.2 F-S XYZLUT+MTX.icc',
    # phobos - Asus Flow X13
    'AP///////wBNEB4VAAAAADEeAQSlHRJ4B95Qo1RMmSYPUFQAAAABAQEBAQEBAQEBAQEBAQEB7XuAoHCwR0AwIDYAILQQAAAY9z2AoHCwR0AwIDYAILQQAAAYAAAA/QAweJmZIAEKICAgICAgAAAA/ABMUTEzNE4xSlc1MgogAAo=':
        DOTFILES_ICC / 'phobos_flowx13 LQ134N1JW52 #1 2022-03-15 14-14 D6500 2.2 F-S XYZLUT+MTX.icc',
    # gisual - Sceptre E275B-FPT165
    'AP///////wBOFAVsAAAAADIeAQSlPCF4O44FrU8zsCYNUFSlSwCBwIGAlQCpwLMA0cABAQEBAjqAGHE4LUAwIDUACEAhAAAaG4KAiHA4LUAYIDUAVlAhAAAeAAAA/QAwpt7ePAEKICAgICAgAAAA/ABTY2VwdHJlIE0yNwogAQECAybxSwEDAAAEEx8SAhGQIwkHB4MBAABtGgAAAgEwpQAAAAAAAIGRgIhwOBJAGCA1AFZQIQAAGPglAKBQOC1AMCBFAFZQIQAAHmYhVqpRAB4wRo8zAFZQIQAAGGYhULBRABswQHA2AFZQIQAAHgAAAAAAAAAAAAAAAAAAAAAABg==':
        DOTFILES_ICC / 'gisual Sceptre E275B-FPT165 D6500 2.2 F-S XYZLUT+MTX (monitor settings - red 49, green, 48, blue 49, gamma 2.2).icc',
    # gisual - Sceptre E275B-FPT165
    'AP///////wBOFAVsAQAAADIeAQOAPCF4Krbgo1ZQoCcOUFS/7wCVAIGAswCBwEVoRXxhaGF8AjqAGHE4LUBYLEUAVlAhAAAeAAAA/QAwkB6gJAAKICAgICAgKkSAoHA4J0AwIDUAVlAhAAAAAAAA/ABTY2VwdHJlIE0yNwogAf4CAy7xSx8AAAQTAxICEQGQIwkHB4MBAABnAwwAIAAYRG0aAAACATCQ7QAAAAAAhm+AoHA4QEAwIDUAVlAhAAAe+CUAoFA4LUAwIDYAVlAhAAAa/n6AiHA4EkAYIDUAVlAhAAB/ZiFWqlEAHjBGjzMAVlAhAAB/AAAAAAAAAAAAVg==':
        DOTFILES_ICC / 'gisual Sceptre E275B-FPT165 D6500 2.2 F-S XYZLUT+MTX (monitor settings - red 49, green, 48, blue 49, gamma 2.2).icc',
    # mars office - LG C2 42"
    'AP///////wAebcjAAQEBAQEfAQOAoFp4CO6Ro1RMmSYPUFShCAAxQEVAYUBxQIGA0cABAQEBCOgAMPJwWoCwWIoAQIRjAAAeb8IAoKCgVVAwIDUAQIRjAAAeAAAA/QAYeB7/dwAKICAgICAgAAAA/ABMRyBUViBTU0NSMgogAWcCA2ryV2FgdnUQHwQTBRQDAhIgISIVAV1eXz9ALAlXBxUHUFcHAWcEA20DDABAALg8LABgAQIDathdxAF4gFsCKHhtGgAAAgEoeAAAAAAAAOIAz+MFwADjBg0B4g//6wFG0ABIA3aCXm2VAAAAAAAAAAAAAAAAAAAAAAAAAAAAng==':
        DOTFILES_ICC / 'FINAL SDR TV SSCR2 #1 2023-02-03 12-27 D6500 2.2 M-S 3xCurve.icm',
}


class Dispwin:
    @staticmethod
    async def active_outputs():
        proc = await asyncio.create_subprocess_exec(
            'dispwin', '-h',
            stderr=asyncio.subprocess.PIPE)
        _, stderr = await proc.communicate()

        output_to_dispwin_num = {}
        is_display_line = False
        for line in stderr.decode().splitlines():
            if is_display_line:
                line = line.strip()
                if line.startswith('-'):
                    break
                parts = line.split()
                display_num = str(int(line[0]))
                if parts[4] != 'Output':
                    raise RuntimeError
                output = parts[5]
                output_to_dispwin_num[output] = display_num
            if line.endswith('Optionally choose different display m for Video LUT access'):
                is_display_line = True
        return output_to_dispwin_num

    @staticmethod
    async def reset_calibration(display_num):
        proc = await asyncio.create_subprocess_exec(
            'dispwin', '-c', '-d', str(display_num),
            stderr=asyncio.subprocess.DEVNULL)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError

    @staticmethod
    async def apply_calibration(display_num, path):
        proc = await asyncio.create_subprocess_exec(
            'dispwin', '-d', str(display_num), path,
            stderr=asyncio.subprocess.DEVNULL)
        await proc.communicate()
        if proc.returncode:
            raise RuntimeError


async def edid_b64(output):
    proc = await asyncio.create_subprocess_exec(
        'xrandr-edid', output,
        stdout=asyncio.subprocess.PIPE)
    stdout, _ = await proc.communicate()
    return base64.b64encode(stdout.strip()).decode()


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--edid', metavar='OUTPUT')
    parser.add_argument('--reset', action='store_true')
    parser.add_argument('profile', type=pathlib.Path, nargs='?')
    args = parser.parse_args()

    if args.edid:
        print(await edid_b64(args.edid))
        parser.exit()

    active_outputs = await Dispwin.active_outputs()
    if args.reset:
        for num in active_outputs.values():
            await Dispwin.reset_calibration(num)
        parser.exit()

    if args.profile:
        for num in active_outputs.values():
            await Dispwin.apply_calibration(num, args.profile)
    else:
        for output, num in active_outputs.items():
            edid = await edid_b64(output)
            if profile := EDID_PROFILES.get(edid):
                await Dispwin.apply_calibration(num, profile)


if __name__ == '__main__':
    asyncio.run(main())
