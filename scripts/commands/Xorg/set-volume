#!/usr/bin/env python3
import argparse
import asyncio


async def notify(*args, transient=False, tag=None):
    proc_args = [
        'dunstify',
    ]
    if tag is not None:
        proc_args.append(f'--hints=string:x-dunst-stack-tag:{tag}')
    if transient:
        proc_args.append('--hints=int:transient:1')
    proc_args.extend(args)
    proc = await asyncio.create_subprocess_exec(*proc_args)
    await proc.communicate()


async def action_input(args):
    is_muted, _ = await pamixer(*args)
    if is_muted:
        await notify('üéôÔ∏è Microphone', 'üö´', tag='sound-input')
    else:
        await notify('üéôÔ∏è Microphone', 'Recording', tag='sound-input')


async def action_output(args):
    is_muted, volume = await pamixer(*args)
    rounded_volume = int(volume / VOLUME_STEP) * VOLUME_STEP
    if volume != rounded_volume:
        is_muted, volume = await pamixer('--set-volume', str(rounded_volume))
    if is_muted:
        await notify('Volume', 'üîá', tag='sound-output')
    else:
        await notify('Volume', '-h', f'int:value:{volume}', tag='sound-output')


async def pamixer(*args):
    proc = await asyncio.create_subprocess_exec(
        'pamixer', '--get-mute', '--get-volume', *args,
        stdout=asyncio.subprocess.PIPE,
    )
    stdout, _ = await proc.communicate()
    is_muted, volume = stdout.decode().strip().split()
    is_muted = True if is_muted == 'true' else False
    volume = int(volume)
    return is_muted, volume


ACTIONS = {
    'output-up': (
        action_output,
        ['--unmute', '--increase', '5']),
    'output-down': (
        action_output,
        ['--unmute', '--decrease', '5']),
    'output-toggle-mute': (
        action_output,
        ['--toggle-mute']),
    'input-toggle-mute': (
        action_input,
        ['--set-volume', '100', '--toggle-mute', '--default-source']),
}


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', choices=ACTIONS)
    args = parser.parse_args()

    action_func, action_args = ACTIONS[args.action]
    await action_func(action_args)


VOLUME_STEP = 5
if __name__ == '__main__':
    asyncio.run(main())
