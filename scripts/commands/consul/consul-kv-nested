#!/usr/bin/env python3
"""Retrieve Consul KV values in a nested JSON format"""
import argparse
import base64
import json
import os
import urllib.error
import urllib.parse
import urllib.request


class Consul:

    def __init__(self, url):
        self.url = url

    def export_kv(self):
        status_code, body = self._request(
            'GET', '/v1/kv/', query={'recurse': 'true'})
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')
        return json.loads(body)

    def _request(self, method, path, data=None, query=None, timeout=30):
        url = urllib.parse.urlunsplit(
            urllib.parse.urlsplit(self.url)._replace(path=path)
        )
        if query is not None:
            query = urllib.parse.urlencode(query)
            url = urllib.parse.urlunsplit(
                urllib.parse.urlsplit(url)._replace(query=query)
            )

        r = urllib.request.Request(url, data=data, method=method)
        try:
            response = urllib.request.urlopen(r, timeout=timeout)
        except urllib.error.HTTPError as error:
            response = error.fp
        return response.getcode(), response.read()


def explode(data, delimiter):
    nested = {}

    for okey, value in sorted(data.items()):
        d = nested
        parts = okey.split(delimiter)
        key = parts.pop(-1)
        if key == '':
            continue

        for part in (p for p in parts if p != ''):
            if part not in d:
                d[part] = {}
            elif part in d and not isinstance(d[part], dict):
                d[part] = {}
            d = d[part]

        d[key] = value

    return nested


def flatten(root, separator='/'):
    stack = [([], root)]
    flat = {}
    while stack:
        prefixes, data = stack.pop()
        for key, value in data.items():
            prefix = prefixes.copy()
            prefix.append(key)

            if isinstance(value, dict):
                stack.append((prefix, value))
            else:
                if any(separator in part for part in prefix):
                    raise ValueError('separator found in prefix')
                flat_key = separator.join(prefix)
                if flat_key in flat:
                    raise KeyError(f'duplicate key "{flat_key}"')
                flat[flat_key] = value
    return flat


def transform_export_to_nested(data):
    transformed = {}
    for item in data:
        value = item['Value']
        if value is not None:
            try:
                value = base64.b64decode(value).decode()
            except UnicodeDecodeError:
                continue
        transformed[item['Key']] = value
    return explode(transformed, '/')


def main():
    parser = argparse.ArgumentParser('consul-kv-nested', description=__doc__)
    parser.add_argument(
        '--flat', action='store_true',
        help='flatten output')
    parser.add_argument(
        '--keys', action='store_true',
        help='output only key names')
    parser.add_argument(
        '--url', default=os.environ.get('CONSUL_HTTP_ADDR'),
        help='Consul HTTP address [envvar CONSUL_HTTP_ADDR]')
    parser.add_argument(
        'path', nargs='?', default='/',
        help='optional path to navigate to. (default %(default)s)')
    args = parser.parse_args()

    if not args.url:
        parser.error('consul url not specified')
        parser.exit(1)

    consul = Consul(args.url)
    data = transform_export_to_nested(consul.export_kv())

    path = args.path.strip('/').strip()
    if path:
        for part in path.split('/'):
            data = data[part]
    if args.flat:
        data = flatten(data)
    if args.keys:
        data = sorted(data.keys())

    print(json.dumps(data, indent=2, sort_keys=True))


if __name__ == '__main__':
    main()
