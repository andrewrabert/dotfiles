#!/usr/bin/env python3
"""Retrieve and manipulate Consul KV in JSON format"""
import argparse
import base64
import json
import os
import re
import sys
import urllib.error
import urllib.parse
import urllib.request


class ConsulKV:

    def __init__(self, url):
        self.url = url

    def get(self):
        status_code, body = self._request(
            'GET', f'/v1/kv/', query={'recurse': 'true'})
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')
        return self._decode_kv_export(json.loads(body))

    def put(self, key, value):
        status_code, body = self._request(
            'PUT', f'/v1/kv/{key}', data=value.encode())
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')

    def delete(self, key):
        status_code, body = self._request('DELETE', f'/v1/kv/{key}')
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')

    def _request(self, method, path, data=None, query=None, timeout=30):
        url = urllib.parse.urlunsplit(
            urllib.parse.urlsplit(self.url)._replace(path=path)
        )
        if query is not None:
            query = urllib.parse.urlencode(query)
            url = urllib.parse.urlunsplit(
                urllib.parse.urlsplit(url)._replace(query=query)
            )

        r = urllib.request.Request(url, data=data, method=method)
        try:
            response = urllib.request.urlopen(r, timeout=timeout)
        except urllib.error.HTTPError as error:
            response = error.fp
        return response.getcode(), response.read()

    @staticmethod
    def _decode_kv_export(data):
        transformed = {}
        for item in data:
            key = item['Key']
            if key.endswith('/'):
                continue
            value = item['Value']
            if value is None:
                value = ''
            else:
                try:
                    value = base64.b64decode(value).decode()
                except UnicodeDecodeError:
                    # binary data?
                    continue
            transformed[key] = value
        return transformed


def _nest(data, delimiter='/'):
    nested = {}

    for okey, value in sorted(data.items()):
        d = nested
        parts = okey.split(delimiter)
        key = parts.pop(-1)
        if key == '':
            continue

        for part in (p for p in parts if p != ''):
            if part not in d:
                d[part] = {}
            elif part in d and not isinstance(d[part], dict):
                d[part] = {}
            d = d[part]

        d[key] = value

    return nested


def main():
    parser = argparse.ArgumentParser('consul-kv-json', description=__doc__)
    parser.add_argument(
        '--url', default=os.environ.get('CONSUL_HTTP_ADDR'),
        help='Consul HTTP address [envvar CONSUL_HTTP_ADDR]')

    subparsers = parser.add_subparsers(dest='command', required=True)

    get_parser = subparsers.add_parser('get')
    get_parser.add_argument(
        '--key-regex', metavar='PATTERN', help='key pattern')
    get_parser.add_argument(
        '--value-regex', metavar='PATTERN', help='value pattern')
    get_parser.add_argument(
        '-i', dest='ignorecase', action='store_true',
        help='ignore case')
    get_parser.add_argument(
        '-v', dest='invert', action='store_true', help='invert match')
    get_parser.add_argument('--nest', action='store_true')

    put_parser = subparsers.add_parser('put')
    put_parser.add_argument(
        'data', nargs='?', default=sys.stdin, type=argparse.FileType('r'))

    delete_parser = subparsers.add_parser('delete')
    delete_parser.add_argument(
        'data', nargs='?', default=sys.stdin, type=argparse.FileType('r'))

    args = parser.parse_args()

    if not args.url:
        parser.error('consul url not specified')
        parser.exit(1)

    consul = ConsulKV(args.url)

    if args.command == 'get':
        flags = re.IGNORECASE if args.ignorecase else 0
        key_re = re.compile(
            args.key_regex, flags=flags) if args.key_regex else None
        value_re = re.compile(
            args.value_regex, flags=flags) if args.value_regex else None

        data = {}
        for key, value in consul.get().items():
            if key_re:
                if key_re.search(key):
                    if args.invert:
                        continue
                elif not args.invert:
                    continue
            if value_re:
                if value_re.search(value):
                    if args.invert:
                        continue
                elif not args.invert:
                    continue

            data[key] = value

        if args.nest:
            data = _nest(data)

        print(json.dumps(data, indent=2, sort_keys=True))
    elif args.command == 'put':
        data = json.load(args.data)

        assert isinstance(data, dict)
        for key, value in data.items():
            assert isinstance(value, str)

        for key, value in data.items():
            consul.put(key, value)
    elif args.command == 'delete':
        data = json.load(args.data)

        assert isinstance(data, list)
        for key in data:
            assert isinstance(key, str)

        for key in data:
            consul.delete(key)


if __name__ == '__main__':
    main()
