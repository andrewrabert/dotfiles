#!/usr/bin/env python3
"""Retrieve and manipulate Consul KV in JSON format"""
import argparse
import base64
import json
import logging
import os
import ssl
import sys
import urllib.error
import urllib.parse
import urllib.request


NAME = 'consul-kv-json'
LOGGER = logging.getLogger(NAME)


class ConsulKV:

    def __init__(self, url, verify=True):
        self.url = url
        self.context = None
        if verify:
            self.context = None
        else:
            self.context = ssl.create_default_context()
            self.context.check_hostname = False
            self.context.verify_mode = ssl.CERT_NONE

    def get(self):
        status_code, body = self._request(
            'GET', '/v1/kv/', query={'recurse': 'true'})
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')
        return self._decode_kv_export(json.loads(body))

    def put(self, key, value):
        status_code, body = self._request(
            'PUT', f'/v1/kv/{key}', data=value.encode())
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')

    def delete(self, key):
        status_code, body = self._request('DELETE', f'/v1/kv/{key}')
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')

    def _request(self, method, path, data=None, query=None, timeout=30):
        url = urllib.parse.urlunsplit(
            urllib.parse.urlsplit(self.url)._replace(path=path)
        )
        if query is not None:
            query = urllib.parse.urlencode(query)
            url = urllib.parse.urlunsplit(
                urllib.parse.urlsplit(url)._replace(query=query)
            )

        r = urllib.request.Request(url, data=data, method=method)
        try:
            response = urllib.request.urlopen(
                r, timeout=timeout, context=self.context)
        except urllib.error.HTTPError as error:
            response = error.fp
        return response.getcode(), response.read()

    @staticmethod
    def _decode_kv_export(data):
        transformed = {}
        for item in data:
            key = item['Key']
            if key.endswith('/'):
                continue
            value = item['Value']
            if value is None:
                value = ''
            else:
                try:
                    value = base64.b64decode(value).decode()
                except UnicodeDecodeError:
                    LOGGER.warning('Cannot decode "%s"', key)
            transformed[key] = value
        return transformed


def main():
    parser = argparse.ArgumentParser(NAME, description=__doc__)
    parser.add_argument(
        '--url', default=os.environ.get('CONSUL_HTTP_ADDR'),
        help='Consul HTTP address [envvar CONSUL_HTTP_ADDR]')
    parser.add_argument(
        '--insecure', action='store_true',
        help='Allow insecure server connections when using SSL')

    subparsers = parser.add_subparsers(dest='command', required=True)

    get_parser = subparsers.add_parser('get')
    get_parser.add_argument('prefix', nargs='?')

    put_parser = subparsers.add_parser('put')
    put_parser.add_argument('key')
    put_parser.add_argument('value')

    import_parser = subparsers.add_parser('import')
    import_parser.add_argument(
        'data', nargs='?', default=sys.stdin, type=argparse.FileType('r'))

    delete_parser = subparsers.add_parser('delete')
    delete_parser.add_argument('key')
    delete_parser.add_argument('-r', '--recursive', action='store_true')

    args = parser.parse_args()

    logging.basicConfig(format='%(message)s', level=logging.ERROR)

    if not args.url:
        parser.error('consul url not specified')
        parser.exit(1)

    consul = ConsulKV(args.url, verify=not(args.insecure))

    if args.command == 'get':
        data = consul.get()
        if args.prefix is not None:
            data = {
                key: value
                for key, value in data.items()
                if key.startswith(args.prefix)
            }
        print(json.dumps(data, indent=2, sort_keys=True))
    elif args.command == 'put':
        consul.put(args.key, args.value)
    elif args.command == 'import':
        data = json.load(args.data)

        assert isinstance(data, dict)
        for key, value in data.items():
            assert isinstance(value, str)

        for key, value in data.items():
            print(f'put "{key}" "{value}"')
            consul.put(key, value)
    elif args.command == 'delete':
        consul.delete(args.key)

        if args.recursive:
            data = consul.get()
            prefix = args.key.rstrip('/')
            keys = {
                key
                for key in data
                if key.startswith(prefix)
            }
            for key in keys:
                print(f'delete "{key}"')
                consul.delete(key)


if __name__ == '__main__':
    main()
