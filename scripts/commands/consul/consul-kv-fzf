#!/usr/bin/env python3
import argparse
import base64
import json
import logging
import os
import ssl
import subprocess
import sys
import urllib.error
import urllib.parse
import urllib.request

LOGGER = logging.getLogger('consul-kv-repl')


def fzf(data):
    proc = subprocess.run(
        ['fzf', '--prompt=', '--no-info',
         '-i', '--layout=reverse', '--print-query'],
        input='\n'.join(data).encode(),
        stdout=subprocess.PIPE,
    )
    try:
        result = proc.stdout.decode().splitlines()[-1]
    except IndexError:
        result = None

    return result


class ConsulKV:

    def __init__(self, url, verify=True):
        self.url = url
        self.context = None
        if verify:
            self.context = None
        else:
            self.context = ssl.create_default_context()
            self.context.check_hostname = False
            self.context.verify_mode = ssl.CERT_NONE

    def get(self):
        status_code, body = self._request(
            'GET', '/v1/kv/', query={'recurse': 'true'})
        if status_code != 200:
            raise RuntimeError(f'HTTP {status_code}')
        return self._decode_kv_export(json.loads(body))

    def _request(self, method, path, data=None, query=None, timeout=30):
        url = urllib.parse.urlunsplit(
            urllib.parse.urlsplit(self.url)._replace(path=path)
        )
        if query is not None:
            query = urllib.parse.urlencode(query)
            url = urllib.parse.urlunsplit(
                urllib.parse.urlsplit(url)._replace(query=query)
            )

        r = urllib.request.Request(url, data=data, method=method)
        try:
            response = urllib.request.urlopen(
                r, timeout=timeout, context=self.context)
        except urllib.error.HTTPError as error:
            response = error.fp
        return response.getcode(), response.read()

    @staticmethod
    def _decode_kv_export(data):
        transformed = {}
        for item in data:
            key = item['Key']
            if key.endswith('/'):
                continue
            value = item['Value']
            if value is None:
                value = ''
            else:
                try:
                    value = base64.b64decode(value).decode()
                except UnicodeDecodeError:
                    pass
            transformed[key] = value
        return transformed


def main():
    parser = argparse.ArgumentParser('consul-kv-fzf')
    parser.add_argument(
        '--url', default=os.environ.get('CONSUL_HTTP_ADDR'),
        help='Consul HTTP address [envvar CONSUL_HTTP_ADDR]')
    parser.add_argument(
        '--insecure', action='store_true',
        help='Allow insecure server connections when using SSL')
    args = parser.parse_args()

    consul = ConsulKV(args.url, verify=not(args.insecure))
    data = consul.get()
    keys = set()
    for key in data:
        keys.add('/'.join(key.split('/')[:-1]))

    target = fzf(sorted(keys))
    if target is None:
        sys.exit(1)

    data = {
        key: value
        for key, value in data.items()
        if key.startswith(f'{target}/')
    }

    print(json.dumps(data, indent=2, sort_keys=True, ensure_ascii=False))


if __name__ == '__main__':
    main()
