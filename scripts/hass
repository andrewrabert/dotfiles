#!/usr/bin/env python3
import argparse
import asyncio
import json
import time
import os

import httpx

TOKEN = os.environ['HASS_TOKEN']
URL = os.environ['HASS_URL']

TIMEOUT = 30


class HASS:
    def __init__(self, url, token):
        self.url = url
        self.client = httpx.AsyncClient()
        self.client.headers['Authorization'] = f'Bearer {token}'

    async def get_states(self):
        response = await self.client.get(f'{self.url}/api/states')
        response.raise_for_status()
        return response.json()

    async def get_services(self):
        response = await self.client.get(f'{self.url}/api/services')
        response.raise_for_status()
        return response.json()

    async def post_services(self, domain, service, entity_id, **kwargs):
        response = await self.client.post(
            f'{self.url}/api/services/{domain}/{service}',
            json=dict(entity_id=entity_id, **kwargs),
        )
        response.raise_for_status()
        return response.json()


async def office_tv_on(_):
    hass = HASS(URL, TOKEN)
    await hass.post_services(
        'media_player', 'turn_on', entity_id='media_player.office_tv')

    # buggy bullshit
    start = time.time()
    while True:
        attributes = [
            state['attributes']
            for state in await hass.get_states()
            if state['entity_id'] == 'media_player.office_tv'
        ][0]

        if attributes.get('volume_level') != 0.1:
            await hass.post_services(
                'media_player', 'volume_set',
                entity_id='media_player.office_tv',
                volume_level=0.1)
        elif attributes.get('source') != 'PC':
            await hass.post_services(
                'media_player', 'select_source',
                entity_id='media_player.office_tv',
                source='PC')
        else:
            break
        time.sleep(0.1)
        if (time.time() - start) > TIMEOUT:
            raise TimeoutError


async def office_tv_off(_):
    hass = HASS(URL, TOKEN)
    await hass.post_services(
        'media_player', 'turn_off',
        entity_id='media_player.office_tv')


async def office_tv_mute_toggle(_):
    hass = HASS(URL, TOKEN)
    is_muted = [
        state['attributes']['is_volume_muted']
        for state in await hass.get_states()
        if state['entity_id'] == 'media_player.office_tv'
    ][0]
    await hass.post_services(
        'media_player', 'volume_mute',
        entity_id='media_player.office_tv',
        is_volume_muted=not is_muted)


async def office_tv_volume_up(_):
    hass = HASS(URL, TOKEN)
    await hass.post_services(
        'media_player', 'volume_up',
        entity_id='media_player.office_tv')


async def office_tv_volume_down(_):
    hass = HASS(URL, TOKEN)
    await hass.post_services(
        'media_player', 'volume_down',
        entity_id='media_player.office_tv')


async def get_states(args):
    hass = HASS(URL, TOKEN)
    print(json.dumps(await hass.get_states(), indent=2, sort_keys=True))


async def get_services(args):
    hass = HASS(URL, TOKEN)
    print(json.dumps(await hass.get_services(), indent=2, sort_keys=True))


async def post_services(args):
    hass = HASS(URL, TOKEN)
    await hass.post_services(args.domain, args.service, args.entity_id)


async def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        dest='command', metavar='COMMAND', required=True)

    # generic
    get_states_parser = subparsers.add_parser('get-states')
    get_states_parser.set_defaults(func=get_states)

    get_services_parser = subparsers.add_parser('get-services')
    get_services_parser.set_defaults(func=get_services)

    post_services_parser = subparsers.add_parser('post-services')
    post_services_parser.set_defaults(func=post_services)
    post_services_parser.add_argument('domain')
    post_services_parser.add_argument('service')
    post_services_parser.add_argument('entity_id')

    # specific
    office_tv_on_parser = subparsers.add_parser('office-tv-on')
    office_tv_on_parser.set_defaults(func=office_tv_on)

    office_tv_off_parser = subparsers.add_parser('office-tv-off')
    office_tv_off_parser.set_defaults(func=office_tv_off)

    office_tv_mute_toggle_parser = subparsers.add_parser(
        'office-tv-mute-toggle')
    office_tv_mute_toggle_parser.set_defaults(func=office_tv_mute_toggle)

    office_tv_volume_up_parser = subparsers.add_parser('office-tv-volume-up')
    office_tv_volume_up_parser.set_defaults(func=office_tv_volume_up)

    office_tv_volume_down_parser = subparsers.add_parser(
        'office-tv-volume-down')
    office_tv_volume_down_parser.set_defaults(func=office_tv_volume_down)

    args = parser.parse_args()

    await args.func(args)


if __name__ == '__main__':
    asyncio.run(main())
