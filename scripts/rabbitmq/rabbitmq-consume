#!/usr/bin/env python3
import argparse
import pika
import sys


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=5672)
    parser.add_argument('-H', '--host', default='localhost')
    parser.add_argument('-v', '--vhost', default='/')
    parser.add_argument('-a', '--ack', action='store_const', const=True,
                        default=False)
    parser.add_argument('-u', '--username')
    parser.add_argument('-P', '--password')
    parser.add_argument('-t', '--tag')
    parser.add_argument('queue')
    args = parser.parse_args()

    def on_message(channel, method_frame, header_frame, body):
        sys.stdout.buffer.write(body)
        if args.ack:
            channel.basic_ack(delivery_tag=method_frame.delivery_tag)
        else:
            channel.basic_nack(delivery_tag=method_frame.delivery_tag)
        raise KeyboardInterrupt

    connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            args.host,
            args.port,
            args.vhost,
            pika.PlainCredentials(args.username, args.password)
        )
    )
    channel = connection.channel()
    channel.basic_consume(on_message, args.queue, consumer_tag=args.tag)
    try:
        channel.start_consuming()
    except KeyboardInterrupt:
        channel.stop_consuming()
    connection.close()


if __name__ == '__main__':
    main()
