#!/usr/bin/env python3
import multiprocessing
import subprocess


SW_TABLET_MODE_DEV = '/dev/input/by-path/platform-asus-nb-wmi-event'
DISPLAY = 'eDP'


def device_events():
    proc = subprocess.Popen(
        ['evtest', SW_TABLET_MODE_DEV],
        stdout=subprocess.PIPE)
    for line in proc.stdout:
        if b'SW_TABLET_MODE' in line:
            match line[-2]:
                case 48:
                    yield False
                case 49:
                    yield True
                case _:
                    raise RuntimeError(f'unexpected value: {line}')


def transform_matrix(input_name, matrix):
    subprocess.run(
        ['xinput', 'set-prop', input_name,
         '--type=float', 'Coordinate Transformation Matrix', *matrix.split()],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        # ignore missing devicess
        check=False)


def xrandr_rotate(orientation):
    subprocess.run(
        ['xrandr', '--output', DISPLAY,
         '--rotate', orientation],
        stderr=subprocess.DEVNULL,
        check=True)


def i3_scratchpad_hide():
    subprocess.run(
        ['i3-scratchpad-hide'],
        # i3 may not be running
        check=False)


def set_orientation(orientation):
    print('Setting orientation to:', orientation)
    match orientation:
        case 'normal':
            transform_matrix('ELAN9008:00 04F3:2C82',
                             '0 0 0 0 0 0 0 0 0')
            transform_matrix('ELAN9008:00 04F3:2C82 Stylus Pen (0)',
                             '0 0 0 0 0 0 0 0 0')
            xrandr_rotate('normal')
            i3_scratchpad_hide()
        case 'left-up':
            transform_matrix('ELAN9008:00 04F3:2C82',
                             '0 -1 1 1 0 0 0 0 1')
            transform_matrix('ELAN9008:00 04F3:2C82 Stylus Pen (0)',
                             '0 -1 1 1 0 0 0 0 1')
            xrandr_rotate('left')
            i3_scratchpad_hide()
        case 'right-up':
            transform_matrix('ELAN9008:00 04F3:2C82',
                             '0 1 0 -1 0 1 0 0 1')
            transform_matrix('ELAN9008:00 04F3:2C82 Stylus Pen (0)',
                             '0 1 0 -1 0 1 0 0 1')
            xrandr_rotate('right')
            i3_scratchpad_hide()
        case 'bottom-up':
            transform_matrix('ELAN9008:00 04F3:2C82',
                             '-1 0 1 0 -1 1 0 0 1')
            transform_matrix('ELAN9008:00 04F3:2C82 Stylus Pen (0)',
                             '-1 0 1 0 -1 1 0 0 1')
            xrandr_rotate('inverted')
            i3_scratchpad_hide()
        case _:
            raise ValueError('invalid orientation')


def monitor_orientation_sensors():
    proc = subprocess.Popen(
        ['monitor-sensor'],
        stdout=subprocess.PIPE)
    for line in proc.stdout:
        if b'Accelerometer orientation changed' not in line:
            continue
        yield line.split(b': ')[-1][:-1].decode()


def child_process():
    for change in monitor_orientation_sensors():
        set_orientation(change)


def main():
    child = None
    previous = None
    for is_tablet_mode in device_events():
        if previous == is_tablet_mode:
            continue

        if is_tablet_mode:
            print('Starting child')
            child = multiprocessing.Process(target=child_process)
            child.start()
        else:
            if child:
                print('Stoppgin child')
                child.kill()
                child.join()
                child.close()
                child = None

            print('Setting default normal orientation')
            set_orientation('normal')

        previous = is_tablet_mode


if __name__ == '__main__':
    main()
