#!/usr/bin/env python3
import argparse
import curses

import serial

DEV = '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AQ044DAC-if00-port0'


class LGC1:
    KEY_CODES = {
        '3D': 'DC',
        'AD (Audio Description)': '91',
        'AV (Audio / Video) Mode': '30',
        'App / *': '9F',
        'Arrow Down / Cursor Down': '41',
        'Arrow Left / Left Key': '07',
        'Arrow Right / Right Key': '06',
        'Arrow Up / Cursor Up': '40',
        'AutoConfig': '99',
        'Blue': '61',
        'CH +, PR +': '00',
        'CH -, PR -': '01',
        'Caption/Subtitle': '39',
        'Exit': '5B',
        'FAV (Favorite Channel)': '1E',
        'Fast Forward': '8E',
        'Freeze / Slow Play / Pause': 'BA',
        'Green': '71',
        'Info': 'AA',
        'Input': '0B',
        'LIVE MENU': '9E',
        'List': '53',
        'List, -': '4C',
        'Menu / Settings': '43',
        'Mute': '09',
        'My Apps': '42',
        'Number Key 0': '10',
        'Number Key 1': '11',
        'Number Key 2': '12',
        'Number Key 3': '13',
        'Number Key 4': '14',
        'Number Key 5': '15',
        'Number Key 6': '16',
        'Number Key 7': '17',
        'Number Key 8': '18',
        'Number Key 9': '19',
        'OK / Enter': '44',
        'PICTURE': '4D',
        'PIP(AD)': '60',
        'Play': 'B0',
        'Power': '08',
        'Program Guide': 'AB',
        'Q.Menu': '45',
        'Q.View / Flashback': '1A',
        'RECENT': 'B5',
        'Ratio / Aspect Ratio': '79',
        'Record': 'BD',
        'Red': '72',
        'Return (BACK)': '28',
        'Rewind': '8F',
        'SIMPLINK': '7E',
        'SLEEP': '0E',
        'SOUND': '52',
        'Smart / Home': '7C',
        'Soccer': 'BB',
        'Stop / File List': 'B1',
        'T. Opt (Teletext Option)': '21',
        'TV / PC': '9B',
        'TV, TV/RAD': '0F',
        'Text (Teletext)': '20',
        'User Guide': '7A',
        'Volume +': '02',
        'Volume -': '03',
        'Yellow': '63',
    }
    MIN_VOLUME = 0
    MAX_VOLUME = 100

    def __init__(self, path):
        self.serial = serial.Serial(path, timeout=1, write_timeout=1)

    def read_response(self):
        chars = []
        while True:
            c = self.serial.read()
            chars.append(c)
            if c == b'x':
                break

        response = b''.join(chars).split()
        command, set_id, data = b''.join(chars).split()
        status = data[0:2]
        if status == b'OK':
            pass
        elif status == b'NG':
            raise RuntimeError(response)
        return data[2:-1]

    def is_on(self):
        self.serial.write(b'ka 0 FF\r')
        return self.read_response()

    def turn_on(self):
        self.serial.write(b'ka 0 01\r')

    def turn_off(self):
        self.serial.write(b'ka 0 00\r')

    def power_toggle(self):
        self.send_key_code(self.KEY_CODES['Power'])

    def volume_up(self):
        self.send_key_code(self.KEY_CODES['Volume +'])

    def volume_down(self):
        self.send_key_code(self.KEY_CODES['Volume -'])

    def volume_mute_toggle(self):
        # rapidly using the mute key code results in an unwanted menu to appear
        if self.is_muted():
            self.unmute()
        else:
            self.mute()

    def is_muted(self):
        self.serial.write(b'ke 0 FF\r')
        return bool(int(self.read_response(), 16))

    def mute(self):
        self.serial.write(b'ke 0 01\r')

    def unmute(self):
        self.serial.write(b'ke 0 00\r')

    def send_key_code(self, key_code):
        self.serial.write(f'mc 0 {key_code}\r'.encode())

    def set_volume(self, volume):
        if not isinstance(volume, int):
            raise TypeError
        if not (self.MIN_VOLUME <= volume <= self.MAX_VOLUME):
            raise ValueError
        self.serial.write(f'kf 0 {volume:02x}\r'.encode())

    def arrow_down(self):
        self.send_key_code(self.KEY_CODES['Arrow Down / Cursor Down'])

    def arrow_up(self):
        self.send_key_code(self.KEY_CODES['Arrow Up / Cursor Up'])

    def arrow_left(self):
        self.send_key_code(self.KEY_CODES['Arrow Left / Left Key'])

    def arrow_right(self):
        self.send_key_code(self.KEY_CODES['Arrow Right / Right Key'])

    def back(self):
        self.send_key_code(self.KEY_CODES['Return (BACK)'])

    def ok(self):
        self.send_key_code(self.KEY_CODES['OK / Enter'])

    def settings(self):
        self.send_key_code(self.KEY_CODES['Menu / Settings'])

    def input(self):
        self.send_key_code(self.KEY_CODES['Input'])

    def exit(self):
        self.send_key_code(self.KEY_CODES['Exit'])

    def home(self):
        self.send_key_code(self.KEY_CODES['Smart / Home'])


def run_curses_app(stdscr, tv):
    stdscr.refresh()
    stdscr.keypad(True)
    curses.start_color()
    curses.use_default_colors()
    curses.curs_set(0)
    curses.noecho()

    lines = [
        'Arrow Keys: Movement',
        'Enter: OK',
        'Backspace: Back',
        '',
        'p: Power',
        's: Settings',
        'i: Input',
        'h: Home',
        '',
        '+: Volume Up',
        '-: Volume Down',
        'm: Mute',
    ]

    win = curses.newwin(len(lines), max(len(line) for line in lines))

    def render():
        for i, line in enumerate(lines):
            win.addstr(i, 0, line, 0)
        win.refresh()

    key_map = {
        curses.KEY_DOWN: tv.arrow_down,
        curses.KEY_UP: tv.arrow_up,
        curses.KEY_LEFT: tv.arrow_left,
        curses.KEY_RIGHT: tv.arrow_right,
        curses.KEY_BACKSPACE: tv.back,
        ord('s'): tv.settings,
        ord('i'): tv.input,
        ord('h'): tv.home,
        ord('+'): tv.volume_up,
        ord('-'): tv.volume_down,
        ord('m'): tv.volume_mute_toggle,
        ord('p'): tv.power_toggle,
        ord('\n'): tv.ok,
    }

    while True:
        render()
        c = stdscr.getch()
        if c in key_map:
            key_map[c]()
        elif c == ord('q'):
            return


def main():
    tv = LGC1(DEV)
    COMMANDS = {
        'on': tv.turn_on,
        'off': tv.turn_off,
        'power': tv.power_toggle,
        'volume-up': tv.volume_up,
        'volume-down': tv.volume_down,
        'mute': tv.volume_mute_toggle,
        'ui': lambda: curses.wrapper(run_curses_app, tv),
    }

    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=COMMANDS)
    args = parser.parse_args()

    COMMANDS[args.command]()


if __name__ == '__main__':
    main()
