#!/usr/bin/env python
import os
import pathlib
import shutil
import subprocess


def tar_extract(path, dest):
    proc = subprocess.run(
        ['tar', 'xvf', path, '-C', dest],
        check=True,
        stdout=subprocess.PIPE)
    return proc.stdout.decode().splitlines()


def _all_paths(root):
    stack = [pathlib.Path(root)]
    paths = []
    while stack:
        for path in stack.pop().iterdir():
            paths.append(path)
            if path.is_dir():
                stack.append(path)
    return paths


def _is_tar(path):
    if path.suffix.lower() == '.tar':
        return True
    if len(path.suffixes) > 1 and path.suffixes[-2].lower() == '.tar':
        return True
    return False


def _sync(source_dir, target_dir):
    expected = set()
    for source in _all_paths(source_dir):
        if not source.is_file():
            continue
        target = target_dir / source.relative_to(source_dir).parent
        target.mkdir(parents=True, exist_ok=True)
        mtime = source.stat().st_mtime_ns
        if _is_tar(source):
            for extracted in tar_extract(source, target):
                extracted = target / extracted
                os.utime(extracted, ns=(mtime, mtime))
                expected.add(extracted)
        else:
            os.utime(target / source.name, ns=(mtime, mtime))
            shutil.copy(source, target / source.name)

    for path in _all_paths(target_dir):
        if path not in expected:
            try:
                if path.is_dir():
                    shutil.rmtree(path)
                else:
                    path.unlink()
            except FileNotFoundError:
                pass


def main():
    source_dir = pathlib.Path('/storage/Games')
    target_dir = pathlib.Path('/storage/Syncthing/Default/RetroArch/rom')

    for d in ('GB', 'GBC', 'GBA', 'NES', 'SNES'):
        _sync(source_dir / d, target_dir / d)


if __name__ == '__main__':
    main()
