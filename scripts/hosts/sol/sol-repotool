#!/usr/bin/env bash
set -e

DATABASE=sol
DATABASE_DIR="/var/cache/pacman/$DATABASE"
DATABASE_FILE="$DATABASE_DIR/$DATABASE.db.tar"

AURVCS='.*-(bzr|git|hg|svn)$'

if ! [ -f "$DATABASE_FILE" ]; then
    repo-add "$DATABASE_FILE"
fi

aurto_sync() {
    sudo pacsync "$DATABASE" > /dev/null
}

repotool_update() {
    rm -rf ~/.cache/aurutils/sync/
    aurto_sync

    aur sync --no-view --no-confirm --database="$DATABASE" --no-ver --upgrades

    vcs_pkgs=$(aur repo --database="$DATABASE" --list | cut -f1 | grep -E "$AURVCS" || true)
    if [ -n "$vcs_pkgs" ]; then
        # init vcs sync cache
        aur sync "$vcs_pkgs" --no-ver-shallow --print --no-view

        mapfile -t git_outdated < <(aur vercmp-devel --database="$DATABASE" | cut -d: -f1)
        if [ ${#git_outdated[@]} -gt 0 ]; then
            repotool_remove "${git_outdated[@]}"
            repotool_add "${git_outdated[@]}"
        fi
    fi

    aurto_sync
    paccache --remove --keep 1 --cachedir "$DATABASE_DIR"
    rm -rf ~/.cache/aurutils/sync/
}

repotool_add() {
    for i in "${@}"; do
        packages_and_deps="$packages_and_deps $(echo "$i" | aur depends 2>/dev/null | cut -f2 | sort | comm -12 - <(aur pkglist | sort))"
    done

    aurto_sync
    aur sync --no-view --no-confirm --no-ver --database="$DATABASE" -- "${@}"
    aurto_sync
}

repotool_addpkg() {
    repo-add "$DATABASE_FILE" "${@}"
    for pkg in "${@}"; do
        cp "$pkg" "$DATABASE_DIR"
    done
    aurto_sync
}

repotool_remove() {
    repo-remove "$DATABASE_FILE" "${@}"
    for pkg in "${@}"; do
        rm -rf "$DATABASE_DIR"/"$pkg"*.pkg.*
    done
    aurto_sync
}

usage() {
    cat << EOF
usage: repotool.sh (add|addpkg|remove|update)
EOF
}

case "$1" in
    update)
        shift
        repotool_update "$@"
        exit
        ;;
    add)
        shift
        repotool_add "$@"
        exit
        ;;
    addpkg)
        shift
        repotool_addpkg "$@"
        exit
        ;;
    remove)
        shift
        repotool_remove "$@"
        exit
        ;;
    --help)
        usage
        exit
        ;;
    *)
        usage >&2
        exit 1
esac
