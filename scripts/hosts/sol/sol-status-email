#!/usr/bin/env python3
import argparse
import collections
import datetime
import subprocess

import jinja2


SYSTEM_UNITS = {
    'fstrim.service',
    'logrotate.service',
    'man-db.service',
    'shadow.service',
    'systemd-tmpfiles-clean.service',
    'zfs-scrub@storage.service',
    'zpool-check-health-storage.service',
}

USER_UNITS = {
    'git-repo-backup.service',
    'gog-update.service',
    'mbsync.service',
    'sol-fix-permissions.service',
    'sol-update-check.service',
    'sol-update-remotes.service',
    'vdirsyncer.service',
    'wasabi-sync.service',
}


TEMPLATE = """\
<html>
<style>
table, th, td {
  border: 1px solid #ccc;
  border-collapse: collapse;
  white-space: nowrap;
}
table tr:nth-child(even) {
  background-color: #eee;
}
table tr:nth-child(odd) {
  background-color: #fff;
}
table th {
  background-color: #fff;
  color: #000;
  font-weight: bold;
}
th, td {
  padding: 5px;
  text-align: left;
}
table tr.failure {
    background-color: #e56559;
}
</style>
<table>
    {% set columns = ['Id', 'Result', 'ExecMainStartTimestamp'] %}
    <tr>
        {%- for column in columns %}
        <th>{{- column -}}</th>
        {%- endfor %}
    </tr>
    {%- for unit in units | sort(attribute="Id")-%}
    {%- if unit.Result | join('') != 'success' -%}
    <tr class="failure">
    {%- else -%}
    <tr>
    {%- endif -%}
        {%- for column in columns %}
        <td>
        {%- if unit[column] is none %}
        n/a
        {%- elif unit[column] is string %}
        {{- unit[column] -}}
        {% else %}
        {{- unit[column] | join('</br>') -}}
        {% endif -%}
        </td>
        {%- endfor %}
    </tr>
    {% endfor -%}
</table>
</html>"""


def send_html_email(content, subject):
    args = [
        'sol-notification-mailx',
        '-M', 'text/html',
        '-s', subject,
    ]
    subprocess.run(args, input=content, text=True, check=True)


def unit_properties(service, user=False):
    args = [
        'systemctl',
        'show'
    ]
    if user:
        args.append('--user')
    args.append(service)
    proc = subprocess.run(args, check=True, stdout=subprocess.PIPE)
    lines = [
        line.strip()
        for line in proc.stdout.decode().split('\n')
        if line
    ]
    properties = collections.defaultdict(list)
    for line in lines:
        prop, value = line.split('=', 1)
        properties[prop].append(value)
    return {
        p[0] if len(p) == 1 else p: v
        for p, v in dict(properties).items()
    }


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dummy', action='store_true')
    args = parser.parse_args()

    template = jinja2.Template(TEMPLATE)

    units = []
    success = True
    for unit in SYSTEM_UNITS:
        properties = unit_properties(unit)
        units.append(properties)
        if ''.join(properties['Result']) != 'success':
            success = False
    for unit in USER_UNITS:
        properties = unit_properties(unit, user=True)
        units.append(properties)
        if ''.join(properties['Result']) != 'success':
            success = False

    output = template.render(units=units)
    subject = '{} Report {}'.format(
        '✅' if success else '❌',
        datetime.datetime.now().strftime('%Y-%m-%d %H:%M'))

    if args.dummy:
        print(output)
    else:
        send_html_email(output, subject)
        print('Sent')


if __name__ == '__main__':
    main()
