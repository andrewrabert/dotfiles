#!/usr/bin/env python3
import json
import os
import pathlib
import subprocess
import sys

import tabulate

COMPOSE_PROJECT_NAME = 'sol-docker'
SOL_DOCKER_PATH = pathlib.Path('~/src/sol-docker').expanduser()


KILLABLE = [
    'omada-controller',
    'rtl_433_mqtt',
    'wakeonlan',
    'zigbee2mqtt',
    'zwavejs2mqtt',
]


def docker_compose(*args, exec=False, **kwargs):
    env = os.environ.copy()
    env.update({
        'COMPOSE_PROJECT_NAME': COMPOSE_PROJECT_NAME,
        'COMPOSE_FILE': str(SOL_DOCKER_PATH / 'docker-compose.yaml'),
    })
    if exec:
        os.execlpe('docker', 'docker', 'compose', *args, env)
    else:
        return subprocess.run(
            ['docker', 'compose', *args], env=env, **kwargs)


def restart_hass():
    containers = [
        'home-assistant',
        'rtl_433_mqtt',
        'zigbee2mqtt',
        'zwavejs2mqtt',
    ]
    docker_compose('kill', *[c for c in containers if c in KILLABLE])
    docker_compose('rm', '-fs', *containers)
    docker_compose('up', '-d', '--no-recreate', *containers, check=True)


def restart_nginx():
    docker_compose('kill', 'nginx')
    docker_compose('up', '-d', '--no-recreate', 'nginx')


def _command_restart_hass():
    restart_hass()
    restart_nginx()


def _command_restart():
    docker_compose('kill', *KILLABLE)
    docker_compose('rm', '-fs')
    docker_compose('up', '-d', check=True)


def _command_startup():
    docker_compose('down', '--remove-orphans')
    docker_compose('up', '-d', check=True)
    restart_hass()
    restart_nginx()


def _command_status():
    proc = docker_compose('ps', '--all', '--format=json',
                          stdout=subprocess.PIPE)
    data = json.loads(proc.stdout)

    containers = []
    for item in data:
        match item['State']:
            case 'running':
                state = '✅'
            case _:
                state = '❌'
        containers.append([state, item['Service'], item['Status']])
    containers = sorted(containers, key=lambda x: x[1])
    print(tabulate.tabulate(containers))


COMMANDS = {
    'restart-hass': _command_restart_hass,
    'restart-nginx': restart_nginx,
    'restart': _command_restart,
    'startup': _command_startup,
    'status': _command_status,
}


def main():
    args = sys.argv[1:]

    if args:
        if args[0] in COMMANDS:
            COMMANDS[args[0]]()
        else:
            docker_compose(*args, exec=True)
    else:
        _command_status()


if __name__ == '__main__':
    main()
