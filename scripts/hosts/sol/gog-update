#!/usr/bin/env python3
import argparse
import pathlib
import subprocess
import sys

CACHE_DIR = pathlib.Path('~/.cache/lgogdownloader').expanduser()
CONFIG_DIR = pathlib.Path('~/.dotfiles/private/lgogdownloader').expanduser()
GOG_DIR = pathlib.Path('/storage/Games/PC/GOG.com')
IMAGE = 'ghcr.io/nvllsvm/lgogdownloader'


def files_to_mtime(root):
    stack = [root]
    files = {}
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            elif path.is_file():
                files[str(path)] = path.stat().st_mtime
    return files


def run_lgogdownloader(*, pull=True, shell=False):
    args = [
        'podman', 'run',
        '--rm',
        '--name', 'gog-update',
        '-e', 'HOME',
        '-v', f'{GOG_DIR}:/downloads',
        '-v', f'{CACHE_DIR}:/cache',
        '-v', f'{CONFIG_DIR}:/config',
    ]
    if pull:
        args.append('--pull=always')
    if shell:
        args.append('-it')
    args.append(IMAGE)
    if shell:
        args.extend(['--', 'sh', '-l'])

    subprocess.run(args, check=True)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--shell', action='store_true')
    args = parser.parse_args()

    if args.shell:
        run_lgogdownloader(shell=True)
        sys.exit()

    CACHE_DIR.mkdir(parents=True, exist_ok=True)

    before = files_to_mtime(GOG_DIR)
    run_lgogdownloader()
    after = files_to_mtime(GOG_DIR)

    for path in sorted(set([*before.keys(), *after.keys()])):
        try:
            before_mtime = before[path]
        except KeyError:
            print('New:', path)
            continue

        try:
            after_mtime = after[path]
        except KeyError:
            print('Deleted:', path)
            continue

        if before_mtime != after_mtime:
            print('Modified:', path)


if __name__ == '__main__':
    main()
