#!/usr/bin/env python3
import asyncio
import argparse
import pathlib
import tempfile
import json


class ffprobe:
    class ProcessError(Exception):
        """Raised when ffprobe fails to run"""

    @classmethod
    async def stream_info(cls, path):
        proc = await asyncio.create_subprocess_exec(
            'ffprobe', '-v', 'error', '-show_streams',
            '-print_format', 'json', '--', str(path),
            stdout=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode != 0:
            raise cls.ProcessError
        return json.loads(stdout)['streams']


class ffmpeg:
    class ProcessError(Exception):
        """Raised when ffprobe fails to run"""

    @classmethod
    async def remove_duplicates(cls, source, target, avg_frame_rate):
        proc = await asyncio.create_subprocess_exec(
            'ffmpeg', '-i', source,
            '-vf', f'mpdecimate,setpts=N/{round(avg_frame_rate, 3)}/TB',
            target)
        await proc.communicate()
        if proc.returncode != 0:
            raise cls.ProcessError


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', type=pathlib.Path)
    args = parser.parse_args()

    info = await ffprobe.stream_info(args.path)
    print(json.dumps(info, indent=2, sort_keys=True))

    avg_frame_rate = None
    for stream in info:
        avg_frame_rate = stream.get('avg_frame_rate')
        if avg_frame_rate:
            x, y = avg_frame_rate.split('/')
            avg_frame_rate = int(x) / int(y)

    if not avg_frame_rate:
        raise RuntimeError

    with tempfile.NamedTemporaryFile(dir=args.path.parent,
                                     suffix=args.path.suffix) as tmpfile:
        tmpfile = pathlib.Path(tmpfile.name)
        tmpfile.unlink()
        await ffmpeg.remove_duplicates(args.path, tmpfile, avg_frame_rate)
        tmpfile.rename(args.path)
        tmpfile.touch()

if __name__ == '__main__':
    asyncio.run(main())
