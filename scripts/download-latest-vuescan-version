#!/usr/bin/env python3
"""
A friendly tool to download all binaries of the latest version of VueScan.

This tool exists for archival purposes and can be used to ensure one has
the latest version to use with a year-based subscription license.
"""
import argparse
import asyncio
import contextvars
import email.utils
import logging
import pathlib
import string
import tempfile

import async_executor
import httpx


LOGGER = logging.getLogger('download-latest-vuescan-version')

_LOG_CONTEXT = {}


def log_context(key, value):
    global _LOG_CONTEXT

    if key not in _LOG_CONTEXT:
        _LOG_CONTEXT[key] = contextvars.ContextVar(key, default=None)

    _LOG_CONTEXT[key].set(value)


class _LogFormatter(logging.Formatter):
    def format(self, record):
        parts = [super().format(record)]

        for key, cvar in _LOG_CONTEXT.items():
            value = cvar.get()
            if value:
                parts.append(f'[{key} {value}]')

        return ' '.join(parts)


def setup_logging(level=logging.INFO):
    logger = logging.getLogger()
    logger.setLevel(level)

    fmt = _LogFormatter('%(levelname)-8s %(name)s %(message)s')

    sh = logging.StreamHandler()
    sh.setLevel(level)
    sh.setFormatter(fmt)
    logger.addHandler(sh)


class VueScanDownloader:
    _FILENAME_CHARS = {'-', '.', *string.ascii_letters, *string.digits}
    _VALID_SUFFIX = {
        '.deb',
        '.dmg',
        '.exe',
        '.rpm',
        '.tgz',
    }
    VERSION_SERIES = '9.8.'
    DOWNLOAD_LINKS = {
        'ARM 32-bit': [
            'https://www.hamrick.com/files/vuea3298.deb',
            'https://www.hamrick.com/files/vuea3298.rpm',
            'https://www.hamrick.com/files/vuea3298.tgz',
        ],
        'ARM 64-bit': {
            'https://www.hamrick.com/files/vuea6498.deb',
            'https://www.hamrick.com/files/vuea6498.dmg',
            'https://www.hamrick.com/files/vuea6498.exe',
            'https://www.hamrick.com/files/vuea6498.rpm',
            'https://www.hamrick.com/files/vuea6498.tgz',
        },
        'Intel 32-bit': [
            'https://www.hamrick.com/files/vuex3298.deb',
            'https://www.hamrick.com/files/vuex3298.dmg',
            'https://www.hamrick.com/files/vuex3298.exe',
            'https://www.hamrick.com/files/vuex3298.rpm',
            'https://www.hamrick.com/files/vuex3298.tgz',
        ],
        'Intel 64-bit': [
            'https://www.hamrick.com/files/vuex6498.deb',
            'https://www.hamrick.com/files/vuex6498.dmg',
            'https://www.hamrick.com/files/vuex6498.exe',
            'https://www.hamrick.com/files/vuex6498.rpm',
            'https://www.hamrick.com/files/vuex6498.tgz',
        ],
    }
    OCR_LINKS = {
        'Bulgarian': 'https://www.hamrick.com/files/ocr_bg.bin',
        'Catalan': 'https://www.hamrick.com/files/ocr_ca.bin',
        'Chinese (Simplified)': 'https://www.hamrick.com/files/ocr_zh.bin',
        'Chinese (Traditional)': 'https://www.hamrick.com/files/ocr_tw.bin',
        'Czech': 'https://www.hamrick.com/files/ocr_cs.bin',
        'Danish': 'https://www.hamrick.com/files/ocr_da.bin',
        'Dutch': 'https://www.hamrick.com/files/ocr_nl.bin',

        # this is included in vuescan itself. archive anyway
        'English': 'https://www.hamrick.com/files/ocr_en.bin',

        'Finnish': 'https://www.hamrick.com/files/ocr_fi.bin',
        'French': 'https://www.hamrick.com/files/ocr_fr.bin',
        'German': 'https://www.hamrick.com/files/ocr_de.bin',
        'Greek': 'https://www.hamrick.com/files/ocr_el.bin',
        'Hungarian': 'https://www.hamrick.com/files/ocr_hu.bin',
        'Indonesian': 'https://www.hamrick.com/files/ocr_id.bin',
        'Italian': 'https://www.hamrick.com/files/ocr_it.bin',
        'Japanese': 'https://www.hamrick.com/files/ocr_ja.bin',
        'Korean': 'https://www.hamrick.com/files/ocr_ko.bin',
        'Latvian': 'https://www.hamrick.com/files/ocr_lv.bin',
        'Lithuanian': 'https://www.hamrick.com/files/ocr_lt.bin',
        'Norwegian': 'https://www.hamrick.com/files/ocr_no.bin',
        'Polish': 'https://www.hamrick.com/files/ocr_pl.bin',
        'Portuguese': 'https://www.hamrick.com/files/ocr_pt.bin',
        'Romanian': 'https://www.hamrick.com/files/ocr_ro.bin',
        'Russian': 'https://www.hamrick.com/files/ocr_ru.bin',
        'Serbian': 'https://www.hamrick.com/files/ocr_sr.bin',
        'Slovak': 'https://www.hamrick.com/files/ocr_sk.bin',
        'Slovenian': 'https://www.hamrick.com/files/ocr_sl.bin',
        'Spanish': 'https://www.hamrick.com/files/ocr_es.bin',
        'Swedish': 'https://www.hamrick.com/files/ocr_sv.bin',
        'Tagalog': 'https://www.hamrick.com/files/ocr_tl.bin',
        'Thai': 'https://www.hamrick.com/files/ocr_th.bin',
        'Turkish': 'https://www.hamrick.com/files/ocr_tr.bin',
        'Ukrainian': 'https://www.hamrick.com/files/ocr_uk.bin',
        'Vietnamese': 'https://www.hamrick.com/files/ocr_vi.bin',
    }

    def __init__(self, path, max_concurrent=None):
        self.path = path
        self.max_concurrent = max_concurrent
        self.client = httpx.AsyncClient()
        self.client.headers['User-Agent'] = 'download-latest-version-version (https://github.com/nvllsvm/dotfiles/blob/master/scripts/download-latest-vuescan-version)'

    async def get_latest_version(self):
        response = await self.client.get(
            'http://static.hamrick.com/vuescan_version.txt')
        response.raise_for_status()
        return response.text.strip()

    async def download_all(self):
        latest_version = await self.get_latest_version()
        LOGGER.info('Latest version: %s', latest_version)
        if not latest_version.startswith(self.VERSION_SERIES):
            raise NotImplementedError(f'unsupported version: {latest_version}')

        executor = async_executor.AsyncExecutor(
            max_concurrent=self.max_concurrent)
        for architecture, urls in self.DOWNLOAD_LINKS.items():
            for url in urls:
                executor.submit(self._download, url, latest_version,
                                architecture)
        if not executor:
            print('Nothing to do: already downloaded')
            return
        async for task in executor:
            task.result()

        for language, url in self.OCR_LINKS.items():
            executor.submit(self._download_ocr, url, language)
        async for task in executor:
            task.result()

    async def _download(self, url, version, architecture):
        log_context('architecture', architecture)
        log_context('url', url)

        LOGGER.info('Downloading')
        async with self.client.stream('GET', url, follow_redirects=True) as response:
            try:
                response.raise_for_status()
            except Exception as e:
                LOGGER.exception(e)
                raise

            response_filename = response.headers['content-disposition']\
                .removeprefix('attachment; filename="')\
                .removesuffix('";')
            assert not (set(response_filename) - self._FILENAME_CHARS)

            parent_path = self.path / f'VueScan {version}' / architecture
            dest = parent_path / response_filename
            assert dest.suffix in self._VALID_SUFFIX
            assert dest.stem.endswith(f'-{version}')

            if dest.is_file():
                LOGGER.info('Already downloaded')
                return

            dest.parent.mkdir(exist_ok=True, parents=True)
            safe_write(dest, await response.aread())
            LOGGER.info('Download complete')

    async def _download_ocr(self, url, language):
        LOGGER.info('Downloading OCR')
        parent_path = self.path / 'OCR' / language
        async with self.client.stream('GET', url, follow_redirects=True) as response:
            try:
                response.raise_for_status()
            except Exception as e:
                LOGGER.exception(e)
                raise

            last_modified = email.utils\
                .parsedate_to_datetime(response.headers['Last-Modified'])\
                .isoformat()

            dest = parent_path / last_modified / url.split('/')[-1]
            if dest.is_file():
                LOGGER.info('Already downloaded')
                return

            dest.parent.mkdir(exist_ok=True, parents=True)
            safe_write(dest, await response.aread())
            LOGGER.info('Download complete')


def safe_write(path, data):
    path = pathlib.Path(path)
    if isinstance(data, str):
        data = data.encode()
    with tempfile.NamedTemporaryFile(delete=False, dir=path.parent) as handle:
        temp_path = pathlib.Path(handle.name)
        try:
            temp_path.write_bytes(data)
            temp_path.rename(path)
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--max-concurrent', type=int, default=2,
                        help='(default: %(default)s)')
    parser.add_argument('--dest', type=pathlib.Path,
                        default=pathlib.Path('/storage/Software/Vuescan/'),
                        help='(default: %(default)s)')
    parser.add_argument('--verbose', action='store_true')
    args = parser.parse_args()

    setup_logging(level=logging.DEBUG if args.verbose else logging.INFO)
    if not args.verbose:
        logging.getLogger('httpx').setLevel(logging.WARNING)

    client = VueScanDownloader(
        path=args.dest,
        max_concurrent=args.max_concurrent)

    await client.download_all()


if __name__ == '__main__':
    asyncio.run(main())
