#!/usr/bin/env python3
import argparse
import pathlib
import shutil


def all_files(root):
    stack = [root]
    paths = set()
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            else:
                paths.add(path)
    return paths


def _args_path(value):
    path = pathlib.Path(value)
    if not path.is_dir():
        raise ValueError('path must be a directory')
    return path.absolute()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dry-run', action='store_true')
    parser.add_argument('source', type=_args_path)
    parser.add_argument('target', type=_args_path)
    args = parser.parse_args()

    newer = set()
    for path in sorted(all_files(args.source)):
        path = path.relative_to(args.source)
        source = args.source.joinpath(path)
        target = args.target.joinpath(path)
        if target.is_dir():
            raise RuntimeError(
                f'expected a file, but found a directory ({target})')
        elif not target.exists():
            newer.add(path)
        elif source.stat().st_mtime > target.stat().st_mtime:
            newer.add(path)

    for path in sorted(newer):
        print(f'{path}')
        source = args.source.joinpath(path)
        target = args.target.joinpath(path)

        target.parent.mkdir(exist_ok=True, parents=True)
        if not args.dry_run:
            shutil.copy2(source, target)


if __name__ == '__main__':
    main()
