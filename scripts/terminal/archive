#!/usr/bin/env python3
import argparse
import asyncio
import contextlib
import os
import pathlib
import shutil
import sys
import tempfile


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def _all_paths(root):
    stack = [root]
    paths = {root}

    if root.is_dir() and not root.is_symlink():
        while stack:
            for path in stack.pop().iterdir():
                paths.add(path)
                if path.is_dir() and not path.is_symlink():
                    stack.append(path)
    # needed for deterministic archives ex. tar
    return sorted(paths)


async def create_zip(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = sorted(
            path.relative_to(cwd)
            for path in _all_paths(path)
            if path != cwd
        )
    else:
        cwd = path.parent
        paths = (path.relative_to(cwd),)

    level = '-0' if fast else '-9'

    # zip cli thinks existing file means
    dest.unlink()

    proc = await asyncio.create_subprocess_exec(
        'zip',
        level,
        '-nw',  # treat wildcards as regular characters
        '-X',  # exclude extra file attributes, prevents EpubCheck error
        '-@',  # read paths from stdin
        '-q',  # quiet
        dest,
        cwd=cwd,
        stdin=asyncio.subprocess.PIPE)
    proc.stdin.write(b'\n'.join(bytes(p) for p in paths))
    proc.stdin.close()
    await proc.wait()
    if proc.returncode != 0:
        raise RuntimeError('exit code {proc.returncode}')
    if not fast:
        await optimize_zip(dest)


async def create_7z(path, dest, fast=False):
    # 7z barfs on existing file
    dest.unlink()

    level = '-mx=0' if fast else '-mx=9'

    proc = await asyncio.create_subprocess_exec(
        '7zz',
        'a',  # create archive
        level,
        '--', dest, path,
        stdout=asyncio.subprocess.PIPE)
    await proc.wait()
    if proc.returncode != 0:
        raise RuntimeError('exit code {proc.returncode}')


async def create_epub(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = sorted(
            path.relative_to(cwd)
            for path in _all_paths(path)
            if path != cwd
        )
    else:
        raise RuntimeError('epub requires source directory')

    level = '-0' if fast else '-9'

    # zip cli thinks existing file means
    dest.unlink()

    def _path_rank(x):
        x = str(x)
        if x == 'mimetype':
            rank = 0
        elif x.startswith('META-INF/') or x == 'META-INF':
            rank = 1
        elif x.startswith('OEBPS/') or x == 'OEBPS':
            rank = 2
        else:
            rank = 3
        return rank, x

    paths = sorted(paths, key=_path_rank)

    proc = await asyncio.create_subprocess_exec(
        'zip',
        level,
        '-nw',  # treat wildcards as regular characters
        '-X',  # exclude extra file attributes, prevents EpubCheck error
        '-@',  # read paths from stdin
        '-q',  # quiet
        dest,
        cwd=cwd,
        stdin=asyncio.subprocess.PIPE)
    proc.stdin.write(b'\n'.join(bytes(p) for p in paths))
    proc.stdin.close()
    await proc.wait()
    if proc.returncode != 0:
        raise RuntimeError('exit code {proc.returncode}')
    if not fast:
        await optimize_zip(dest)


async def create_zstd(path, dest, fast=False):
    if path.is_dir():
        raise RuntimeError

    level = '-1' if fast else '-22'

    zstd_proc = await asyncio.create_subprocess_exec(
        'zstd', '--quiet', '-f', '-T0', '--ultra', level, '-o', dest,
        '--', path)
    await zstd_proc.wait()
    assert zstd_proc.returncode == 0


async def create_tar(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = _all_paths(path)
    else:
        cwd = path.parent
        paths = (path,)

    tar_proc = await asyncio.create_subprocess_exec(
        'tar', 'cf', dest, '-C', cwd, '--no-recursion',
        '--verbatim-files-from', '--null', '-T', '-',
        stdin=asyncio.subprocess.PIPE)

    tar_proc.stdin.write(b'\0'.join(
        bytes(p.relative_to(cwd))
        for p in paths
        if p != cwd
    ))
    tar_proc.stdin.close()

    await asyncio.gather(tar_proc.wait())
    assert tar_proc.returncode == 0


async def create_tar_gz(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = _all_paths(path)
    else:
        cwd = path.parent
        paths = (path,)

    # TODO specify gzip compression level
    tar_proc = await asyncio.create_subprocess_exec(
        'tar', 'czf', dest, '-C', cwd, '--no-recursion',
        '--verbatim-files-from', '--null', '-T', '-',
        stdin=asyncio.subprocess.PIPE)

    tar_proc.stdin.write(b'\0'.join(
        bytes(p.relative_to(cwd))
        for p in paths
        if p != cwd
    ))
    tar_proc.stdin.close()

    await tar_proc.wait()
    assert tar_proc.returncode == 0


async def create_tar_xz(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = _all_paths(path)
    else:
        cwd = path.parent
        paths = (path,)

    # TODO specify xz compression level
    tar_proc = await asyncio.create_subprocess_exec(
        'tar', 'czf', dest, '-C', cwd, '--no-recursion',
        '--verbatim-files-from', '--null', '-T', '-',
        stdin=asyncio.subprocess.PIPE)

    tar_proc.stdin.write(b'\0'.join(
        bytes(p.relative_to(cwd))
        for p in paths
        if p != cwd
    ))
    tar_proc.stdin.close()

    await tar_proc.wait()
    assert tar_proc.returncode == 0


async def create_tar_zstd(path, dest, fast=False):
    if path.is_dir():
        cwd = path
        paths = _all_paths(path)
    else:
        cwd = path.parent
        paths = (path,)

    level = '-1' if fast else '-22'

    read, write = os.pipe()

    tar_proc = await asyncio.create_subprocess_exec(
        'tar', 'cf', '-', '-C', cwd, '--no-recursion',
        '--verbatim-files-from', '--null', '-T', '-',
        stdin=asyncio.subprocess.PIPE,
        stdout=write)
    os.close(write)

    zstd_proc = await asyncio.create_subprocess_exec(
        'zstd', '--quiet', '-f', '-T0', '--ultra', level, '-o', dest,
        stdin=read)
    os.close(read)

    tar_proc.stdin.write(b'\0'.join(
        bytes(p.relative_to(cwd))
        for p in paths
        if p != cwd
    ))
    tar_proc.stdin.close()

    await asyncio.gather(tar_proc.wait(), zstd_proc.wait())
    assert tar_proc.returncode == zstd_proc.returncode == 0


async def optimize_zip(path):
    proc = await asyncio.create_subprocess_exec(
        'advzip', '--recompress', '--shrink-insane', '--quiet', path)
    await proc.wait()
    assert proc.returncode == 0


_formats = {
    '7z': {
        'func': create_7z,
        'suffix': '.7z',
    },
    'epub': {
        'func': create_epub,
        'suffix': '.epub',
    },
    'tar': {
        'func': create_tar,
        'suffix': '.tar'
    },
    'tar-gz': {
        'func': create_tar_gz,
        'suffix': '.tar.gz'
    },
    'tar-xz': {
        'func': create_tar_xz,
        'suffix': '.tar.xz'
    },
    'tar-zstd': {
        'func': create_tar_zstd,
        'suffix': '.tar.zst'
    },
    'zip': {
        'func': create_zip,
        'suffix': '.zip',
    },
    'zstd': {
        'func': create_zstd,
        'suffix': '.zst'
    },
}


def _build_dest(source, suffix):
    increment = 0
    while True:
        dest = pathlib.Path(
            ''.join([
                source.name,
                f'_{increment}' if increment else '',
                suffix])).absolute()

        if not dest.exists():
            return dest.absolute()

        increment += 1


async def process(source, archive_format, remove, fast=False):
    formats = _formats[archive_format]

    source = source.absolute()
    suffix = formats['suffix']

    dest = _build_dest(source, suffix)

    before = sum(path.stat().st_size for path in _all_paths(source))
    with TempPath(dir=dest.parent, suffix=suffix) as tmp:
        await formats['func'](source, tmp, fast)
        tmp.rename(dest)
    after = dest.stat().st_size

    if remove:
        if source.is_dir():
            shutil.rmtree(source)
        else:
            source.unlink()

    return dest, before, after


def _num_procs(value):
    value = int(value)
    if value == 0:
        return os.cpu_count()
    elif value > 0:
        return value
    else:
        raise argparse.ArgumentError('invalid num_procs')


class AsyncExecutor:
    def __init__(self, max_pending=None):
        self.max_pending = \
            os.cpu_count() if max_pending is None else max_pending
        self._queued = []
        self._pending = set()

    def submit(self, func, *args, **kwargs):
        self._queued.append((func, args, kwargs))
        try:
            asyncio.get_running_loop()
        except RuntimeError:
            pass
        else:
            self._fill()

    async def as_completed(self):
        while self._queued or self._pending:
            self._fill()

            done, self._pending = await asyncio.wait(
                self._pending, return_when=asyncio.FIRST_COMPLETED)

            for result in done:
                yield result

    def _fill(self):
        for _ in range(self.max_pending - len(self._pending)):
            if not self._queued:
                return
            func, args, kwargs = self._queued.pop()
            self._pending.add(asyncio.create_task(func(*args, **kwargs)))


class SizeDiffPrinter:
    def __init__(self):
        self._before_total = 0
        self._after_total = 0
        self._printed = False

    @staticmethod
    def format_diff(before, after):
        diff = ((before - after) / before) * 100
        if diff:
            diff = '{:.2f}'.format(diff)
            if not float(diff):
                diff = f'<{diff}'
        return diff

    @staticmethod
    def sizeof_fmt(num):
        for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:
            if abs(num) < 1024.0:
                break
            num /= 1024.0
        return f'{num:.1f}{unit}'

    def print(self, before, after, name):
        self._printed = True
        self._before_total += before
        self._after_total += after
        diff = self.format_diff(before, after)

        s = f'{diff:>6}%' if diff else 7 * '-'
        print(f'{s}  {name}')

    def print_total(self):
        if self._printed:
            if diff := self.format_diff(self._before_total, self._after_total):
                fmt = self.sizeof_fmt(self._before_total - self._after_total)
                print(f'Total: {diff}% ({fmt})')
            else:
                print('Total: -')


def main():
    parser = argparse.ArgumentParser(
        usage='%(prog)s [OPTIONS] source [source ...]')

    group_format = parser.add_argument_group('format')
    parser.add_argument('--rm', default=False, action='store_true',
                        help='remove source after success')
    group_format.add_argument(
        '-f', metavar='FORMAT', choices=_formats,
        dest='format', default='tar-zstd',
        help='archive format: %(choices)s (default: %(default)s)')
    parser.add_argument('-n', metavar='NUM', dest='num_procs',
                        type=_num_procs, default=1,
                        help='number of parallel jobs (default: %(default)s)')
    group_format.add_argument(
        '--fast', default=False, action='store_true',
        help='increase archiving speed at the expense of compression')
    parser.add_argument('source', type=lambda p: pathlib.Path(p).absolute(),
                        nargs='+')
    args = parser.parse_args()

    async def run(args):
        has_error = False

        executor = AsyncExecutor(max_pending=args.num_procs)

        sources = []
        for source in args.source:
            if source in sources:
                continue
            else:
                sources.append(source)

            executor.submit(process, source, args.format, args.rm, args.fast)

        size_diff_printer = SizeDiffPrinter()
        async for future in executor.as_completed():
            try:
                dest, before, after = future.result()
            except FileExistsError as e:
                print(f'error: file exists {e}', file=sys.stderr)
                has_error = True
            except Exception as e:
                print(e, file=sys.stderr)
            else:
                size_diff_printer.print(before, after, dest)
        size_diff_printer.print_total()
        return has_error

    sys.exit(1 if asyncio.run(run(args)) else 0)


if __name__ == '__main__':
    main()
