#!/usr/bin/env sh
set -eu

YELLOW='\033[1;33m'
RESET_COLOR='\033[0m'

run_script() {
    printf '%bRunning %s ...%b\n' "$YELLOW" "${1##*/}" "$RESET_COLOR"
    "$@"
}

show_help() {
    cat << EOF
usage: full-update [script ...]

    --help      show help and exit
EOF
}

BREW_GNUBIN='/opt/homebrew/opt/coreutils/libexec/gnubin'
if [ -d "$BREW_GNUBIN" ]; then
	export PATH="$BREW_GNUBIN:$PATH"
fi
while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            show_help
            exit
            ;;
        *)
            script_name="$1"
            shift
            for d in "$DOTFILES" $(env | grep ^DOTFILES_ | sed 's/.*=//g' | sort); do
                script="${d}/full-update/${script_name}"
                if [ -f "$script" ]; then
                    run_script "$script" "$@"
                fi
            done
            exit
            ;;
    esac
done

process() {
    if ! [ -d "$1"/full-update ]; then
        return
    fi
    printf '%bfull-update - %s - start %s%b\n' "$YELLOW" "$1" "$(date)" "$RESET_COLOR"

    # update dotfiles to ensure full-update/* is up-to-date
    cmd="$1"/full-update/00-dotfiles
    if [ -f "$cmd" ]; then
        run_script "$cmd" --system
    fi

    for cmd in "$1"/full-update/*; do
        case "$cmd" in
            */00-dotfiles)
                # already run
                ;;
            *)
                run_script "$cmd"
                ;;
        esac
    done
    printf '%bfull-update - %s - done %s%b\n' "$YELLOW" "$1" "$(date)" "$RESET_COLOR"
}

process "$DOTFILES"

for d in $(env | grep ^DOTFILES_ | sort); do
    process "$(echo "$d" | cut -d = -f 2)"
done
