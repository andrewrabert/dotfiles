#!/usr/bin/env python3
# TODO add password specification
import argparse
import pathlib
import subprocess
import sys


def extract(path, parent=None, child=False):
    dest = _build_dest(path, parent, child)
    if _is_nested_tar(path):
        _extract_nested_tar(path, dest)
    else:
        _extract_file(path, dest)


def _is_password_protected(path):
    proc = subprocess.run(
        ['7z', 'l', '-slt', path],
        stdout=subprocess.PIPE,
        check=True
    )
    return 'Encrypted = +' in proc.stdout.decode().split('\n')


def _build_dest(path, parent, child):
    if parent is None:
        parent = path.parent
    parent = parent.absolute()

    if child:
        if len(path.suffixes) > 1 and path.suffixes[-2].lower() == '.tar':
            dest = parent / pathlib.Path(path.stem).stem
        else:
            dest = parent / path.with_name(path.stem)

        while dest.exists():
            dest = dest.with_name(f'{dest.name}_')
    else:
        dest = parent
    return dest


def _is_nested_tar(path):
    if len(path.suffixes) > 1 and path.suffixes[-2].lower() == '.tar':
        return True
    elif path.suffix.lower() == '.tgz':
        return True
    else:
        return False


def _extract_nested_tar(path, dest):
    extract_1 = subprocess.Popen(
        ['7z', 'x', '-so', '--', str(path)],
        stdout=subprocess.PIPE,
    )
    subprocess.run(
        ['7z', 'x', '-aoa', '-si', '-ttar', f'-o{dest}'],
        stdin=extract_1.stdout,
        check=True
    )
    extract_1.wait()
    if extract_1.returncode:
        raise subprocess.CalledProcessError(
            extract_1.returncode,
            extract_1.args
        )


def _extract_file(path, dest):
    subprocess.run(
        ['7z', 'x', '-spe', f'-o{dest}', '--', str(path)],
        check=True
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p', dest='parent', metavar='DIR', type=pathlib.Path,
        help='parent directory to extract to')
    parser.add_argument(
        '-c', dest='child', action='store_true',
        help='extract each archive to a unique child directory')
    parser.add_argument(
        '--rm', action='store_true',
        help='remove archive after successful extraction')
    parser.add_argument('archive', nargs='+', type=pathlib.Path)
    args = parser.parse_args()

    for path in args.archive:
        if _is_password_protected(path):
            print('password protected archive', file=sys.stderr)
            parser.exit(1)
        extract(path, args.parent, args.child)
        if args.rm:
            path.unlink()


if __name__ == '__main__':
    main()
