#!/usr/bin/env python
import argparse
import collections
import json
import os
import pathlib


def find_executables(directory):
    executables = set()
    for path in directory.iterdir():
        try:
            if path.is_file() and os.access(path, os.X_OK):
                executables.add(path)
        except PermissionError:
            pass
    return executables


def _pretty_json(data):
    return json.dumps(data, indent=2, sort_keys=True)


def main():
    parser = argparse.ArgumentParser(description="list executables in path")
    mutex_group = parser.add_mutually_exclusive_group()
    mutex_group.add_argument(
        "-c",
        dest="group_command",
        action="store_true",
        help=(
            "group by command. directories are ordered as they appear in the path list"
        ),
    )
    mutex_group.add_argument(
        "-d", dest="group_directory", action="store_true", help="group by directory"
    )
    parser.add_argument(
        "path",
        nargs="*",
        default=os.get_exec_path(),
        help="paths to search (default: $PATH)",
    )
    args = parser.parse_args()

    executables = []
    for path in (pathlib.Path(p) for p in args.path):
        if path.is_dir():
            executables.extend(find_executables(path))

    if args.group_command:
        result = collections.defaultdict(list)
        for path in executables:
            result[path.name].append(str(path.parent))
        print(_pretty_json(result))

    elif args.group_directory:
        result = collections.defaultdict(list)
        for path in executables:
            result[str(path.parent)].append(str(path.name))
        for contents in result.values():
            contents.sort()
        print(_pretty_json(result))

    else:
        if executables:
            print("\n".join(sorted(set(str(path.name) for path in executables))))


if __name__ == "__main__":
    main()
