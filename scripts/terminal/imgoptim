#!/usr/bin/env python
import argparse
import asyncio
import contextlib
import os
import pathlib
import signal
import subprocess
import sys
import tempfile


@contextlib.contextmanager
def TempPath(**kwargs):
    """Wrapper around tempfile.NamedTemporaryFile which returns a path object

    Unlike tempfile.NamedTemporaryFile, the FileNotFoundError exception is not
    raised if the file is deleted before the context closes.

    :rtype: pathlib.Path
    """
    with tempfile.NamedTemporaryFile(**kwargs, delete=False) as tmp:
        temp_path = pathlib.Path(tmp.name)
        try:
            yield temp_path
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def all_files(root):
    stack = [root]
    files = set()
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            else:
                files.add(path)
    return sorted(files)


async def optimize_jpeg(source, dest, strip=False):
    args = [
        'jpegoptim', '--quiet', '--all-progressive',
        '--force', '--stdout',
    ]

    if strip:
        args.append('--strip-all')
    else:
        args.append('--strip-none')

    args.extend(['--', source])
    proc = await asyncio.create_subprocess_exec(
        *args,
        stdout=subprocess.PIPE)
    stdout, _ = await proc.communicate()
    if proc.returncode != 0:
        raise SubprocessError

    dest.write_bytes(stdout)

    # lossless rotation is not always possible - use EXIF instead
    if strip:
        orientation = await exiv2.get_orientation(source)

        # 1 is the default, "correct" orientation
        if orientation and orientation != 1:
            await exiv2.set_orientation(dest, orientation)


async def optimize_png(source, dest, strip=False):
    args = [
        'oxipng', '--quiet', '--zopfli', '--opt', 'max', '--out', dest,
    ]

    if strip:
        args.extend(['--strip', 'safe'])

    args.extend(['--', source])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.wait()
    if proc.returncode != 0:
        raise SubprocessError


async def optimize_gif(source, dest, strip=False):
    args = [
        'gifsicle', '--output=-', '--same-loopcount', '--same-delay',
        '--no-warnings', '--optimize=3', '--output', dest,
    ]

    if strip:
        args.extend(['--no-comments', '--no-names', '--no-extensions'])

    args.extend(['--', source])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.wait()
    if proc.returncode != 0:
        raise SubprocessError


class exiv2:

    EXIF_ORIENTATION = {
        'top, left': 1,
        'top, right': 2,
        'bottom, right': 3,
        'bottom, left': 4,
        'left, top': 5,
        'right, top': 6,
        'right, bottom': 7,
        'left, bottom': 8,
    }

    @classmethod
    async def get_orientation(cls, path):
        proc = await asyncio.create_subprocess_exec(
            'exiv2', '--key', 'Exif.Image.Orientation', '--', path,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE)
        stdout, stderr = await proc.communicate()

        # Exif.Image.Orientation not present in file 
        if proc.returncode == 1 and not stderr:
            return None
        elif proc.returncode != 0:
            raise SubprocessError

        _, _, _, value = stdout.decode().split(maxsplit=3)
        value = value.strip()
        if value != '(0)':
            return cls.EXIF_ORIENTATION[value.strip()]

    @staticmethod
    async def set_orientation(path, orientation):
        proc = await asyncio.create_subprocess_exec(
            'exiv2', '--Modify', f'set Exif.Image.Orientation {orientation}',
            'mo', path,
            stdout=subprocess.PIPE)
        result, _ = await proc.communicate()
        if proc.returncode != 0:
            raise SubprocessError


class SubprocessError(Exception):
    """Raised when an error occurs in a subprocess"""


_MIME_OPTIMIZATIONS = {
    'image/gif': optimize_gif,
    'image/jpeg': optimize_jpeg,
    'image/png': optimize_png,
}


def determine_mime(path):
    # roughly 2.5x faster than using libmagic
    with open(path, 'rb') as f:
        start = f.read(8)
        if start == b'\x89PNG\r\n\x1a\n':
            return 'image/png'
        elif start[0:2] == b'\xff\xd8':
            f.seek(-2, os.SEEK_END)
            if f.read(2) == b'\xff\xd9':
                return 'image/jpeg'
        elif start[0:6] in (b'GIF87a', b'GIF89a'):
            return 'image/gif'


def format_diff(before, after):
    diff = ((before - after) / before) * 100
    if diff:
        diff = '{:.2f}'.format(diff)
        if not float(diff):
            diff = f'<{diff}'
    return diff


def sizeof_fmt(num):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:
        if abs(num) < 1024.0:
            return f'{num:.1f}{unit}'
        num /= 1024.0
    raise RuntimeError


def _sigint_handler(*_):
    sys.exit(130)


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--strip', action='store_true')
    parser.add_argument(
        '--mime', action='append', default=[],
        choices=['image/gif', 'image/jpeg', 'image/png'],
        help='mimetypes to process. may be specified more than once.')
    parser.add_argument('path', nargs='+', type=pathlib.Path)
    args = parser.parse_args()

    files = set()
    for path in args.path:
        if path.is_file():
            files.add(path)
        else:
            files.update(all_files(path))

    before_total = 0
    after_total = 0
    for f in sorted(files):
        try:
            mimetype = determine_mime(f)
        except (FileNotFoundError, IsADirectoryError):
            # broken symlink can cause this
            continue

        if args.mime and mimetype not in args.mime:
            continue

        if func := _MIME_OPTIMIZATIONS.get(mimetype):
            before = f.stat().st_size
            before_total += before

            with TempPath(dir=f.parent) as temp_path:
                await func(f, temp_path, strip=args.strip)

                after = temp_path.stat().st_size

                if after < before:
                    after_total += after
                    temp_path.rename(f)
                    diff = format_diff(before, after)
                else:
                    after_total += before
                    diff = None

            s = f'{diff:>6}%' if diff else 7 * '-'
            print(f'{s}  {f}')

    if before_total:
        if diff := format_diff(before_total, after_total):
            print(f'Total: {diff}% ({sizeof_fmt(before_total - after_total)})')
        else:
            print('Total: -')


if __name__ == '__main__':
    signal.signal(signal.SIGINT, _sigint_handler)
    asyncio.run(main())
