#!/usr/bin/env python3
import os
import pathlib
import socket


def find_executables(directory):
    executables = set()
    for path in directory.iterdir():
        try:
            if path.is_file() and os.access(path, os.X_OK):
                executables.add(path)
        except PermissionError:
            pass
    return executables


def main():
    dotfiles = pathlib.Path(os.environ['DOTFILES'])
    try:
        dotfiles_private = pathlib.Path(os.environ['DOTFILES_PRIVATE'])
    except KeyError:
        dotfiles_private = None

    dest = dotfiles / '.bin'
    dest.mkdir(exist_ok=True)

    all_commands = set()
    for path in os.environ['PATH'].split(':'):
        path = pathlib.Path(path)
        if not path.is_dir():
            continue
        if path == dest:
            continue
        all_commands.update(
            p.name
            for p in find_executables(path)
        )

    hostname = socket.gethostname()

    sources = [
        dotfiles / 'scripts' / 'hosts' / hostname,
    ]
    if dotfiles_private:
        sources.append(dotfiles_private / 'scripts' / 'hosts' / hostname)

    for path in (dotfiles / 'scripts' / 'commands').iterdir():
        if path.name in all_commands:
            sources.append(path)

    sources.append(dotfiles / 'scripts' / 'terminal')
    if dotfiles_private:
        sources.append(dotfiles_private / 'scripts' / 'terminal')

    match hostname:
        case 'mars':
            sources.extend([
                dotfiles / 'scripts' / 'media'
            ])
        case 'phobos':
            sources.extend([
                dotfiles / 'scripts' / 'media'
            ])
        case 'sol':
            sources.append(dotfiles / 'scripts' / 'media')

    sources = [
        path
        for path in sources
        if path.is_dir()
    ]

    links = {}
    for source in sources:
        if not source.is_dir():
            continue
        for path in source.iterdir():
            name = path.name
            if path.is_symlink():
                path = path.readlink()
                if not path.is_absolute():
                    path = source / path
            links[name] = path.absolute()

    for path in dest.iterdir():
        if path.name not in links:
            path.unlink()

    for name, path in links.items():
        target = dest / name
        if target.exists() or target.is_symlink():
            if target.is_symlink() and target.readlink() == path:
                continue
            target.unlink()
        target.symlink_to(path)


if __name__ == '__main__':
    main()
