#!/usr/bin/env python
import argparse
import string

_ALLOWED_CHARS = set((*string.digits, *string.ascii_letters, '.', ' '))


BYTE_MAGNITUDE = {
    1000: ['B', 'KB',  'MB',  'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
    1024: ['B', 'KiB', 'MiB',  'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],
}


METRIC_DISTANCE_TO_MM = {
    'mm': 1,
    'cm': 10,
    'm': 100,
    'km': 100000,
}


IMPERIAL_DISTANCE_TO_IN = {
    'in': 1,
    'ft': 12,
    'yd': 36,
    'mile': 63360,
}

TEMPERATURE_UNITS = {
    'c',
    'k',
    'f',
}

IN_TO_MM = 25.4


DISTANCE_UNITS = set((*METRIC_DISTANCE_TO_MM, *IMPERIAL_DISTANCE_TO_IN))


UNITS = set((*DISTANCE_UNITS, *TEMPERATURE_UNITS))


def temperature_to_k(unit, value):
    match unit:
        case 'k':
            return value
        case 'c':
            return value + 273.15
        case 'f':
            return (value + 459.67) * (5/9)


def metric_to_mm(unit, value):
    match unit:
        case 'mm':
            return value
        case 'cm':
            return value * 10
        case 'm':
            return value * 100
        case 'km':
            return value * 100000
        case _:
            raise NotImplementedError(f'unsupported unit: {unit}')


def imperial_to_in(unit, value):
    match unit:
        case 'in':
            return value
        case 'ft':
            return value * 12
        case 'yd':
            return value * 36
        case 'mile':
            return value * 63360


def k_to_c(value):
    return value - 273.15


def k_to_f(value):
    return (value / (5/9)) - 459.67


def mm_to_in(value):
    return value / IN_TO_MM


def in_to_mm(value):
    return value * IN_TO_MM


def _parse_from(value):
    value = value.replace(' ', '')
    if set(value) - _ALLOWED_CHARS:
        raise ValueError('unsupported chars in from value')

    unit = []
    for char in reversed(value.lower()):
        if char in string.ascii_letters:
            unit.append(char)
        else:
            break

    unit = ''.join(reversed(unit))
    num = float(value[:-(len(unit))])
    return _normalize_unit(unit, num)


def _parse_to(value):
    if value not in UNITS:
        raise ValueError('unsupported unit')
    return value


def _normalize_unit(unit, value):
    if unit in METRIC_DISTANCE_TO_MM:
        return value * METRIC_DISTANCE_TO_MM[unit], 'mm',
    elif unit in IMPERIAL_DISTANCE_TO_IN:
        return value * IMPERIAL_DISTANCE_TO_IN[unit], 'in'
    elif unit in TEMPERATURE_UNITS:
        return temperature_to_k(unit, value), 'k'
    else:
        raise NotImplementedError(unit)


class ConvertError(Exception):
    def __init__(self, from_unit, to_unit):
        super().__init__(f'Cannot convert from "{from_unit}" to "{to_unit}"')


def _convert(value, from_unit, to_unit):
    if from_unit in METRIC_DISTANCE_TO_MM:
        if to_unit in IMPERIAL_DISTANCE_TO_IN:
            return mm_to_in(value) / IMPERIAL_DISTANCE_TO_IN[to_unit]
        elif to_unit in METRIC_DISTANCE_TO_MM:
            return value / METRIC_DISTANCE_TO_MM[to_unit]
        else:
            raise ConvertError(from_unit, to_unit)
    elif from_unit in IMPERIAL_DISTANCE_TO_IN:
        if to_unit in METRIC_DISTANCE_TO_MM:
            return in_to_mm(value) / METRIC_DISTANCE_TO_MM[to_unit]
        elif to_unit in IMPERIAL_DISTANCE_TO_IN:
            return value / IMPERIAL_DISTANCE_TO_IN[to_unit]
        else:
            raise ConvertError(from_unit, to_unit)
    elif from_unit in TEMPERATURE_UNITS:
        match to_unit:
            case 'k':
                return value
            case 'c':
                return k_to_c(value)
            case 'f':
                return k_to_f(value)
            case _:
                raise ConvertError(from_unit, to_unit)
    else:
        raise ConvertError(from_unit, to_unit)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('to_unit')
    parser.add_argument('from_value', nargs='+')
    args = parser.parse_args()

    for value in args.from_value:
        from_num, from_unit = _parse_from(value)
        to_unit = _parse_to(args.to_unit)
        result = _convert(from_num, from_unit, to_unit)
        print(round(result, 6))


if __name__ == '__main__':
    main()
