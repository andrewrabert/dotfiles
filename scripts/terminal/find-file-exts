#!/usr/bin/env python3
import argparse
import collections
import json
import pathlib


def _default_json(obj):
    if isinstance(obj, set):
        return sorted(obj)
    elif isinstance(obj, pathlib.Path):
        return str(obj)
    elif hasattr(obj, "isoformat"):
        return obj.isoformat()
    else:
        # value will be null without this
        raise TypeError


def pretty_json(data):
    return json.dumps(
        data, indent=2, sort_keys=True, default=_default_json, ensure_ascii=False
    )


def all_files(*paths):
    stack = []
    files = set()
    for path in paths:
        if not path.exists():
            raise ValueError(f"path does not exist: {path}")
        elif path.is_file():
            files.add(path)
        elif path.is_dir():
            stack.append(path)
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            else:
                files.add(path)
    return sorted(files)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--ignore-case", action="store_true")
    output_mutex = parser.add_mutually_exclusive_group()
    output_mutex.add_argument("-c", "--count", action="store_true")
    output_mutex.add_argument("-j", "--json", action="store_true")
    parser.add_argument("path", type=pathlib.Path, nargs="*")
    args = parser.parse_args()

    files = set()
    for path in set(args.path or (pathlib.Path(),)):
        files.update(all_files(path))

    suffix_paths = collections.defaultdict(set)
    for path in files:
        suffix = path.suffix
        if suffix:
            if args.ignore_case:
                suffix = suffix.lower()
        suffix_paths[suffix].add(path)

    if args.count:
        for suffix, paths in sorted(suffix_paths.items(), key=lambda x: len(x[1])):
            print((suffix or '""') + '\t\t' + str(len(paths)))
    elif args.json:
        print(pretty_json(suffix_paths))
    else:
        for suffix in sorted(suffix_paths):
            print(suffix or '""')


if __name__ == "__main__":
    main()
