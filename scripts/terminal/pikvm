#!/usr/bin/env python3
import argparse
import json
import subprocess

import httpx
import yarl


URL = yarl.URL('http://pikvm.nullsum.lan')


def pretty_json(data):
    """
    Return a pretty JSON string

    The resulting string is valid JSON - both indented and sorted.

    :param data: Python data object
    """
    return json.dumps(
        data,
        indent=2,
        sort_keys=True,
        ensure_ascii=False
    )


class PiKVMAPI:
    ATX_POWER_ACTIONS = {
        'on',
        'off',
        'off_hard',
        'reset_hard',
    }

    def __init__(self, url):
        self.url = url
        self.client = httpx.Client()

    def get_atx_state(self):
        url = (self.url / 'api' / 'atx')
        response = self.client.get(str(url))
        response.raise_for_status()
        return response.json()

    def set_atx_power(self, action):
        if action not in self.ATX_POWER_ACTIONS:
            raise ValueError
        url = (self.url / 'api' / 'atx' / 'power').with_query(
            {'action': action}
        )
        response = self.client.post(str(url))
        response.raise_for_status()


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        dest='command', metavar='COMMAND')

    subparsers.add_parser('open', help='open help')

    atx_parser = subparsers.add_parser(
        'atx', help='atx help')
    atx_parser.add_argument('--action', choices=PiKVMAPI.ATX_POWER_ACTIONS)
    atx_parser.add_argument('--get', action='store_true')

    args = parser.parse_args()

    api = PiKVMAPI(URL)

    match args.command:
        case 'atx':
            if args.action:
                api.set_atx_power(args.action)
            if args.get or not any([args.get, args.action]):
                state = api.get_atx_state()
                print(pretty_json(state))
        case None | 'open':
            subprocess.run(['open', str(URL / 'kvm')])


if __name__ == '__main__':
    main()
