#!/usr/bin/env python
import argparse
import collections
import itertools
import json
import pathlib
import sys

import magic  # package: python-magic

MIME_SUFFIXES = {
    'application/x-dosexec': [
        '.exe',
    ],
    'application/vnd.microsoft.portable-executable': [
        '.exe',
    ],
    'application/x-7z-compressed': [
        '.7z',
    ],
    'application/x-ace-compressed': [
        '.ace',
    ],
    'application/zip': [
        '.zip',
    ],
    'application/x-bittorrent': [
        '.torrent',
    ],
    'application/gzip': [
        '.gzip',
    ],
    'application/x-rar': [
        '.rar',
    ],
    'application/x-tar': [
        '.tar',
    ],
    'application/pdf': [
        '.pdf',
    ],
    'audio/flac': [
        '.flac'
    ],
    'audio/mpeg': [
        '.mp3'
    ],
    'image/avif': [
        '.avif',
    ],
    'image/bmp': [
        '.bmp',
    ],
    'image/gif': [
        '.gif',
    ],
    'image/png': [
        '.png'
    ],
    'image/jpeg': [
        '.jpeg',
        '.jpg',
    ],
    'image/tiff': [
        '.tiff',
        '.tif',
    ],
    'image/webp': [
        '.webp',
    ],
    'image/x-canon-cr2': [
        '.cr2',
    ],
    'image/x-canon-cr3': [
        '.cr3',
    ],
    'video/3gpp': [
        '.3gp',
    ],
    'video/mp4': [
        '.mp4',
    ],
    'video/x-m4v': [
        '.m4v',
    ],
    'video/mp2t': [
        '.mp2t',
    ],
    'text/html': [
        '.html',
    ],
}


ALL_SUFFIXES = set(itertools.chain(*[v for v in MIME_SUFFIXES.values()]))


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--check', action='store_true', default=False)
    parser.add_argument('--fix', action='store_true', default=False)
    parser.add_argument('--force-fix', action='store_true', default=False,
                        help='Set suffix for txt, octet-streams, and unknown')
    parser.add_argument('path', type=pathlib.Path, nargs='+')
    args = parser.parse_args()

    exts = collections.defaultdict(set)
    paths = set()
    for path in args.path:
        if path.is_dir():
            paths.update(all_files(path))
        else:
            paths.add(path)

    for path in sorted(paths):
        mime = magic.from_file(str(path), mime=True).lower()
        exts[mime].add(path)

    if args.force_fix:
        for mime, paths in exts.items():
            if mime == 'text/plain':
                suffix = '.txt'
            elif suffixes := MIME_SUFFIXES.get(mime):
                suffix = suffixes[0]
            else:
                suffix = '.unknown'
            for path in paths:
                if path.suffix == suffix:
                    continue
                sep_count = 0
                while True:
                    target = path.with_name(
                        f'{path.name}{"_"*sep_count}{suffix}')
                    if target.exists():
                        sep_count += 1
                    else:
                        break
                print(f'Renaming "{path}" to "{target}"')
                path.rename(target)
        exit()

    if args.check:
        missing = set()
        invalid = collections.defaultdict(set)
        for mime, paths in exts.items():
            suffixes = MIME_SUFFIXES.get(mime)
            if mime == 'text/plain' or not suffixes:
                missing.add(mime)
                if not args.always_fix:
                    continue

            for path in paths:
                if mime == 'text/plain':
                    if path.suffix in ALL_SUFFIXES:
                        invalid[mime].add(path)
                        continue
                elif path.suffix not in suffixes:
                    invalid[mime].add(path)
        exts = invalid
        for mime in sorted(missing):
            print(f'warning: suffix unknown for "{mime}"', file=sys.stderr)

    exts = {
        ext: sorted(str(p.resolve()) for p in paths)
        for ext, paths in exts.items()
    }

    print(json.dumps(exts, indent=2, sort_keys=True))

    if (args.check or args.fix) and exts:
        if args.fix:
            for mime, paths in exts.items():
                if mime not in MIME_SUFFIXES:
                    continue
                suffix = MIME_SUFFIXES[mime][0]
                for path in paths:
                    path = pathlib.Path(path)
                    if path.suffix == suffix:
                        continue
                    sep_cnt = 0
                    while True:
                        target = pathlib.Path(f'{path}{sep_cnt * "_"}{suffix}')
                        if not target.exists():
                            break
                        sep_cnt += 1
                    pathlib.Path(path).rename(target)
        else:
            sys.exit(1)


if __name__ == '__main__':
    main()
