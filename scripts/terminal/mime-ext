#!/usr/bin/env python
import argparse
import collections
import itertools
import json
import pathlib
import sys

# package: python-magic
import magic

MIME_SUFFIXES = {
    'application/x-bittorrent': [
        '.torrent',
    ],
    'application/pdf': [
        '.pdf',
    ],
    'audio/flac': [
        '.flac'
    ],
    'audio/mpeg': [
        '.mp3'
    ],
    'image/gif': [
        '.gif',
    ],
    'image/png': [
        '.png'
    ],
    'image/jpeg': [
        '.jpeg',
        '.jpg',
    ],
    'image/tiff': [
        '.tiff',
    ],
    'image/webp': [
        '.webp',
    ],
    'image/x-canon-cr2': [
        '.cr2',
    ],
    'video/3gpp': [
        '.3gp',
    ],
    'video/mp4': [
        '.mp4',
    ],
    'text/html': [
        '.html',
    ],
}


ALL_SUFFIXES = set(itertools.chain(*[v for v in MIME_SUFFIXES.values()]))


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--check', action='store_true', default=False)
    parser.add_argument('--fix', action='store_true', default=False)
    parser.add_argument('path',
                        type=pathlib.Path, default=pathlib.Path(), nargs='?')
    args = parser.parse_args()

    exts = collections.defaultdict(set)
    if args.path.is_dir():
        paths = all_files(args.path)
    else:
        paths = [args.path]

    for path in paths:
        mime = magic.from_file(str(path), mime=True)
        exts[mime].add(path)

    if args.check:
        missing = set()
        invalid = collections.defaultdict(set)
        for mime, paths in exts.items():
            suffixes = MIME_SUFFIXES.get(mime)
            if mime == 'text/plain' or not suffixes:
                missing.add(mime)
                continue

            for path in paths:
                if mime == 'text/plain':
                    if path.suffix in ALL_SUFFIXES:
                        invalid[mime].add(path)
                        continue
                elif path.suffix not in suffixes:
                    invalid[mime].add(path)
        exts = invalid
        for mime in sorted(missing):
            print(f'warning: suffix unknown for "{mime}"', file=sys.stderr)

    exts = {
        ext: sorted(str(p.resolve()) for p in paths)
        for ext, paths in exts.items()
    }

    print(json.dumps(exts, indent=2, sort_keys=True))

    if args.check and exts:
        if args.fix:
            for mime, paths in exts.items():
                suffix = MIME_SUFFIXES[mime][0]
                for path in paths:
                    sep_cnt = 0
                    while True:
                        target = pathlib.Path(f'{path}{sep_cnt * "_"}{suffix}')
                        if not target.exists():
                            break
                        sep_cnt += 1
                    pathlib.Path(path).rename(target)
        else:
            sys.exit(1)


if __name__ == '__main__':
    main()
