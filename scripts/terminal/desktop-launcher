#!/usr/bin/env python3
import collections
import os
import pathlib
import shlex
import subprocess
import sys
import urllib.parse


HIST = pathlib.Path('~/.cache/launcher.hist').expanduser()


def launch(*args):
    if sys.platform == 'darwin':
        subprocess.run(args, check=True)
    elif 'I3SOCK' in os.environ:
        cmd = ' '.join(shlex.quote(arg) for arg in args)
        subprocess.run(
            ['i3-msg', '-q', '-t', 'command', 'exec', '--', cmd],
            check=True
        )
    else:
        raise RuntimeError


def find_executables():
    executables = set()
    stack = [pathlib.Path(p) for p in os.get_exec_path()]
    while stack:
        root = stack.pop()
        if not root.is_dir():
            continue
        for path in root.iterdir():
            try:
                if path.is_file() and os.access(path, os.X_OK):
                    executables.add(path.name)
            except PermissionError:
                pass
    return executables


def find_applications():
    applications = set()
    stack = [pathlib.Path('/Applications')]
    while stack:
        for path in stack.pop().iterdir():
            if path.suffix == '.app':
                applications.add(path.stem)
            elif path.is_dir():
                stack.append(path)
    return applications


def fzf(data):
    proc = subprocess.run(
        ['fzf', '--black', '--prompt=', '--no-info', '--exact', '--no-sort',
         '--no-extended', '-i', '--layout=reverse', '--print-query'],
        input='\n'.join(data).encode(),
        stdout=subprocess.PIPE,
    )
    try:
        result = proc.stdout.decode().splitlines()[-1]
    except IndexError:
        result = None

    return not bool(proc.returncode), result


history = collections.defaultdict(int)

if HIST.is_file():
    for line in HIST.read_text().splitlines():
        count, cmd = line.split(' ', 1)
        history[cmd] = int(count)

if sys.platform == 'darwin':
    apps = sorted(find_applications())
else:
    apps = find_executables()
cmds = sorted(apps, key=lambda x: (history[x] * -1, x))

matched, result = fzf(cmds)
if matched:
    if sys.platform == 'darwin':
        if result in apps:
            history[result] += 1
            launch('open', '-a', result)
        else:
            parts = result.strip().split()
            cmd = parts[0]
            history[cmd] += 1
            launch('open', result)
    else:
        parts = result.strip().split()
        cmd = parts[0]
        history[cmd] += 1
        launch(result)
    HIST.write_text('\n'.join(f'{v} {k}' for k, v in history.items() if v))
elif result:
    result = result.strip()
    if len(result.split()) == 1 and '.' in result:
        parsed = urllib.parse.urlparse(result)
        if not parsed.scheme:
            print(result)
            history[result] += 1
            HIST.write_text('\n'.join(f'{v} {k}' for k, v in history.items() if v))
            url = f'https://{result}'
        else:
            url = result
        launch('open', url)
    else:
        url = f'https://duckduckgo.com/?q={result}'
        if sys.platform == 'darwin':
            launch('open', url)
        else:
            launch('firefox', '--private-window', url)
