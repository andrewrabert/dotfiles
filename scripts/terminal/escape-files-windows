#!/usr/bin/env python3
import argparse
import os
import pathlib
import string
import subprocess

VALID = [' ', '.', '-', '_', '(', ')', '[', ']', "'"]
VALID.extend(string.ascii_letters)
VALID.extend(string.digits)


def pfiles(path):
    for root, dirs, files in os.walk(path):
        for f in files:
            yield pathlib.Path(root, f)


def escape_path(path):
    new_parts = []
    for part in path.parts:
        new_part = ''.join([c for c in part if c in VALID])

        # replace multiple spaces with single space
        # TODO: preserve existing consecutive spaces
        new_part = ' '.join(new_part.split())

        if not new_part:
            raise ValueError(f'Unable to escape {path}')
        new_parts.append(new_part)
    return pathlib.Path(*new_parts)


def rename_files(root, dry_run=True):
    renamed_paths = []

    for f in pfiles(root):
        new_f = escape_path(f)
        if new_f != f:
            if new_f.exists() or new_f in renamed_paths:
                raise ValueError(f'"{new_f}" already exists')
            if not dry_run:
                new_f.parent.mkdir(parents=True, exist_ok=True)
                f.rename(new_f)
            renamed_paths.append(new_f)
            print(f, '->', new_f)

    subprocess.run(('find', root, '-type', 'd', '-empty', '-delete'))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('directory')
    parser.add_argument('-c', '--commit',
                        action='store_const', const='True',
                        help='commit renames to disk. otherwise dry run')
    args = parser.parse_args()

    # always perform a dry run to check for errors
    rename_files(args.directory, dry_run=True)

    if args.commit:
        rename_files(args.directory, dry_run=False)


if __name__ == '__main__':
    main()
