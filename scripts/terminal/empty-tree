#!/usr/bin/env python3
import argparse
import pathlib
import sys


def iter_dirs(parent):
    other = set()
    dirs = set()

    stack = [parent]
    while stack:
        try:
            for path in stack.pop().iterdir():
                if path.is_dir() and not path.is_symlink():
                    dirs.add(path)
                    stack.append(path)
                else:
                    other.add(path)
        except PermissionError as e:
            print(e, file=sys.stderr)
        except FileNotFoundError:
            pass

    return dirs, other


def empty_dirs(parent, include_parent=False):
    empty = set()
    dirs, _ = iter_dirs(parent)
    if include_parent is True:
        dirs.add(parent)
    for d in dirs:
        _, subfiles = iter_dirs(d)
        if not subfiles:
            empty.add(d)
    return empty


def main():
    parser = argparse.ArgumentParser(
        description='List the tops of empty directory trees.'
    )
    parser.add_argument(
        '-p', '--parent', action='store_true',
        help='allow the parent to be removed if empty')
    parser.add_argument(
        '-r', '--remove', action='store_true',
        help='remove the trees from disk'
    )
    parser.add_argument('path', type=pathlib.Path, nargs='*')
    args = parser.parse_args()

    paths = sorted(set(args.path)) or [pathlib.Path()]

    for parent_path in paths:
        if not parent_path.exists():
            continue
        parent_paths = empty_dirs(parent_path, include_parent=args.parent)
        for path in sorted(parent_paths, reverse=True):
            print(path)
            if args.remove:
                # prefer over shutil.rmtree to ensure nothing added since scan
                try:
                    path.rmdir()
                except PermissionError as e:
                    print(e, file=sys.stderr)
                except FileNotFoundError:
                    pass
                except OSError:
                    # directory not empty
                    pass


if __name__ == '__main__':
    main()
