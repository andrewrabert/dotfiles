#!/usr/bin/env python3
import argparse
import pathlib
import shutil


def iter_dirs(root):
    other = set()
    dirs = set()

    stack = [root]
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir() and not path.is_symlink():
                dirs.add(path)
                stack.append(path)
            else:
                other.add(path)

    return dirs, other


def empty_dirs(root):
    empty = set()
    dirs, other = iter_dirs(root)
    for d in dirs:
        subdirs, subfiles = iter_dirs(d)
        if not subfiles:
            empty.add(d)
    return empty


def empty_trees(root):
    empty = empty_dirs(root)

    children = set()
    for a in empty:
        for b in empty:
            if is_child(b, a):
                children.add(b)

    return empty - children


def is_child(path, root):
    return root in path.parents


def main():
    parser = argparse.ArgumentParser(
        description='List the tops of empty directory trees.'
    )
    parser.add_argument(
        '-r', dest='remove', action='store_const', const=True,
        help='remove the trees from disk'
    )
    parser.add_argument('path', type=pathlib.Path, nargs='?', default='.')
    args = parser.parse_args()

    for path in sorted(empty_trees(args.path)):
        print(path)
        if args.remove:
            shutil.rmtree(path)


if __name__ == '__main__':
    main()
