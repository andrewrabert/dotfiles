#!/usr/bin/env python3
import argparse
import collections
import json
import pathlib
import subprocess


def all_files(root):
    stack = [pathlib.Path(root)]
    files = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_file() and not path.is_symlink():
                files.append(path)
            elif path.is_dir():
                stack.append(path)
    return files


def sha256sum(path):
    result = subprocess.run(
        ['sha256sum', str(path)],
        check=True,
        stdout=subprocess.PIPE)
    return result.stdout.decode().split()[0]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', default=pathlib.Path(), type=pathlib.Path,
                        nargs='?')
    args = parser.parse_args()

    by_size = collections.defaultdict(set)
    for path in all_files(args.path):
        by_size[path.stat().st_size].add(path)

    print('done size')
    hashes = collections.defaultdict(set)
    for paths in by_size.values():
        if len(paths) > 1:
            for path in paths:
                hashes[sha256sum(path)].add(path)

    print('done paths')
    duplicates = {
        k: sorted(str(p.absolute()) for p in v)
        for k, v in hashes.items()
        if len(v) > 1
    }

    print(json.dumps(duplicates, indent=2, sort_keys=True))


if __name__ == '__main__':
    main()
