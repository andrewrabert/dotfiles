#!/usr/bin/env python3
import argparse
import logging
import pathlib
import sys
import time

LOGGER = logging.getLogger('rename-from-file')


def setup_logging(name, level=logging.INFO):
    logger = logging.getLogger()
    logger.setLevel(level)

    fmt = logging.Formatter('%(message)s')

    sh = logging.StreamHandler()
    sh.setLevel(level)
    sh.setFormatter(fmt)
    logger.addHandler(sh)

    fh = logging.FileHandler(f'/tmp/{name}.{int(time.time())}.log')
    fh.setLevel(level)
    fh.setFormatter(fmt)
    logger.addHandler(fh)


def main():
    parser = argparse.ArgumentParser()
    parser.description = f'{parser.prog} directory'
    parser.add_argument('directory', type=pathlib.Path)
    parser.add_argument('source', type=pathlib.Path)
    parser.add_argument('-d', '--dryrun', action='store_true')
    parser.add_argument('--type', choices=['f', 'd'], default='f')
    args = parser.parse_args()

    setup_logging('rename-from-file')

    titles = [
        line.replace('/', '-')
        for line in args.source.read_text().split('\n')
        if line
    ]

    paths = []
    for path in args.directory.iterdir():
        if path == args.source:
            continue
        if args.type == 'f':
            if path.is_file():
                paths.append(path)
        elif args.type == 'd':
            if path.is_dir():
                paths.append(path)

    if len(paths) != len(titles):
        LOGGER.error(
            'found %s paths but only %s titles', len(paths), len(titles))
        sys.exit(1)

    new_names = {}
    for title, path in zip(titles, sorted(paths, key=lambda x: str(x).lower())):
        new_names[path] = title

    for path, new_name in new_names.items():
        target = path.with_name(new_name)
        LOGGER.info('source: "%s"', path.name)
        LOGGER.info('target: "%s"', target.name)
        if not args.dryrun:
            path.rename(target)


if __name__ == '__main__':
    main()
