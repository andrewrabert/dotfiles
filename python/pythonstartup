#!/usr/bin/env python3
import asyncio
import base64
import binascii
import collections
import collections.abc
import concurrent.futures
import configparser
import contextlib
import contextvars
import copy
import datetime
import decimal
import difflib
import email
import email.message
import email.mime
import email.mime.multipart
import email.mime.text
import enum
import fnmatch
import getpass
import glob
import gzip
import hashlib
import importlib
import importlib.metadata
import importlib.resources
import io
import ipaddress
import itertools
import json
import locale
import logging
import logging.config
import lzma
import math
import multiprocessing
import os
import pathlib
import pickle
import pkgutil
import pprint
import pwd
import random
import re
import shlex
import shutil
import smtplib
import socket
import stat
import string
import subprocess
import sys
import tarfile
import tempfile
import textwrap
import time
import typing
import unicodedata
import unittest
import unittest.mock
import urllib.parse
import urllib.request
import uuid
import zipfile
import zlib
import zoneinfo

for name in [
        'arrow',
        'httpx',
        'iso8601',
        'magic',
        'mutagen',
        'psycopg',
        'redis',
        'requests',
        'rich',
        'tabulate',
        'toml',
        'tqdm',
        'yaml',
        'yarl',
]:
    try:
        exec(f'import {name}')
    except ModuleNotFoundError:
        pass


try:
    import faker as _faker
except ModuleNotFoundError:
    pass
else:
    faker = _faker.Faker()


def pp(*args, **kwargs):
    kwargs.setdefault('sort_dicts', True)
    return pprint.pp(*args, **kwargs)


def walk(root):
    stack = [pathlib.Path(root)]
    paths = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            paths.add(path)
    return sorted(paths)


def paths(pattern=None):
    if pattern is None:
        return sorted(pathlib.Path().iterdir())
    else:
        return sorted(
            pathlib.Path(p)
            for p in glob.glob(str(pathlib.Path(pattern).expanduser()))
        )


def ls(all=False):
    if all:
        pp(paths())
    else:
        pp(paths('*'))


def files(*args, **kwargs):
    return sorted(p for p in paths(*args, **kwargs)
                  if p.is_file())


def dirs(*args, **kwargs):
    return sorted(p for p in paths(*args, **kwargs)
                  if p.is_dir())


def path(pattern):
    matches = list(paths(pattern))
    if len(matches) == 0:
        raise FileNotFoundError
    elif len(matches) != 1:
        raise ValueError
    return matches[0]


def pretty_json(data):
    def _default_json(obj):
        if isinstance(obj, set):
            return sorted(obj)
        elif hasattr(obj, 'isoformat'):
            return obj.isoformat()
    return json.dumps(
        data,
        indent=2,
        sort_keys=True,
        default=_default_json,
        ensure_ascii=False
    )


def cat(pattern):
    return b''.join(p.read_bytes() for p in paths(pattern))


def cd(pattern='~'):
    os.chdir(path(pattern))
    return pathlib.Path.cwd()


def pwd():
    return pathlib.Path.cwd()


def chunked(iterable, n):
    i = iter(iterable)
    while result := list(itertools.islice(i, n)):
        yield result


def now():
    return datetime.datetime.now().astimezone()


def utcnow():
    return datetime.datetime.now().astimezone(datetime.timezone.utc)


def timeshift(dt, *args, **kwargs):
    return dt + datetime.timedelta(*args, **kwargs)


def cbcopy(data):
    if not isinstance(data, bytes):
        data = data.encode()
    subprocess.run(
        ['cbcopy'],
        input=data,
        check=True)


def cbpaste():
    proc = subprocess.run(
        ['cbpaste'],
        stdout=subprocess.PIPE,
        check=True)
    return proc.stdout


def bytes_to_human(num):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:
        if abs(num) < 1024.0:
            break
        num /= 1024.0
    return f'{num:.1f}{unit}'


def safe_write_bytes(path, data):
    path = pathlib.Path(path)
    with tempfile.NamedTemporaryFile(delete=False, dir=path.parent) as handle:
        try:
            temp_path = pathlib.Path(handle.name)
            temp_path.write_bytes(data)
            temp_path.rename(path)
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


def path_size(root=None):
    stack = [pathlib.Path(root) if root else pathlib.Path()]
    total = 0
    while stack:
        root = stack.pop()
        if root.is_file():
            total += root.stat().st_size
        else:
            stack.extend(root.iterdir())
    return total
