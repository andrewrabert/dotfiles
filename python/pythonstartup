#!/usr/bin/env python3
import asyncio
import base64
import collections
import concurrent.futures
import configparser
import contextlib
import datetime
import glob
import gzip
import hashlib
import importlib
import io
import ipaddress
import itertools
import json
import logging
import lzma
import os
import pathlib
import pickle
import pprint
import re
import shlex
import shutil
import socket
import subprocess
import sys
import tarfile
import time
import urllib.parse
import urllib.request
import uuid
import zipfile

for name in [
        'arrow',
        'enzyme',
        'httpx',
        'mutagen',
        'psycopg2',
        'redis',
        'tabulate',
        'yaml',
        'yarl',
]:
    try:
        exec(f'import {name}')
    except ModuleNotFoundError:
        pass


def pp(*args, **kwargs):
    kwargs.setdefault('sort_dicts', True)
    return pprint.pp(*args, **kwargs)


def walk(root):
    stack = [pathlib.Path(root)]
    paths = []
    while stack:
        for path in stack.pop().iterdir():
            if path.is_dir():
                stack.append(path)
            paths.add(path)
    return sorted(paths)


def paths(pattern=None):
    if pattern is None:
        return sorted(pathlib.Path().iterdir())
    else:
        return sorted(
            pathlib.Path(p)
            for p in glob.glob(str(pathlib.Path(pattern).expanduser()))
        )


def ls(all=False):
    if all:
        pp(paths())
    else:
        pp(paths('*'))


def files(*args, **kwargs):
    return sorted(p for p in paths(*args, **kwargs)
                  if p.is_file())


def dirs(*args, **kwargs):
    return sorted(p for p in paths(*args, **kwargs)
                  if p.is_dir())


def path(pattern):
    matches = list(paths(pattern))
    if len(matches) == 0:
        raise FileNotFoundError
    elif len(matches) != 1:
        raise ValueError
    return matches[0]


def pretty_json(data):
    def _default_json(obj):
        if isinstance(obj, set):
            return sorted(obj)
        elif hasattr(obj, 'isoformat'):
            return obj.isoformat()
    return json.dumps(
        data,
        indent=2,
        sort_keys=True,
        default=_default_json,
        ensure_ascii=False
    )


def cat(pattern):
    return b''.join(p.read_bytes() for p in paths(pattern))


def cd(pattern='~'):
    os.chdir(path(pattern))
    return pathlib.Path.cwd()


def pwd():
    return pathlib.Path.cwd()


def chunked(iterable, n):
    i = iter(iterable)
    while result := list(itertools.islice(i, n)):
        yield result


def now():
    return datetime.datetime.now().astimezone()


def utcnow():
    return datetime.datetime.now().astimezone(datetime.timezone.utc)
