#!/usr/bin/env python3
import os
import pathlib
import shutil
import socket
import subprocess


HOSTNAME = socket.gethostname().strip()

HOME = pathlib.Path('~').expanduser()
CONFIG = HOME / '.config'
LOCAL_SHARE = HOME / '.local' / 'share'

DOTFILES = pathlib.Path(os.environ['DOTFILES'])

if DOTFILES_PRIVATE := os.environ.get('DOTFILES_PRIVATE', None):
    DOTFILES_PRIVATE = pathlib.Path(DOTFILES_PRIVATE)

LINKS = {
    CONFIG / 'kdesurc':
        DOTFILES / 'kde' / 'kdesurc',
    CONFIG / 'kuriikwsfilterrc':
        DOTFILES / 'kde' / 'kuriikwsfilterrc',

    LOCAL_SHARE / 'icons':
        DOTFILES / 'kde' / 'icons',
    LOCAL_SHARE / 'applications':
        DOTFILES / 'kde' / 'applications',
    LOCAL_SHARE / 'kwin':
        DOTFILES / 'kde' / 'kwin',
    LOCAL_SHARE / 'color-schemes':
        DOTFILES / 'kde' / 'color-schemes',
}

if DOTFILES_PRIVATE is not None:
    LINKS.update({
        LOCAL_SHARE / 'kf6' / 'searchproviders':
            DOTFILES_PRIVATE / 'kde' / 'searchproviders',
    })


match HOSTNAME:
    case 'mars':
        LINKS.update({
            CONFIG / 'autostart':
                DOTFILES / 'kde' / 'autostart' / 'mars',
        })
    case 'phobos':
        LINKS.update({
            CONFIG / 'autostart':
                DOTFILES / 'kde' / 'autostart' / 'phobos',
        })


def delete(path):
    if path.is_symlink() or path.is_file():
        path.unlink(missing_ok=True)
    elif path.is_dir():
        shutil.rmtree(path)


def is_linked(source, target):
    return source.is_symlink() and source.readlink() == target


def symlink(source, target):
    if not is_linked(source, target):
        delete(source)
        source.parent.mkdir(exist_ok=True, parents=True)
        source.symlink_to(target)


def copy_into_replace_contents(source, target):
    target.mkdir(exist_ok=True, parents=True)
    subprocess.run(
        ['rsync', '-avq', '--delete',
         f'{source}/', target],
        check=True)


def copy_replace(source, target):
    target.parent.mkdir(exist_ok=True, parents=True)
    subprocess.run(
        ['rsync', '-avq', source, target],
        check=True)


def main():
    if not shutil.which('plasmashell'):
        exit()

    for target, source in LINKS.items():
        symlink(target, source)

    if HOSTNAME:
        source = DOTFILES / 'kde' / 'applications_host' / HOSTNAME
        target = LOCAL_SHARE / 'applications' / 'dotfiles-localhost'
        if source.exists():
            copy_into_replace_contents(source, target)
        else:
            delete(target)

    if HOSTNAME in ('mars', 'phobos'): 
        subprocess.run(['update-desktop-database'], check=True)


if __name__ == '__main__':
    main()
