#!/usr/bin/env python3
import asyncio
import dataclasses
import pathlib
import socket
import sys


EXPECTED_PACKAGES = {
    '7-zip',
    'advancecomp',
    'aria2',
    'bat',
    'bchunk',
    'binmerge',
    'cabextract',
    'cuetools',
    'curlie',
    'dash',
    'direnv',
    'dosfstools',
    'e2fsprogs',
    'epub-tools-bin',
    'exfatprogs',
    'fd',
    'flake8',
    'foot-terminfo',
    'fzf',
    'gifsicle',
    'git',
    'htop',
    'hugo',
    'hyperfine',
    'iftop',
    'innoextract',
    'iperf3',
    'jpegoptim',
    'jq',
    'ledger',
    'less',
    'lf',
    'mac',
    'moreutils',
    'mp3val',
    'mprime-bin',
    'ms-sys',
    'neovim',
    'nsz',
    'ntfs-3g',
    'openssh',
    'opus-tools',
    'oxipng',
    'pandoc-cli',
    'pbzip2',
    'perl-image-exiftool',
    'pigz',
    'pixz',
    'pwgen',
    'pyright',
    'python',
    'python-async-executor',
    'python-httpx',
    'python-magic',
    'python-mutagen',
    'python-numpy',
    'python-psutil',
    'python-pytorch-rocm',
    'python-yarl',
    'rdfind',
    'reflector',
    'ripgrep',
    'rsync',
    'rust-analyzer',
    'shellcheck',
    'shntool',
    'speedtest-cli',
    'sshfs',
    'sshuttle',
    'syncthing',
    'tmux',
    'tmux-xpanes',
    'transmission-cli',
    'tree-sitter-cli',
    'typescript-language-server',
    'unace',
    'unrar',
    'unshield',
    'unzip',
    'vim',
    'vorbis-tools',
    'wl-clipboard',
    'xsel',
    'yt-dlp',
    'zip',
    'zsh',
}

EXPECTED_PACKAGES_DESKTOP = {
    'alacritty',
    'art-rawconverter',
    'audacity',
    'base16-shell-preview',
    'bitwig-studio',
    'chromium',
    'discord',
    'docker-compose',
    'dolphin',
    'element-desktop',
    'firefox',
    'foliate',
    'foot',
    'gamescope',
    'gifski',
    'gimp-devel',
    'gparted',
    'gwenview',
    'inkscape',
    'jellyfin-media-player',
    'kdeconnect',
    'kid3-qt',
    'krita',
    'mangohud',
    'mkvtoolnix-gui',
    'noto-fonts',
    'noto-fonts-cjk',
    'noto-fonts-emoji',
    'noto-fonts-extra',
    'obs-studio',
    'okular',
    'piavpn-bin',
    'podman',
    'proton-ge-custom-bin',
    'signal-desktop',
    'slack-desktop',
    'spectacle',
    'steam',
    'strawberry',
    'tremotesf',
    'ttf-dejavu-emojiless',
    'upscayl-bin',
    'virt-manager',
    'wine',
    'xboxdrv',
}


# bool True == package is installed
EXPECTED_OPT_DEPENDS = {
    'art-rawconverter': {
        'perl-image-exiftool': True,
        'art-rawconverter-imageio': True,
        'art-rawconverter-ctlscripts': True,
        'lcms2-ff': False,
    },
    'digikam': {
        'darktable': True,
        'hugin': True,
        'qt6-imageformats': True,
        'rawtherapee': False,
    },
    'dolphin': {
        'ffmpegthumbs': True,
        'kde-cli-tools': True,
        'kdegraphics-thumbnailers': True,
        'kio-admin': True,
        'konsole': False,
        'purpose': True,
    },
    'gimp-devel': {
        'aalib': True,
        'alsa-lib': True,
        'cfitsio': True,
        'curl': True,
        'ghostscript': True,
        'gjs': True,
        'gutenprint': False,
        'iso-codes': True,
        'libheif': True,
        'libjxl': True,
        'libmng': True,
        'libwebp': True,
        'libxpm': True,
        'lua51-lgi': True,
        'luajit': True,
        'qoi-headers': True,
        'zlib': True,
    },
    'gwenview': {
        'kamera': False,
        'kimageformats': True,
        'qt6-imageformats': True,
    },
    'krita': {
        'kimageformats5': True,
        'krita-plugin-gmic': True,
        'kseexpr': True,
        'libheif': True,
        'libjxl': True,
        'libmypaint': True,
        'poppler-qt5': True,
        'python-pyqt5': True,
    },
    'neovim': {
        'python-pynvim': False,
        'xclip': False,
        'xsel': False,
        'wl-clipboard': False,
    },
    'okular': {
        'ebook-tools': True,
        'kdegraphics-mobipocket': True,
        'unarchiver': False,
        'unrar': True,
    },
    'steam': {
        'steam-native-runtime': True,
    },
    'udiskie': {
        'libappindicator-gtk3': True,
    },
    'yt-dlp': {
        'aria2': True,
        'atomicparsley': True,
        'ffmpeg': True,
        'phantomjs': False,
        'python-brotli': True,
        'python-brotlicffi': True,
        'python-mutagen': True,
        'python-pycryptodome': True,
        'python-pycryptodomex': True,
        'python-pyxattr': True,
        'python-secretstorage': True,
        'python-websockets': True,
        'python-xattr': True,
        'rtmpdump': True,
    },
}


@dataclasses.dataclass
class Package:
    name: str
    explicitly_installed: bool


@dataclasses.dataclass
class OptionalDependency:
    parent_name: str
    name: str
    description: str
    installed: bool


async def pacman_query_installed(packages):
    proc = await asyncio.create_subprocess_exec(
            'pacman', '-Qi', '--', *set(packages),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    for line in stderr.decode().splitlines():
        if line.startswith("error: package '") and line.endswith("' was not found"):
            continue
        print(line, file=sys.stderr)

    found_packages = {}

    name = None
    explicitly_installed = False
    for line in stdout.decode().splitlines():
        if line.startswith('Install Reason  :'):
            _, part = line.split(':', maxsplit=1)
            match part.strip():
                case 'Explicitly installed':
                    explicitly_installed = True
                case 'Installed as a dependency for another package':
                    explicitly_installed = False
                case _:
                    raise RuntimeError()
        if line.startswith('Name            : '):
            if name is not None:
                found_packages[name] = Package(
                    name=name,
                    explicitly_installed=explicitly_installed,
                )
            name = line.split(':', maxsplit=1)[1].strip()

    if name is not None:
        found_packages[name] = Package(
            name=name,
            explicitly_installed=explicitly_installed,
        )
    return found_packages


async def pacman_query_opt_depends(packages):
    proc = await asyncio.create_subprocess_exec(
            'pacman', '-Qi', '--', *set(packages),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
    )
    stdout, stderr = await proc.communicate()
    for line in stderr.decode().splitlines():
        if line.startswith("error: package '") and line.endswith("' was not found"):
            continue
        print(line, file=sys.stderr)

    opt_depends = {}

    inside_optdepends = False
    parent_package = None
    for line in stdout.decode().splitlines():
        if line.startswith('Name            : '):
            parent_package = line.split(':', maxsplit=1)[1].strip()

        if line.startswith('Optional Deps   : '):
            inside_optdepends = True
            parts = line.split(':', maxsplit=2)
            match len(parts):
                case 2:
                    if parts[1].strip() == 'None':
                        # no opt depends
                        continue
                case 3:
                    package_name = parts[1]
                    description = parts[2]
        elif inside_optdepends and line.startswith('                  '):
            package_name, description = line.split(':', maxsplit=1)
        else:
            inside_optdepends = False
            package_name = None

        if package_name is not None:
            package_name = package_name.strip()
            installed = False
            if description.strip().endswith(' [installed]'):
                description = description.removesuffix(' [installed]')
                installed = True
            optdep = OptionalDependency(
                parent_name=parent_package.strip(),
                name=package_name.strip(),
                description=description.strip(),
                installed=installed,
            )
            opt_depends.setdefault(parent_package, [])
            opt_depends[parent_package].append(optdep)
    return opt_depends


async def is_unit_enabled(name, user=False):
    proc = await asyncio.create_subprocess_exec(
        'systemctl',
        '--user' if user else '--system',
        'show',
        '--property=UnitFileState',
        '--',
        name,
        stdout=asyncio.subprocess.PIPE,
    )
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')
    stdout, _ = await proc.communicate()
    match stdout.decode().strip():
        case 'UnitFileState=enabled':
            return True
        case 'UnitFileState=disabled':
            return False
        case _:
            raise RuntimeError


async def enable_unit(name, now=False, user=False):
    if await is_unit_enabled(name, user=user):
        return
    print(f'Enabling unit {name} (user={user}) (now={now})')
    args = []
    if not user:
        args.append('sudo')

    args.extend([
        'systemctl',
        '--user' if user else '--system',
        'enable',
    ])
    if now:
        args.append('--now')
    args.extend(['--', name])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def install_packages(packages, asdeps=False, asexplicit=False):
    args = [
        'sudo',
        'pacman',
        '-S',
        '--noconfirm',
    ]
    if asdeps:
        args.append('--asdeps')
    if asexplicit:
        args.append('--asexplicit')
    args.extend(['--', *packages])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()


async def ensure_packages():
    expected_packages = set(EXPECTED_PACKAGES)
    if socket.gethostname() in ('mars', 'phobos'):
        expected_packages.update(EXPECTED_PACKAGES_DESKTOP)
    packages = await pacman_query_installed(expected_packages)
    missing = set()
    for name in expected_packages:
        if name not in packages:
            missing.add(name)
        elif not packages[name].explicitly_installed:
            missing.add(name)

    if missing:
        print('Installing missing packages ...')
        await install_packages(missing, asexplicit=True)


async def ensure_opt_depends():
    opt_deps_by_parent = await pacman_query_opt_depends(
            EXPECTED_OPT_DEPENDS.keys())
    missing = set()
    for parent, opt_deps in opt_deps_by_parent.items():
        for opt_dep in opt_deps:
            try:
                expected_installed = EXPECTED_OPT_DEPENDS[parent][opt_dep.name]
            except KeyError:
                print(f'warning: undefined opt dep for {parent} - {opt_dep.name}',
                      file=sys.stderr)
                continue
            if opt_dep.installed != expected_installed:
                if opt_dep.installed:
                    if opt_dep.name not in EXPECTED_PACKAGES:
                        print(f'warning: unexpected optdep installed for {parent} - {opt_dep.name}: {opt_dep.description}', file=sys.stderr)
                else:
                    missing.add(opt_dep.name)
    if missing:
        print('Installing missing opt depends ...')
        await install_packages(missing, asdeps=True)


async def main():
    if not pathlib.Path('/etc/arch-release').exists():
        return

    await enable_unit('fstrim.timer', now=True)
    await enable_unit('systemd-timesyncd.service', now=True)
    await enable_unit('logrotate.timer', now=True)

    await ensure_packages()
    await ensure_opt_depends()



if __name__ == '__main__':
    asyncio.run(main())
