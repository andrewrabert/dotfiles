#!/usr/bin/env python3
import asyncio
import pathlib


async def is_unit_enabled(name, user=False):
    proc = await asyncio.create_subprocess_exec(
        'systemctl',
        '--user' if user else '--system',
        'show',
        '--property=UnitFileState',
        '--',
        name,
        stdout=asyncio.subprocess.PIPE,
    )
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')
    stdout, _ = await proc.communicate()
    match stdout.decode().strip():
        case 'UnitFileState=enabled':
            return True
        case 'UnitFileState=disabled':
            return False
        case _:
            raise RuntimeError


async def enable_unit(name, now=False, user=False):
    if await is_unit_enabled(name, user=user):
        return
    print(f'Enabling unit {name} (user={user}) (now={now})')
    args = []
    if not user:
        args.append('sudo')

    args.extend([
        'systemctl',
        '--user' if user else '--system',
        'enable',
    ])
    if now:
        args.append('--now')
    args.extend(['--', name])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def main():
    if not pathlib.Path('/etc/arch-release').exists():
        return

    await enable_unit('fstrim.timer', now=True)
    await enable_unit('systemd-timesyncd.service', now=True)
    await enable_unit('logrotate.timer', now=True)


if __name__ == '__main__':
    asyncio.run(main())
