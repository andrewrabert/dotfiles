#!/usr/bin/env python3
import asyncio
import grp
import pathlib
import socket
import subprocess

if not pathlib.Path('/etc/arch-release').is_file():
    exit()

try:
    import pyalpm
except ImportError:
    subprocess.run(['yay', '-S', '--noconfirm', 'pyalpm'], check=True)
    import pyalpm

HOSTNAME = socket.gethostname()

EXPECTED_PACKAGES = {
    '7-zip',
    'advancecomp',
    'aria2',
    'bat',
    'bchunk',
    'binmerge',
    'cabextract',
    'cdemu-client',
    'cuetools',
    'curlie',
    'dash',
    'direnv',
    'dosfstools',
    'e2fsprogs',
    'epub-tools-bin',
    'exfatprogs',
    'fd',
    'ffmpeg',
    'flake8',
    'foot-terminfo',
    'fzf',
    'gifsicle',
    'git',
    'htop',
    'hugo',
    'hyperfine',
    'iftop',
    'innoextract',
    'iperf3',
    'jpegoptim',
    'jq',
    'ledger',
    'less',
    'lf',
    'mac',
    'moreutils',
    'mp3val',
    'mprime-bin',
    'mpv',
    'ms-sys',
    'neovim',
    'nsz',
    'ntfs-3g',
    'openssh',
    'opus-tools',
    'oxipng',
    'pandoc-cli',
    'pbzip2',
    'perl-image-exiftool',
    'pigz',
    'pixz',
    'pwgen',
    'pyalpm',
    'pyright',
    'python',
    'python-async-executor',
    'python-httpx',
    'python-magic',
    'python-mutagen',
    'python-numpy',
    'python-psutil',
    'python-yarl',
    'rdfind',
    'reflector',
    'ripgrep',
    'rsync',
    'rust-analyzer',
    'shellcheck',
    'shntool',
    'speedtest-go',
    'sshfs',
    'sshuttle',
    'svgo',
    'syncthing',
    'tmux',
    'transmission-cli',
    'tree-sitter-cli',
    'typescript-language-server',
    'unace',
    'unrar',
    'unshield',
    'unzip',
    'vim',
    'vorbis-tools',
    'wl-clipboard',
    'xsel',
    'yt-dlp',
    'zip',
    'zsh',
}

EXPECTED_PACKAGES_DESKTOP = {
    'alacritty',
    'android-tools',
    'android-udev',
    'art-rawconverter',
    'audacity',
    'base16-shell-preview',
    'bitwig-studio',
    'chromium',
    'discord',
    'docker-compose',
    'dolphin',
    'element-desktop',
    'firefox',
    'foliate',
    'foot',
    'gamescope',
    'gifski',
    'gimp',
    'gparted',
    'gwenview',
    'inkscape',
    'jellyfin-media-player',
    'kcolorchooser',
    'kdeconnect',
    'kid3-qt',
    'krita',
    'mangohud',
    'mkvtoolnix-gui',
    'noto-fonts',
    'noto-fonts-cjk',
    'noto-fonts-emoji',
    'noto-fonts-extra',
    'obs-studio',
    'okular',
    'piavpn-bin',
    'plasma6-runners-emojirunner',
    'podman',
    'proton-ge-custom-bin',
    'signal-desktop',
    'slack-desktop',
    'spectacle',
    'steam',
    'strawberry',
    'tremotesf',
    'ttf-dejavu-emojiless',
    'upscayl-bin',
    'virt-manager',
    'wine',
    'xboxdrv',
}


EXPECTED_PACKAGE_DEPENDENCIES = {
    'art-rawconverter': {
        'perl-image-exiftool',
        'art-rawconverter-imageio',
        'art-rawconverter-ctlscripts',
    },
    'cdemu-daemon': {
        'libmirage-nvllsvm',
        'vhba-module-dkms',
    },
    'digikam': {
        'darktable',
        'hugin',
        'qt6-imageformats',
    },
    'dolphin': {
        'ffmpegthumbs',
        'kde-cli-tools',
        'kdegraphics-thumbnailers',
        'kio-admin',
        'purpose',
    },
    'gimp': {
        'aalib',
        'ghostscript',
        'gutenprint',
        'gvfs',
    },
    'gwenview': {
        'kimageformats',
        'qt6-imageformats',
    },
    'gparted': {
        'btrfs-progs',
        'dosfstools',
        'exfatprogs',
        'f2fs-tools',
        'gpart',
        'mtools',
        'ntfs-3g',
        'polkit',
        'udftools',
        'xfsprogs',
    },
    'libvirt': {
        'dmidecode',
        'dnsmasq',
        'gettext',
        'iptables-nft',
        'lvm2',
        'qemu-desktop',
        'swtpm',
    },
    'krita': {
        'kimageformats5',
        'krita-plugin-gmic',
        'kseexpr',
        'libheif',
        'libjxl',
        'libmypaint',
        'poppler-qt5',
        'python-pyqt5',
    },
    'okular': {
        'ebook-tools',
        'kdegraphics-mobipocket',
        'unrar',
    },
    'proton-ge-custom-bin': {
        'kdialog',
        'lib32-vulkan-icd-loader',
        'python-kivy',
        'steam',
        'vulkan-driver',
        'wine',
        'winetricks',
        'xboxdrv',
        'zenity',
    },
    'python': {
        'python-setuptools',
        'python-pip',
        'python-pipx',
        'sqlite',
        'xz',
        'tk',
    },
    'steam': {
        'steam-native-runtime',
    },
    'udiskie': {
        'libappindicator-gtk3',
    },
    'wine': {
        'alsa-plugins',
        'cups',
        'dosbox',
        'gnutls',
        'gst-plugins-bad',
        'gst-plugins-base',
        'gst-plugins-base-libs',
        'gst-plugins-good',
        'gst-plugins-ugly',
        'lib32-alsa-lib',
        'lib32-alsa-plugins',
        'lib32-gnutls',
        'lib32-gst-plugins-base',
        'lib32-gst-plugins-base-libs',
        'lib32-gst-plugins-good',
        'lib32-libcups',
        'lib32-libpulse',
        'lib32-libxcomposite',
        'lib32-libxinerama',
        'lib32-opencl-icd-loader',
        'lib32-pcsclite',
        'lib32-sdl2',
        'lib32-v4l-utils',
        'libgphoto2',
        'libpulse',
        'libxcomposite',
        'libxinerama',
        'opencl-icd-loader',
        'pcsclite',
        'samba',
        'sane',
        'sdl2',
        'unixodbc',
        'v4l-utils',
        'wine-gecko',
        'wine-mono',
    },
    'yt-dlp': {
        'aria2',
        'atomicparsley',
        'ffmpeg',
        'python-brotli',
        'python-brotlicffi',
        'python-mutagen',
        'python-pycryptodome',
        'python-pycryptodomex',
        'python-pyxattr',
        'python-secretstorage',
        'python-websockets',
        'python-xattr',
        'rtmpdump',
    },
}

EXPECTED_GROUPS = {
    'ar': {
        'libvirt',
        'libvirt-qemu',
        'storage',
        'video',
        'wheel',
    }
}

EXPECTED_SERVICES = {
    'fstrim.timer',
    'logrotate.timer',
    'systemd-timesyncd.service',
}

if HOSTNAME in ('mars', 'phobos'):
    EXPECTED_GROUPS['ar'].update({
        'games',  # for proton to automatically set niceness
        'realtime',
    })
    EXPECTED_PACKAGES.update({
        'python-pytorch-opt-rocm',
    })

if HOSTNAME == 'mars':
    EXPECTED_PACKAGES.update({
        'linux-zen',
        'linux-zen-headers',
    })

if HOSTNAME == 'phobos':
    EXPECTED_PACKAGES.update({
        'linux-flowx13',
        'linux-flowx13-headers',
    })

if HOSTNAME in ('mars', 'phobos', 'sol'):
    EXPECTED_PACKAGES.update({
        'linux-lts',
        'linux-lts-headers',
    })
    EXPECTED_SERVICES.update({
        'smb.service',
    })


async def ensure_users_in_expected_groups():
    for user, expected_groups in EXPECTED_GROUPS.items():
        current_groups = {
            g.gr_name
            for g in grp.getgrall()
            if user in g.gr_mem
        }
        for group in expected_groups - current_groups:
            await add_user_to_group(user, group)


async def add_user_to_group(user, group):
    # print prior to command so the sudo password prompt as context
    print(f'Adding user {user} to group {group}')
    proc = await asyncio.create_subprocess_exec(
        'sudo', 'gpasswd', '-a', user, group,
        stdout=asyncio.subprocess.DEVNULL,
    )
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def is_unit_enabled(name, user=False):
    proc = await asyncio.create_subprocess_exec(
        'systemctl',
        '--user' if user else '--system',
        'show',
        '--property=UnitFileState',
        '--',
        name,
        stdout=asyncio.subprocess.PIPE,
    )
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')
    stdout, _ = await proc.communicate()
    match stdout.decode().strip():
        case 'UnitFileState=enabled':
            return True
        case 'UnitFileState=disabled':
            return False
        case _:
            raise RuntimeError


async def enable_unit(name, now=False, user=False):
    if await is_unit_enabled(name, user=user):
        return
    print(f'Enabling unit {name} (user={user}) (now={now})')
    args = []
    if not user:
        args.append('sudo')

    args.extend([
        'systemctl',
        '--user' if user else '--system',
        'enable',
    ])
    if now:
        args.append('--now')
    args.extend(['--', name])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def install_packages(packages, asdeps=False, asexplicit=False):
    args = [
        'sudo',
        'pacman',
        '-S',
        '--noconfirm',
    ]
    if asdeps:
        args.append('--asdeps')
    if asexplicit:
        args.append('--asexplicit')
    args.extend(['--', *packages])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()


def all_packages():
    handle = pyalpm.Handle('.', '/var/lib/pacman')
    localdb = handle.get_localdb()
    return localdb.pkgcache


async def ensure_packages():
    expected_packages = set(EXPECTED_PACKAGES)
    if HOSTNAME in ('mars', 'phobos'):
        expected_packages.update(EXPECTED_PACKAGES_DESKTOP)
    installed_packages = {
        package.name: package
        for package in all_packages()
    }

    missing = set()
    for name in expected_packages:
        if name not in installed_packages:
            missing.add(name)
        elif installed_packages[name].reason != pyalpm.PKG_REASON_EXPLICIT:
            missing.add(name)

    if missing:
        print('Installing missing packages ...')
        await install_packages(missing, asexplicit=True)


async def ensure_package_dependencies():
    provided_packages = set()
    installed_packages = set()
    for package in all_packages():
        installed_packages.add(package.name)
        provided_packages.add(package.name)
        provided_packages.update(package.provides)

    missing = set()
    for package, expected_deps in EXPECTED_PACKAGE_DEPENDENCIES.items():
        if package not in installed_packages:
            continue
        for dep in expected_deps:
            if dep not in provided_packages:
                missing.add(dep)

    if missing:
        print('Installing missing dependencies ...')
        await install_packages(missing, asdeps=True)


async def main():
    if not pathlib.Path('/etc/arch-release').exists():
        return

    await ensure_users_in_expected_groups()

    await ensure_packages()
    await ensure_package_dependencies()

    for service in EXPECTED_SERVICES:
        await enable_unit(service, now=True)


if __name__ == '__main__':
    asyncio.run(main())
