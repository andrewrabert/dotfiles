#!/usr/bin/env python3
import argparse
import asyncio
import grp
import hashlib
import pathlib
import shutil
import socket
import subprocess
import sys

if not pathlib.Path('/etc/arch-release').is_file():
    exit()

try:
    import pyalpm
except ImportError:
    subprocess.run(['yay', '-S', '--noconfirm', 'pyalpm'], check=True)
    import pyalpm

HOSTNAME = socket.gethostname()

EXPECTED_PACKAGES = set()

if HOSTNAME in ('sol', 'mars', 'phobos'):
    EXPECTED_PACKAGES.update({
        '7zip',
        'advancecomp',
        'aria2',
        'bat',
        'bchunk',
        'binmerge',
        'busybox',
        'cabextract',
        'cdemu-client',
        'cuetools',
        'curlie',
        'dash',
        'devtools',
        'direnv',
        'dosfstools',
        'e2fsprogs',
        'epub-tools-bin',
        'exfatprogs',
        'fd',
        'ffmpeg',
        'flake8',
        'foot-terminfo',
        'fzf',
        'gifsicle',
        'git',
        'git-lfs',
        'guestfs-tools',
        'htop',
        'hugo',
        'hyperfine',
        'iftop',
        'inetutils',  # hostname command
        'innoextract',
        'iperf3',
        'ipython',
        'jpegoptim',
        'jq',
        'ledger',
        'less',
        'lf',
        'mac',
        'mediainfo',
        'moreutils',
        'mp3val',
        'mprime-bin',
        'mpv',
        'ms-sys',
        'neovim',
        'nsz',
        'ntfs-3g',
        'openssh',
        'opus-tools',
        'oxipng',
        'pacman-contrib',
        'pandoc-cli',
        'pbzip2',
        'perl-image-exiftool',
        'pigz',
        'pixz',
        'pwgen',
        'pyalpm',
        'pyright',
        'python',
        'python-async-executor',
        'python-dbus-fast',
        'python-httpx',
        'python-magic',
        'python-mozjpeg-lossless-optimization',
        'python-mutagen',
        'python-numpy',
        'python-psutil',
        'python-tqdm',
        'python-yarl',
        'rdfind',
        'reflector',
        'ripgrep',
        'rsync',
        'ruff',
        'rust-analyzer',
        'shellcheck',
        'shntool',
        'speedtest-go',
        'sshfs',
        'sshuttle',
        'svgo',
        'syncthing',
        'tmux',
        'transmission-cli',
        'tree-sitter-cli',
        'typescript-language-server',
        'unace',
        'unrar',
        'unshield',
        'unzip',
        'usbutils',
        'vim',
        'vorbis-tools',
        'wl-clipboard',
        'xsel',
        'yt-dlp',
        'zip',
        'zsh',
    })

if HOSTNAME in ('mars', 'phobos', 'lounge-htpc'):
    EXPECTED_PACKAGES.update({
        'firefox',
        'gamescope',
        'gwenview',
        'jellyfin-media-player',
        'mangohud',
        'noto-fonts',
        'noto-fonts-cjk',
        'noto-fonts-emoji',
        'noto-fonts-extra',
        'proton-ge-custom-bin',
        'steam',
        'ttf-dejavu-emojiless',
    })

if HOSTNAME in ('mars', 'phobos'):
    EXPECTED_PACKAGES.update({
        'alacritty',
        'android-tools',
        'android-udev',
        'audacity',
        'base16-shell-preview',
        'bitwig-studio',
        'chromium',
        'discord',
        'docker',
        'docker-compose',
        'dolphin',
        'element-desktop',
        'foliate',
        'foot',
        'gifski',
        'gimp',
        'gparted',
        'inkscape',
        'kcolorchooser',
        'kdeconnect',
        'kid3-qt',
        'krita',
        'mkvtoolnix-gui',
        'mtpfs',
        'obs-studio',
        'okular',
        'piavpn-bin',
        'plasma6-runners-emojirunner',
        'podman',
        'rawtherapee',
        'signal-desktop',
        'slack-desktop',
        'spectacle',
        'strawberry',
        'tremotesf',
        'virt-manager',
        'wine',
        'xboxdrv',
    })

EXPECTED_PACKAGE_DEPENDENCIES = {
    'cdemu-daemon': {
        'vhba-module-dkms',
    },
    'devtools': {
        'bat',
        'btrfs-progs',
        'nvchecker',
    },
    'digikam': {
        'darktable',
        'hugin',
        'qt6-imageformats',
    },
    'dolphin': {
        'ffmpegthumbs',
        'kde-cli-tools',
        'kdegraphics-thumbnailers',
        'kio-admin',
        'konsole',
        'purpose',
    },
    'gimp': {
        'alsa-lib',
        'cfitsio',
        'ghostscript',
        'gjs',
        'gutenprint',
        'gvfs',
    },
    'gwenview': {
        'kimageformats',
        'qt6-imageformats',
    },
    'gparted': {
        'btrfs-progs',
        'dosfstools',
        'exfatprogs',
        'f2fs-tools',
        'gpart',
        'mtools',
        'ntfs-3g',
        'polkit',
        'udftools',
        'xfsprogs',
        'xorg-xhost',
    },
    'libvirt': {
        'dmidecode',
        'dnsmasq',
        'gettext',
        'iptables-nft',
        'lvm2',
        'qemu-desktop',
        'swtpm',
    },
    'krita': {
        'kimageformats5',
        'krita-plugin-gmic',
        'kseexpr',
        'libheif',
        'libjxl',
        'libmypaint',
        'poppler-qt5',
        'python-pyqt5',
    },
    'lutris': {
        'fluidsynth',
        'gamemode',
        'gvfs',
        'innoextract',
        'lib32-gamemode',
        'lib32-vkd3d',
        'lib32-vulkan-icd-loader',
        'python-protobuf',
        'vkd3d',
        'vulkan-icd-loader',
        'vulkan-tools',
        'wine',
        'xorg-xgamma',
    },
    'okular': {
        'ebook-tools',
        'kdegraphics-mobipocket',
        'unrar',
    },
    'print-manager': {
        'system-config-printer',
    },
    'proton-ge-custom-bin': {
        'kdialog',
        'lib32-vulkan-icd-loader',
        'python-kivy',
        'steam',
        'vulkan-driver',
        'wine',
        'winetricks',
        'xboxdrv',
        'zenity',
    },
    'python': {
        'python-setuptools',
        'python-pip',
        'python-pipx',
        'sqlite',
        'xz',
        'tk',
    },
    'steam': {
        'steam-native-runtime',
    },
    'udiskie': {
        'libappindicator-gtk3',
    },
    'wine': {
        'alsa-plugins',
        'cups',
        'dosbox',
        'gnutls',
        'gst-plugins-bad',
        'gst-plugins-base',
        'gst-plugins-base-libs',
        'gst-plugins-good',
        'gst-plugins-ugly',
        'lib32-alsa-lib',
        'lib32-alsa-plugins',
        'lib32-gnutls',
        'lib32-gst-plugins-base',
        'lib32-gst-plugins-base-libs',
        'lib32-gst-plugins-good',
        'lib32-libcups',
        'lib32-libpulse',
        'lib32-libxcomposite',
        'lib32-libxinerama',
        'lib32-opencl-icd-loader',
        'lib32-pcsclite',
        'lib32-sdl2-compat',
        'lib32-v4l-utils',
        'libgphoto2',
        'libpulse',
        'libxcomposite',
        'libxinerama',
        'opencl-icd-loader',
        'pcsclite',
        'samba',
        'sane',
        'sdl2-compat',
        'unixodbc',
        'v4l-utils',
        'wine-gecko',
        'wine-mono',
    },
    'xdg-utils': {
        # needed to correctly identify .cbz as application/vnd.comicbook+zip
        'perl-file-mimeinfo',
    },
    'yt-dlp': {
        'aria2',
        'atomicparsley',
        'ffmpeg',
        'python-brotli',
        'python-brotlicffi',
        'python-mutagen',
        'python-pycryptodome',
        'python-pycryptodomex',
        'python-pyxattr',
        'python-secretstorage',
        'python-websockets',
        'python-xattr',
        'rtmpdump',
    },
}

EXPECTED_GROUPS = {}

EXPECTED_SERVICES = {
    'fstrim.timer',
    'logrotate.timer',
    'systemd-timesyncd.service',
}

EFI_SHELL_HOSTS = ('mars', 'phobos', 'lounge-htpc', 'sol')
if HOSTNAME in EFI_SHELL_HOSTS:
    EXPECTED_PACKAGES.add('edk2-shell')

if HOSTNAME in ('lounge-htpc'):
    EXPECTED_GROUPS.setdefault('lounge-htpc', set())
    EXPECTED_GROUPS['lounge-htpc'].update({
        'audio',
        'games',
        'nopasswdlogin',
        'realtime',
        'video',
        'wheel',
    })

if HOSTNAME in ('mars', 'phobos'):
    EXPECTED_PACKAGE_DEPENDENCIES.setdefault('podman', set())
    EXPECTED_PACKAGE_DEPENDENCIES['podman'].update({
        'apparmor',
        'btrfs-progs',
        'cni-plugins',
        'fuse-overlayfs',
        'podman-compose',
        'slirp4netns',
    })

    EXPECTED_PACKAGE_DEPENDENCIES.setdefault('docker', set())
    EXPECTED_PACKAGE_DEPENDENCIES['docker'].update({
        'btrfs-progs',
        'docker-buildx',
        'pigz',
    })

    EXPECTED_GROUPS.setdefault('ar', set())
    EXPECTED_GROUPS['ar'].update({
        'games',  # for proton to automatically set niceness
        'realtime',
        'libvirt',
        'libvirt-qemu',
        'storage',
        'video',
        'wheel',
    })
    EXPECTED_PACKAGES.update({
        'python-pytorch-opt-rocm',
    })

if HOSTNAME == 'mars':
    EXPECTED_PACKAGES.update({
        'linux-zen',
        'linux-zen-headers',
    })

if HOSTNAME == 'phobos':
    EXPECTED_PACKAGES.update({
        'linux-flowx13',
        'linux-flowx13-headers',
    })

if HOSTNAME in ('mars', 'phobos', 'sol'):
    EXPECTED_PACKAGES.update({
        'linux-lts',
        'linux-lts-headers',
    })
    EXPECTED_SERVICES.update({
        'smb.service',
    })


def sha256sum(path):
    hasher = hashlib.sha256()
    try:
        with open(path, 'rb') as handle:
            while data := handle.read(65536):
                hasher.update(data)
    except OSError:
        print(f'error reading "{path}"', file=sys.stderr)
        raise
    return hasher.hexdigest()


async def install_efi_shell():
    source = pathlib.Path('/usr/share/edk2-shell/x64/Shell_Full.efi')
    target = pathlib.Path('/boot/shellx64.efi')

    if not target.exists() or sha256sum(source) != sha256sum(target):
        print('Installing', target)
        shutil.copyfile(source, target)


async def ensure_using_systemd_resolved():
    unit = 'systemd-resolved'
    if await is_unit_enabled(unit):
        await enable_unit(unit)

    source = pathlib.Path('/run/systemd/resolve/stub-resolv.conf')
    target = pathlib.Path('/etc/resolv.conf')
    if target.resolve() != source:
        print(f'Linking {target} to {source}')
        try:
            target.unlink()
        except FileNotFoundError:
            pass
        target.symlink_to(source)


async def ensure_users_in_expected_groups():
    for user, expected_groups in EXPECTED_GROUPS.items():
        current_groups = {
            g.gr_name
            for g in grp.getgrall()
            if user in g.gr_mem
        }
        for group in expected_groups - current_groups:
            await add_user_to_group(user, group)


async def add_user_to_group(user, group):
    # print prior to command so the sudo password prompt as context
    print(f'Adding user {user} to group {group}')
    proc = await asyncio.create_subprocess_exec(
        'sudo', 'gpasswd', '-a', user, group,
        stdout=asyncio.subprocess.DEVNULL,
    )
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def is_unit_enabled(name, user=False):
    proc = await asyncio.create_subprocess_exec(
        'systemctl',
        '--user' if user else '--system',
        'show',
        '--property=UnitFileState',
        '--',
        name,
        stdout=asyncio.subprocess.PIPE,
    )
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')
    stdout, _ = await proc.communicate()
    match stdout.decode().strip():
        case 'UnitFileState=enabled':
            return True
        case 'UnitFileState=disabled':
            return False
        case _:
            raise RuntimeError


async def enable_unit(name, now=False, user=False):
    if await is_unit_enabled(name, user=user):
        return
    print(f'Enabling unit {name} (user={user}) (now={now})')
    args = []
    if not user:
        args.append('sudo')

    args.extend([
        'systemctl',
        '--user' if user else '--system',
        'enable',
    ])
    if now:
        args.append('--now')
    args.extend(['--', name])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()
    if proc.returncode:
        raise RuntimeError(f'exit {proc.returncode}')


async def install_packages(packages, asdeps=False, asexplicit=False):
    args = [
        'sudo',
        'pacman',
        '-S',
        '--noconfirm',
    ]
    if asdeps:
        args.append('--asdeps')
    if asexplicit:
        args.append('--asexplicit')
    args.extend(['--', *packages])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.communicate()


def all_packages():
    handle = pyalpm.Handle('.', '/var/lib/pacman')
    localdb = handle.get_localdb()
    return localdb.pkgcache


async def ensure_packages():
    expected_packages = set(EXPECTED_PACKAGES)
    installed_packages = {
        package.name: package
        for package in all_packages()
    }

    missing = set()
    for name in expected_packages:
        if name not in installed_packages:
            missing.add(name)
        elif installed_packages[name].reason != pyalpm.PKG_REASON_EXPLICIT:
            missing.add(name)

    if missing:
        print('Installing missing packages ...')
        await install_packages(missing, asexplicit=True)


async def ensure_package_dependencies():
    provided_packages = set()
    installed_packages = set()
    for package in all_packages():
        installed_packages.add(package.name)
        provided_packages.add(package.name)
        provided_packages.update(package.provides)

    missing = set()
    for package, expected_deps in EXPECTED_PACKAGE_DEPENDENCIES.items():
        if package not in installed_packages:
            continue
        for dep in expected_deps:
            if dep not in provided_packages:
                missing.add(dep)

    if missing:
        print('Installing missing dependencies ...')
        await install_packages(missing, asdeps=True)


async def run_mode(mode):
    args = []
    if mode == 'root':
        args.append('sudo')
    args.extend([__file__, mode])
    proc = await asyncio.create_subprocess_exec(*args)
    await proc.wait()
    if proc.returncode:
        raise ProcessError(proc)


class ProcessError(Exception):
    def __init__(self, process, message=None):
        self.process = process
        self.message = message

    def __str__(self):
        proc = self.process

        text = f'exit {proc.returncode}'
        if self.message is not None:
            text = f'{text} - {self.message}'

        try:
            args = proc._transport._extra['subprocess'].args
        except (AttributeError, KeyError):
            pass
        else:
            text = f'{text}: {args}'
        return text


async def main():
    if not pathlib.Path('/etc/arch-release').exists():
        return

    modes = ['user', 'root']
    parser = argparse.ArgumentParser()
    parser.add_argument('mode', choices=modes, nargs='?')
    args = parser.parse_args()

    # TODO: always run as root
    match args.mode:
        case 'user':
            await ensure_users_in_expected_groups()

            await ensure_packages()
            await ensure_package_dependencies()

            for service in EXPECTED_SERVICES:
                await enable_unit(service, now=True)
        case 'root':
            if HOSTNAME in ('mars', 'phobos'):
                await ensure_using_systemd_resolved()
            if HOSTNAME in EFI_SHELL_HOSTS:
                await install_efi_shell()
        case _:
            for mode in modes:
                await run_mode(mode)


if __name__ == '__main__':
    asyncio.run(main())
