#!/usr/bin/env sh
set -eu
VERBOSE=

INSTALL_SYSTEM=

NO_PUSH=
NO_PULL=
case "$(git -C "$DOTFILES" remote get-url origin)" in
    https://*)
        NO_PUSH='--no-push'
        ;;
esac

if [ -z "$HOST_DOTFILES" ]; then
    exit 1
fi
usage() {
    cat << EOF
usage: [OPTION]
  --no-push     disable git push
  --system      also install system files
  -h, --help
  --verbose
EOF
}

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit
            ;;
        --no-pull)
            NO_PULL='--no-pull'
            shift
            ;;
        --no-push)
            NO_PUSH='--no-push'
            shift
            ;;
        -v)
            VERBOSE=1
            shift
            ;;
        --system)
            INSTALL_SYSTEM=1
            shift
            ;;
        *)
            usage >&2
            echo 'error: unrecognized arguments' >&2
            exit 1
    esac
done

MAGENTA='\033[1;35m'
RED='\033[1;31m'
YELLOW='\033[1;34m'
RESET='\033[0m'
BOLD='\033[1m'

update_non_user() {
    dotfiles_root="$1"
    tag="$2"
    backup_root="$dotfiles_root/non-user/$tag"
    if [ -d "$backup_root" ]; then
        for source_file in $(find "$backup_root" -type f); do
            target=${source_file#$backup_root}
            if sudo test -L "$target" && ! test -L "$source_file"; then
                printf "%bWarning: %s is a symlink but source is not, skipping%b\n" "$YELLOW" "$target" "$RESET"
                continue
            fi
            if test -L "$source_file" && sudo test -L "$target"; then
                source_link=$(readlink "$source_file")
                target_link=$(sudo readlink "$target")
                if [ "$source_link" != "$target_link" ]; then
                    echo Syncing "$target"
                    sudo mkdir -p "$(dirname "$target")"
                    sudo cp -P "$source_file" "$target"
                elif [ -n "$VERBOSE" ]; then
                    echo Found "$tag" "$target"
                fi
            elif sudo test -f "$target" || [ "$tag" != 'common' ]; then
                if ! sudo test -f "$target" || ! sudo diff "$source_file" "$target" > /dev/null 2>&1 ; then
                    echo Syncing "$target"
                    sudo mkdir -p "$(dirname "$target")"
                    sudo cp "$source_file" "$target"
                elif [ -n "$VERBOSE" ]; then
                    echo Found "$tag" "$target"
                fi
            fi
        done
    fi
}

update_repo() {
    dotfiles_root="$2"
    printf "%bUpdating %s (%s)...%b\n" "$MAGENTA" "$1" "$dotfiles_root" "$RESET"
    if [ -z "$NO_PULL" ]; then
        git auto-update $NO_PUSH "$dotfiles_root"
    fi

    if [ -n "$INSTALL_SYSTEM" ]; then
        printf "%bUpdating non-user files %s (%s)...%b\n" "$MAGENTA" "$1" "$dotfiles_root" "$RESET"
        if command -v sudo > /dev/null; then
            update_non_user "$dotfiles_root" "$HOST_DOTFILES"

            if command -v pacman > /dev/null; then
                update_non_user "$dotfiles_root" _archlinux
            fi
        fi
    fi
}

if ! command -v dotfiles-link-bin > /dev/null || ! command -v git-auto-update > /dev/null; then
    "${DOTFILES}/scripts/terminal/dotfiles-link-bin"
fi

update_repo "DOTFILES" "$DOTFILES"

for d in $(env | grep ^DOTFILES_ | sort); do
    name="$(echo "$d" | cut -d = -f 1)"
    loc="$(echo "$d" | cut -d = -f 2)"
    update_repo "$name" "$loc"
done

dotfiles-link-bin
