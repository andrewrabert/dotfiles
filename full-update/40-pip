#!/usr/bin/env sh
set -e

export PIP_REQUIRE_VIRTUALENV=0

if ! command -v python > /dev/null 2>&1; then
    exit
fi

pip() {
    python -m pip "$@"
}

if [ "$(realpath ~/.config/pip)" != "${DOTFILES}/pip" ]; then
    mkdir -p ~/.config
    rm -rf ~/.config/pip
    ln -s "${DOTFILES}/pip" ~/.config
fi

if ! python -m pip --version 2>&1 > /dev/null || [ "$(python -m pip --version)" != "$(pip --version)" ]; then
    echo 'Installing pip'
    python -m ensurepip --user --default-pip
fi

if [ "$(pip list | grep -c -e '^pip ' -e '^setuptools ' -e '^wheel ')" != '3' ]; then
    echo 'Updating pip, setuptools, and wheel'
    pip install --quiet --user --upgrade --force-reinstall pip setuptools wheel
fi

pip_outdated() {
    pip list --outdated | python -c '
import sys

lines = sys.stdin.read().splitlines()
if lines:
    package_versions = []
    for line in lines[2:]:
        package, _, latest, _ = line.split(maxsplit=4)
        package_versions.append(f"{package}={latest}")
    print("\n".join(package_versions))

'
}

ood_packages="$(pip_outdated)"
if [ -n "${ood_packages}" ]; then
    echo 'Updating out-of-date packages'
    pip install --user --upgrade $(echo "${ood_packages}" | cut -d = -f 1)
fi
