#!/usr/bin/env python3
"""Generate KDE color scheme files for per-application titlebar colors."""

import argparse
import configparser
import dataclasses
import io
import os
import pathlib
import subprocess
import tempfile
import uuid


def safe_write_text(path, data):
    path = pathlib.Path(path)
    with tempfile.NamedTemporaryFile(
        mode="w", delete=False, dir=path.parent
    ) as handle:
        try:
            temp_path = pathlib.Path(handle.name)
            handle.write(data)
            handle.flush()
            os.fsync(handle.fileno())
            temp_path.rename(path)
        finally:
            try:
                temp_path.unlink()
            except FileNotFoundError:
                pass


@dataclasses.dataclass
class WindowClass:
    description: str
    wmclass: str
    wmclasscomplete: bool = False


@dataclasses.dataclass
class ColorScheme:
    active_bg: str | None = None
    active_fg: str | None = None
    inactive_bg: str | None = None
    inactive_fg: str | None = None

    def to_rgb(self, hex_color: str) -> str:
        hex_color = hex_color.lstrip("#")
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
        return f"{r},{g},{b}"


@dataclasses.dataclass
class TitlebarConfig:
    classes: list[WindowClass] = dataclasses.field(default_factory=list)
    dark: ColorScheme | None = None
    light: ColorScheme | None = None


DARK_ACTIVE_FG = "#fcfcfc"
DARK_INACTIVE_FG = "#7e7e7e"

LIGHT_ACTIVE_FG = "#232629"
LIGHT_INACTIVE_FG = "#232629"


TITLEBAR_CONFIGS = {
    "Element": TitlebarConfig(
        classes=[
            WindowClass(description="Element", wmclass="element"),
            WindowClass(description="Element", wmclass="Element"),
        ],
        dark=ColorScheme(
            active_bg="#101317",
            inactive_bg="#101317",
        ),
        light=ColorScheme(
            active_bg="#ffffff",
            inactive_bg="#ffffff",
        ),
    ),
    "Foot": TitlebarConfig(
        classes=[
            WindowClass(description="foot", wmclass="foot"),
            WindowClass(
                description="tmux-scratchpad",
                wmclass="foot tmux-scratchpad",
                wmclasscomplete=True,
            ),
        ],
        dark=ColorScheme(
            active_bg="#181818",
            active_fg="#7e7e7e",
            inactive_bg="#181818",
            inactive_fg="#7e7e7e",
        ),
        light=ColorScheme(
            active_bg="#ffffff",
            inactive_bg="#ffffff",
        ),
    ),
    "Jellyfin Media Player": TitlebarConfig(
        classes=[
            WindowClass(
                description="Jellyfin Media Player",
                wmclass="jellyfinmediaplayer",
            ),
            WindowClass(
                description="Jellyfin Media Player",
                wmclass="com.github.iwalton3.jellyfin-media-player",
            ),
        ],
        dark=ColorScheme(
            active_bg="#202020",
            active_fg=DARK_ACTIVE_FG,
            inactive_bg="#202020",
            inactive_fg=DARK_INACTIVE_FG,
        ),
        light=ColorScheme(
            active_bg="#202020",
            active_fg=DARK_ACTIVE_FG,
            inactive_bg="#202020",
            inactive_fg=DARK_INACTIVE_FG,
        ),
    ),
    "Krita": TitlebarConfig(
        classes=[
            WindowClass(description="Krita", wmclass="krita"),
        ],
        dark=ColorScheme(
            active_bg="#202326",
            inactive_bg="#202326",
        ),
    ),
    "Obsidian": TitlebarConfig(
        classes=[
            WindowClass(description="Obsidian", wmclass="obsidian"),
        ],
        dark=ColorScheme(
            active_bg="#363636",
            inactive_bg="#262626",
        ),
    ),
    "Signal": TitlebarConfig(
        classes=[
            WindowClass(description="Signal", wmclass="signal"),
            WindowClass(description="Signal", wmclass="Signal"),
        ],
        dark=ColorScheme(
            active_bg="#2e2e2e",
            inactive_bg="#2e2e2e",
        ),
    ),
}


def merge_config(
    base: configparser.ConfigParser,
    color_scheme: ColorScheme,
    app_name: str,
):
    color_data = {}

    if color_scheme.active_bg or color_scheme.active_fg:
        color_data["Colors:Header"] = {}
        if color_scheme.active_bg:
            color_data["Colors:Header"]["BackgroundNormal"] = (
                color_scheme.to_rgb(color_scheme.active_bg)
            )
        if color_scheme.active_fg:
            color_data["Colors:Header"]["ForegroundNormal"] = (
                color_scheme.to_rgb(color_scheme.active_fg)
            )

    if color_scheme.inactive_bg or color_scheme.inactive_fg:
        color_data["Colors:Header][Inactive"] = {}
        if color_scheme.inactive_bg:
            color_data["Colors:Header][Inactive"]["BackgroundNormal"] = (
                color_scheme.to_rgb(color_scheme.inactive_bg)
            )
        if color_scheme.inactive_fg:
            color_data["Colors:Header][Inactive"]["ForegroundNormal"] = (
                color_scheme.to_rgb(color_scheme.inactive_fg)
            )

    for section, values in color_data.items():
        base.setdefault(section, {})
        for key, value in values.items():
            base.set(section, key, value)

    base.remove_section("General")
    base.add_section("General")

    general_data = {
        "ColorScheme": f"Application{app_name}",
        "Name": f"Application - {app_name}",
    }

    for key, value in general_data.items():
        base.set("General", key, value)


def get_base16_colors() -> tuple[str | None, str | None, str | None]:
    base16_theme_path = pathlib.Path.home() / ".base16_theme"
    if not base16_theme_path.exists():
        return None, None, None

    try:
        env = os.environ.copy()
        env["BASE16_SHELL_ENABLE_VARS"] = "1"

        result = subprocess.run(
            [
                "sh",
                "-c",
                ". ~/.base16_theme && echo $BASE16_COLOR_00_HEX && echo $BASE16_COLOR_05_HEX && echo $BASE16_COLOR_03_HEX",
            ],
            capture_output=True,
            text=True,
            env=env,
            check=True,
        )

        lines = result.stdout.strip().split("\n")
        if len(lines) >= 3:
            bg = f"#{lines[0]}" if lines[0] else None
            active_fg = f"#{lines[1]}" if lines[1] else None
            inactive_fg = f"#{lines[2]}" if lines[2] else None
            return bg, active_fg, inactive_fg
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass

    return None, None, None


def is_dark_mode() -> bool:
    try:
        result = subprocess.run(
            [
                "dbus-send",
                "--session",
                "--print-reply",
                "--dest=org.freedesktop.portal.Desktop",
                "/org/freedesktop/portal/desktop",
                "org.freedesktop.portal.Settings.Read",
                "string:org.freedesktop.appearance",
                "string:color-scheme",
            ],
            capture_output=True,
            text=True,
            check=True,
        )
        for line in result.stdout.splitlines():
            if "uint32" in line:
                value = line.strip().split()[-1]
                return value == "1"
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return True


def find_rule_for_wmclass(
    kwin_config: configparser.RawConfigParser, wmclass: str
):
    for section in kwin_config.sections():
        if section == "General":
            continue
        if kwin_config.has_option(section, "wmclass"):
            if kwin_config.get(section, "wmclass") == wmclass:
                return section
    return None


def update_kwin_rules(
    app_name: str,
    config: TitlebarConfig,
    kwinrulesrc_path: pathlib.Path,
    managed_rules: set,
    dark_mode: bool,
) -> bool:
    kwin_config = configparser.RawConfigParser()
    kwin_config.optionxform = str

    old_content = ""
    if kwinrulesrc_path.exists():
        old_content = kwinrulesrc_path.read_text()
        kwin_config.read_string(old_content)

    if not kwin_config.has_section("General"):
        kwin_config.add_section("General")

    active_scheme = config.dark if dark_mode else config.light
    inactive_scheme = config.light if dark_mode else config.dark

    if not active_scheme:
        return False

    mode_suffix = "(Dark)" if dark_mode else "(Light)"

    for window_class in config.classes:
        rule_data = {
            "Description": f"Application settings for {window_class.description}",
            "decocolor": f"Titlebar - {app_name} {mode_suffix}",
            "decocolorrule": "2",
            "wmclass": window_class.wmclass,
            "wmclassmatch": "1",
        }

        if window_class.wmclasscomplete:
            rule_data["wmclasscomplete"] = "true"

        existing_section = find_rule_for_wmclass(
            kwin_config, window_class.wmclass
        )

        if existing_section:
            existing_keys = set(kwin_config.options(existing_section))
            new_keys = set(rule_data.keys())

            if existing_keys != new_keys:
                print(
                    f"Warning: Rule for {window_class.wmclass} has different keys. Skipping update."
                )
                print(f"  Existing keys: {existing_keys}")
                print(f"  New keys: {new_keys}")
                managed_rules.add(existing_section)
                continue

            rule_uuid = existing_section
            managed_rules.add(rule_uuid)
        else:
            rule_uuid = str(uuid.uuid4())
            managed_rules.add(rule_uuid)
            kwin_config.add_section(rule_uuid)

        for key, value in rule_data.items():
            kwin_config.set(rule_uuid, key, value)

    if inactive_scheme:
        inactive_suffix = "(Light)" if dark_mode else "(Dark)"
        for section in list(kwin_config.sections()):
            if section == "General":
                continue
            if kwin_config.has_option(section, "decocolor"):
                decocolor = kwin_config.get(section, "decocolor")
                if decocolor == f"Titlebar - {app_name} {inactive_suffix}":
                    kwin_config.remove_section(section)

    existing_rules = kwin_config.get("General", "rules", fallback="").split(
        ","
    )
    existing_rules = [r.strip() for r in existing_rules if r.strip()]

    all_rules = [
        rule for rule in existing_rules if kwin_config.has_section(rule)
    ]
    all_rules = list(dict.fromkeys(all_rules + list(managed_rules)))

    kwin_config.set("General", "rules", ",".join(all_rules))
    kwin_config.set("General", "count", str(len(all_rules)))

    output = io.StringIO()
    kwin_config.write(output, space_around_delimiters=False)
    new_content = output.getvalue()

    if old_content != new_content:
        safe_write_text(kwinrulesrc_path, new_content)
        return True
    return False


def main():
    parser = argparse.ArgumentParser(
        description="Merge KDE color scheme files"
    )
    args = parser.parse_args()

    dark_mode = is_dark_mode()
    base16_bg, base16_active_fg, base16_inactive_fg = get_base16_colors()

    if base16_bg and "Foot" in TITLEBAR_CONFIGS:
        TITLEBAR_CONFIGS["Foot"].dark.active_bg = base16_bg
        TITLEBAR_CONFIGS["Foot"].dark.inactive_bg = base16_bg
    if base16_active_fg and "Foot" in TITLEBAR_CONFIGS:
        TITLEBAR_CONFIGS["Foot"].dark.active_fg = base16_active_fg
    if base16_inactive_fg and "Foot" in TITLEBAR_CONFIGS:
        TITLEBAR_CONFIGS["Foot"].dark.inactive_fg = base16_inactive_fg
    xdg_data_home = os.environ.get(
        "XDG_DATA_HOME", pathlib.Path.home() / ".local/share"
    )
    xdg_config_home = pathlib.Path(
        os.environ.get("XDG_CONFIG_HOME", pathlib.Path.home() / ".config")
    )

    output_dir = pathlib.Path(xdg_data_home) / "color-schemes"
    output_dir.mkdir(parents=True, exist_ok=True)

    kwinrulesrc_path = pathlib.Path(xdg_config_home) / "kwinrulesrc"

    created_files = set()
    managed_rules = set()
    colors_changed = False
    kwinrules_changed = False

    for app_name, config in TITLEBAR_CONFIGS.items():
        if config.dark:
            base = configparser.RawConfigParser()
            base.optionxform = str
            base.read_string(
                pathlib.Path(
                    "/usr/share/color-schemes/BreezeDark.colors"
                ).read_text()
            )

            merge_config(base, config.dark, app_name)

            output = io.StringIO()
            base.write(output, space_around_delimiters=False)

            output_file = output_dir / f"Titlebar - {app_name} (Dark).colors"
            new_content = output.getvalue()

            if output_file.exists() and output_file.read_text() == new_content:
                created_files.add(output_file)
            else:
                safe_write_text(output_file, new_content)
                created_files.add(output_file)
                colors_changed = True

        if config.light:
            base = configparser.RawConfigParser()
            base.optionxform = str
            base.read_string(
                pathlib.Path(
                    "/usr/share/color-schemes/BreezeLight.colors"
                ).read_text()
            )

            merge_config(base, config.light, app_name)

            output = io.StringIO()
            base.write(output, space_around_delimiters=False)

            output_file = output_dir / f"Titlebar - {app_name} (Light).colors"
            new_content = output.getvalue()

            if output_file.exists() and output_file.read_text() == new_content:
                created_files.add(output_file)
            else:
                safe_write_text(output_file, new_content)
                created_files.add(output_file)
                colors_changed = True

        if update_kwin_rules(
            app_name, config, kwinrulesrc_path, managed_rules, dark_mode
        ):
            kwinrules_changed = True

    for file in output_dir.glob("Titlebar - *.colors"):
        if file not in created_files:
            file.unlink()
            print(f"Removed {file}")
            colors_changed = True

    if colors_changed:
        subprocess.run(
            [
                "dbus-send",
                "--type=signal",
                "/KGlobalSettings",
                "org.kde.KGlobalSettings.notifyChange",
                "int32:2",
                "int32:0",
            ]
        )

    if kwinrules_changed:
        subprocess.run(
            [
                "kwriteconfig6",
                "--notify",
                "--file",
                "kwinrulesrc",
                "--group",
                "General",
                "--key",
                "count",
                str(len(managed_rules)),
            ]
        )

    subprocess.run(
        [
            "dbus-send",
            "--type=method_call",
            "--dest=org.kde.KWin",
            "/KWin",
            "org.kde.KWin.reconfigure",
        ]
    )


if __name__ == "__main__":
    main()
