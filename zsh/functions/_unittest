#compdef unittest

_unittest() {
    local state line

    if [[ $words[1] == "discover" ]]; then
        _arguments -C \
            '(-h --help)'{-h,--help}'[show help message and exit]' \
            '(-v --verbose)'{-v,--verbose}'[verbose output]' \
            '(-q --quiet)'{-q,--quiet}'[quiet output]' \
            '--locals[show local variables in tracebacks]' \
            '--durations[show N slowest test cases]:number of tests:' \
            '(-f --failfast)'{-f,--failfast}'[stop on first fail or error]' \
            '(-c --catch)'{-c,--catch}'[catch Ctrl-C and display results so far]' \
            '(-b --buffer)'{-b,--buffer}'[buffer stdout and stderr during tests]' \
            '(-k)-k[only run tests matching substring]:test name pattern:' \
            '(-s --start-directory)'{-s,--start-directory}'[directory to start discovery]:start directory:_directories' \
            '(-p --pattern)'{-p,--pattern}'[pattern to match tests]:pattern:' \
            '(-t --top-level-directory)'{-t,--top-level-directory}'[top level directory of project]:top level directory:_directories'
    else
        _arguments -C \
            '(-h --help)'{-h,--help}'[show help message and exit]' \
            '(-v --verbose)'{-v,--verbose}'[verbose output]' \
            '(-q --quiet)'{-q,--quiet}'[quiet output]' \
            '--locals[show local variables in tracebacks]' \
            '--durations[show N slowest test cases]:number of tests:' \
            '(-f --failfast)'{-f,--failfast}'[stop on first fail or error]' \
            '(-c --catch)'{-c,--catch}'[catch Ctrl-C and display results so far]' \
            '(-b --buffer)'{-b,--buffer}'[buffer stdout and stderr during tests]' \
            '(-k)-k[only run tests matching substring]:test name pattern:' \
            '1: :->command_or_tests' \
            '*: :->tests'

        case $state in
            (command_or_tests)
                local test_results
                local current="${words[CURRENT]}"
                if [[ -n "$current" && "$current" != "discover" ]]; then
                    test_results=($(unittest-findtests --prefix "$current" 2>/dev/null))
                    if [[ ${#test_results[@]} -eq 1 ]]; then
                        test_results=($(unittest-findtests --prefix "$test_results[1]" 2>/dev/null))
                    fi
                else
                    test_results=($(unittest-findtests 2>/dev/null))
                fi
                _alternative \
                    'commands:subcommands:((discover\:"test discovery mode"))' \
                    "tests:test modules:($test_results)"
            ;;
            (tests)
                local -a unittests
                local current="${words[CURRENT]}"
                if [[ -n "$current" ]]; then
                    unittests=( $(unittest-findtests --prefix "$current" 2>/dev/null) )
                    if [[ ${#unittests[@]} -eq 1 ]]; then
                        unittests=( $(unittest-findtests --prefix "$unittests[1]" 2>/dev/null) )
                    fi
                else
                    unittests=( $(unittest-findtests 2>/dev/null) )
                fi
                if [[ ${#unittests[@]} -gt 0 ]]; then
                    _multi_parts . unittests
                fi
            ;;
        esac
    fi
}

_unittest "$@"
